{"version":3,"file":"hls.worker.js.map","sources":["src/events.ts","src/errors.ts","src/crypt/decrypter-aes-mode.ts","src/crypt/aes-crypto.ts","src/crypt/fast-aes-key.ts","src/utils/typed-array.ts","src/crypt/aes-decryptor.ts","src/utils/logger.ts","src/polyfills/number.ts","node_modules/url-toolkit/src/url-toolkit.js","src/loader/fragment.ts","src/demux/id3.ts","src/utils/hex.ts","src/utils/mp4-tools.ts","src/crypt/decrypter.ts","src/types/demuxer.ts","src/demux/dummy-demuxed-track.ts","src/demux/audio/base-audio-demuxer.ts","src/demux/audio/adts.ts","src/demux/audio/mpegaudio.ts","src/demux/audio/aacdemuxer.ts","src/demux/mp4demuxer.ts","src/demux/audio/dolby.ts","src/demux/audio/ac3-demuxer.ts","src/demux/video/base-video-parser.ts","src/demux/video/exp-golomb.ts","src/demux/video/avc-video-parser.ts","src/demux/video/hevc-video-parser.ts","src/demux/sample-aes.ts","src/demux/tsdemuxer.ts","src/demux/audio/mp3demuxer.ts","src/remux/aac-helper.ts","src/remux/mp4-generator.ts","src/types/loader.ts","src/utils/timescale-conversion.ts","src/remux/mp4-remuxer.ts","src/utils/mediasource-helper.ts","src/utils/codecs.ts","src/remux/passthrough-remuxer.ts","src/utils/global.ts","src/demux/transmuxer.ts","src/utils/encryption-methods-util.ts","node_modules/eventemitter3/index.js","src/demux/transmuxer-worker.ts"],"sourcesContent":["import {\n  ManifestLoadedData,\n  ManifestLoadingData,\n  MediaAttachedData,\n  MediaAttachingData,\n  MediaEndedData,\n  LevelLoadingData,\n  LevelLoadedData,\n  ManifestParsedData,\n  LevelUpdatedData,\n  LevelsUpdatedData,\n  FragParsingUserdataData,\n  FragDecryptedData,\n  FragLoadedData,\n  InitPTSFoundData,\n  CuesParsedData,\n  SubtitleFragProcessedData,\n  NonNativeTextTracksData,\n  FragLoadingData,\n  AudioTrackLoadedData,\n  SubtitleTrackLoadedData,\n  ErrorData,\n  AudioTrackSwitchingData,\n  AudioTrackSwitchedData,\n  KeyLoadedData,\n  KeyLoadingData,\n  SubtitleTrackSwitchData,\n  SubtitleTracksUpdatedData,\n  LevelSwitchedData,\n  FragChangedData,\n  BufferAppendingData,\n  BufferCodecsData,\n  FragParsingMetadataData,\n  FragParsingInitSegmentData,\n  FragBufferedData,\n  BufferFlushingData,\n  BufferEOSData,\n  LevelSwitchingData,\n  MaxAutoLevelUpdatedData,\n  FPSDropLevelCappingData,\n  FPSDropData,\n  BufferCreatedData,\n  BufferAppendedData,\n  LevelPTSUpdatedData,\n  FragParsedData,\n  AudioTracksUpdatedData,\n  FragLoadEmergencyAbortedData,\n  BackBufferData,\n  LiveBackBufferData,\n  TrackLoadingData,\n  BufferFlushedData,\n  SteeringManifestLoadedData,\n} from './types/events';\n\nexport enum Events {\n  // Fired before MediaSource is attaching to media element\n  MEDIA_ATTACHING = 'hlsMediaAttaching',\n  // Fired when MediaSource has been successfully attached to media element\n  MEDIA_ATTACHED = 'hlsMediaAttached',\n  // Fired before detaching MediaSource from media element\n  MEDIA_DETACHING = 'hlsMediaDetaching',\n  // Fired when MediaSource has been detached from media element\n  MEDIA_DETACHED = 'hlsMediaDetached',\n  // Fired when HTMLMediaElement dispatches \"ended\" event, or stalls at end of VOD program\n  MEDIA_ENDED = 'hlsMediaEnded',\n  // Fired when the buffer is going to be reset\n  BUFFER_RESET = 'hlsBufferReset',\n  // Fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n  BUFFER_CODECS = 'hlsBufferCodecs',\n  // fired when sourcebuffers have been created - data: { tracks : tracks }\n  BUFFER_CREATED = 'hlsBufferCreated',\n  // fired when we append a segment to the buffer - data: { segment: segment object }\n  BUFFER_APPENDING = 'hlsBufferAppending',\n  // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}\n  BUFFER_APPENDED = 'hlsBufferAppended',\n  // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }\n  BUFFER_EOS = 'hlsBufferEos',\n  // fired when the media buffer should be flushed - data { startOffset, endOffset }\n  BUFFER_FLUSHING = 'hlsBufferFlushing',\n  // fired when the media buffer has been flushed - data: { }\n  BUFFER_FLUSHED = 'hlsBufferFlushed',\n  // fired to signal that a manifest loading starts - data: { url : manifestURL}\n  MANIFEST_LOADING = 'hlsManifestLoading',\n  // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks ], url : manifestURL, stats : LoaderStats }\n  MANIFEST_LOADED = 'hlsManifestLoaded',\n  // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}\n  MANIFEST_PARSED = 'hlsManifestParsed',\n  // fired when a level switch is requested - data: { level : id of new level }\n  LEVEL_SWITCHING = 'hlsLevelSwitching',\n  // fired when a level switch is effective - data: { level : id of new level }\n  LEVEL_SWITCHED = 'hlsLevelSwitched',\n  // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}\n  LEVEL_LOADING = 'hlsLevelLoading',\n  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : LoaderStats }\n  LEVEL_LOADED = 'hlsLevelLoaded',\n  // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }\n  LEVEL_UPDATED = 'hlsLevelUpdated',\n  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n  LEVEL_PTS_UPDATED = 'hlsLevelPtsUpdated',\n  // fired to notify that levels have changed after removing a level - data: { levels : [available quality levels] }\n  LEVELS_UPDATED = 'hlsLevelsUpdated',\n  // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }\n  AUDIO_TRACKS_UPDATED = 'hlsAudioTracksUpdated',\n  // fired when an audio track switching is requested - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHING = 'hlsAudioTrackSwitching',\n  // fired when an audio track switch actually occurs - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHED = 'hlsAudioTrackSwitched',\n  // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }\n  AUDIO_TRACK_LOADING = 'hlsAudioTrackLoading',\n  // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : LoaderStats }\n  AUDIO_TRACK_LOADED = 'hlsAudioTrackLoaded',\n  // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }\n  SUBTITLE_TRACKS_UPDATED = 'hlsSubtitleTracksUpdated',\n  // fired to notify that subtitle tracks were cleared as a result of stopping the media\n  SUBTITLE_TRACKS_CLEARED = 'hlsSubtitleTracksCleared',\n  // fired when an subtitle track switch occurs - data: { id : subtitle track id }\n  SUBTITLE_TRACK_SWITCH = 'hlsSubtitleTrackSwitch',\n  // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }\n  SUBTITLE_TRACK_LOADING = 'hlsSubtitleTrackLoading',\n  // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : LoaderStats }\n  SUBTITLE_TRACK_LOADED = 'hlsSubtitleTrackLoaded',\n  // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }\n  SUBTITLE_FRAG_PROCESSED = 'hlsSubtitleFragProcessed',\n  // fired when a set of VTTCues to be managed externally has been parsed - data: { type: string, track: string, cues: [ VTTCue ] }\n  CUES_PARSED = 'hlsCuesParsed',\n  // fired when a text track to be managed externally is found - data: { tracks: [ { label: string, kind: string, default: boolean } ] }\n  NON_NATIVE_TEXT_TRACKS_FOUND = 'hlsNonNativeTextTracksFound',\n  // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, timescale: timescale, frag : fragment object }\n  INIT_PTS_FOUND = 'hlsInitPtsFound',\n  // fired when a fragment loading starts - data: { frag : fragment object }\n  FRAG_LOADING = 'hlsFragLoading',\n  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }\n  // FRAG_LOAD_PROGRESS = 'hlsFragLoadProgress',\n  // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }\n  FRAG_LOAD_EMERGENCY_ABORTED = 'hlsFragLoadEmergencyAborted',\n  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : LoaderStats }\n  FRAG_LOADED = 'hlsFragLoaded',\n  // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }\n  FRAG_DECRYPTED = 'hlsFragDecrypted',\n  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }\n  FRAG_PARSING_INIT_SEGMENT = 'hlsFragParsingInitSegment',\n  // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }\n  FRAG_PARSING_USERDATA = 'hlsFragParsingUserdata',\n  // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }\n  FRAG_PARSING_METADATA = 'hlsFragParsingMetadata',\n  // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n  // FRAG_PARSING_DATA = 'hlsFragParsingData',\n  // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }\n  FRAG_PARSED = 'hlsFragParsed',\n  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : LoaderStats }\n  FRAG_BUFFERED = 'hlsFragBuffered',\n  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }\n  FRAG_CHANGED = 'hlsFragChanged',\n  // Identifier for a FPS drop event - data: { currentDropped, currentDecoded, totalDroppedFrames }\n  FPS_DROP = 'hlsFpsDrop',\n  // triggered when FPS drop triggers auto level capping - data: { level, droppedLevel }\n  FPS_DROP_LEVEL_CAPPING = 'hlsFpsDropLevelCapping',\n  // triggered when maxAutoLevel changes - data { autoLevelCapping, levels, maxAutoLevel, minAutoLevel, maxHdcpLevel }\n  MAX_AUTO_LEVEL_UPDATED = 'hlsMaxAutoLevelUpdated',\n  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }\n  ERROR = 'hlsError',\n  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }\n  DESTROYING = 'hlsDestroying',\n  // fired when a decrypt key loading starts - data: { frag : fragment object }\n  KEY_LOADING = 'hlsKeyLoading',\n  // fired when a decrypt key loading is completed - data: { frag : fragment object, keyInfo : KeyLoaderInfo }\n  KEY_LOADED = 'hlsKeyLoaded',\n  // deprecated; please use BACK_BUFFER_REACHED - data : { bufferEnd: number }\n  LIVE_BACK_BUFFER_REACHED = 'hlsLiveBackBufferReached',\n  // fired when the back buffer is reached as defined by the backBufferLength config option - data : { bufferEnd: number }\n  BACK_BUFFER_REACHED = 'hlsBackBufferReached',\n  // fired after steering manifest has been loaded - data: { steeringManifest: SteeringManifest object, url: steering manifest URL }\n  STEERING_MANIFEST_LOADED = 'hlsSteeringManifestLoaded',\n}\n\n/**\n * Defines each Event type and payload by Event name. Used in {@link hls.js#HlsEventEmitter} to strongly type the event listener API.\n */\nexport interface HlsListeners {\n  [Events.MEDIA_ATTACHING]: (\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ) => void;\n  [Events.MEDIA_ATTACHED]: (\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) => void;\n  [Events.MEDIA_DETACHING]: (event: Events.MEDIA_DETACHING) => void;\n  [Events.MEDIA_DETACHED]: (event: Events.MEDIA_DETACHED) => void;\n  [Events.MEDIA_ENDED]: (\n    event: Events.MEDIA_ENDED,\n    data: MediaEndedData,\n  ) => void;\n  [Events.BUFFER_RESET]: (event: Events.BUFFER_RESET) => void;\n  [Events.BUFFER_CODECS]: (\n    event: Events.BUFFER_CODECS,\n    data: BufferCodecsData,\n  ) => void;\n  [Events.BUFFER_CREATED]: (\n    event: Events.BUFFER_CREATED,\n    data: BufferCreatedData,\n  ) => void;\n  [Events.BUFFER_APPENDING]: (\n    event: Events.BUFFER_APPENDING,\n    data: BufferAppendingData,\n  ) => void;\n  [Events.BUFFER_APPENDED]: (\n    event: Events.BUFFER_APPENDED,\n    data: BufferAppendedData,\n  ) => void;\n  [Events.BUFFER_EOS]: (event: Events.BUFFER_EOS, data: BufferEOSData) => void;\n  [Events.BUFFER_FLUSHING]: (\n    event: Events.BUFFER_FLUSHING,\n    data: BufferFlushingData,\n  ) => void;\n  [Events.BUFFER_FLUSHED]: (\n    event: Events.BUFFER_FLUSHED,\n    data: BufferFlushedData,\n  ) => void;\n  [Events.MANIFEST_LOADING]: (\n    event: Events.MANIFEST_LOADING,\n    data: ManifestLoadingData,\n  ) => void;\n  [Events.MANIFEST_LOADED]: (\n    event: Events.MANIFEST_LOADED,\n    data: ManifestLoadedData,\n  ) => void;\n  [Events.MANIFEST_PARSED]: (\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ) => void;\n  [Events.LEVEL_SWITCHING]: (\n    event: Events.LEVEL_SWITCHING,\n    data: LevelSwitchingData,\n  ) => void;\n  [Events.LEVEL_SWITCHED]: (\n    event: Events.LEVEL_SWITCHED,\n    data: LevelSwitchedData,\n  ) => void;\n  [Events.LEVEL_LOADING]: (\n    event: Events.LEVEL_LOADING,\n    data: LevelLoadingData,\n  ) => void;\n  [Events.LEVEL_LOADED]: (\n    event: Events.LEVEL_LOADED,\n    data: LevelLoadedData,\n  ) => void;\n  [Events.LEVEL_UPDATED]: (\n    event: Events.LEVEL_UPDATED,\n    data: LevelUpdatedData,\n  ) => void;\n  [Events.LEVEL_PTS_UPDATED]: (\n    event: Events.LEVEL_PTS_UPDATED,\n    data: LevelPTSUpdatedData,\n  ) => void;\n  [Events.LEVELS_UPDATED]: (\n    event: Events.LEVELS_UPDATED,\n    data: LevelsUpdatedData,\n  ) => void;\n  [Events.AUDIO_TRACKS_UPDATED]: (\n    event: Events.AUDIO_TRACKS_UPDATED,\n    data: AudioTracksUpdatedData,\n  ) => void;\n  [Events.AUDIO_TRACK_SWITCHING]: (\n    event: Events.AUDIO_TRACK_SWITCHING,\n    data: AudioTrackSwitchingData,\n  ) => void;\n  [Events.AUDIO_TRACK_SWITCHED]: (\n    event: Events.AUDIO_TRACK_SWITCHED,\n    data: AudioTrackSwitchedData,\n  ) => void;\n  [Events.AUDIO_TRACK_LOADING]: (\n    event: Events.AUDIO_TRACK_LOADING,\n    data: TrackLoadingData,\n  ) => void;\n  [Events.AUDIO_TRACK_LOADED]: (\n    event: Events.AUDIO_TRACK_LOADED,\n    data: AudioTrackLoadedData,\n  ) => void;\n  [Events.SUBTITLE_TRACKS_UPDATED]: (\n    event: Events.SUBTITLE_TRACKS_UPDATED,\n    data: SubtitleTracksUpdatedData,\n  ) => void;\n  [Events.SUBTITLE_TRACKS_CLEARED]: (\n    event: Events.SUBTITLE_TRACKS_CLEARED,\n  ) => void;\n  [Events.SUBTITLE_TRACK_SWITCH]: (\n    event: Events.SUBTITLE_TRACK_SWITCH,\n    data: SubtitleTrackSwitchData,\n  ) => void;\n  [Events.SUBTITLE_TRACK_LOADING]: (\n    event: Events.SUBTITLE_TRACK_LOADING,\n    data: TrackLoadingData,\n  ) => void;\n  [Events.SUBTITLE_TRACK_LOADED]: (\n    event: Events.SUBTITLE_TRACK_LOADED,\n    data: SubtitleTrackLoadedData,\n  ) => void;\n  [Events.SUBTITLE_FRAG_PROCESSED]: (\n    event: Events.SUBTITLE_FRAG_PROCESSED,\n    data: SubtitleFragProcessedData,\n  ) => void;\n  [Events.CUES_PARSED]: (\n    event: Events.CUES_PARSED,\n    data: CuesParsedData,\n  ) => void;\n  [Events.NON_NATIVE_TEXT_TRACKS_FOUND]: (\n    event: Events.NON_NATIVE_TEXT_TRACKS_FOUND,\n    data: NonNativeTextTracksData,\n  ) => void;\n  [Events.INIT_PTS_FOUND]: (\n    event: Events.INIT_PTS_FOUND,\n    data: InitPTSFoundData,\n  ) => void;\n  [Events.FRAG_LOADING]: (\n    event: Events.FRAG_LOADING,\n    data: FragLoadingData,\n  ) => void;\n  // [Events.FRAG_LOAD_PROGRESS]: TodoEventType\n  [Events.FRAG_LOAD_EMERGENCY_ABORTED]: (\n    event: Events.FRAG_LOAD_EMERGENCY_ABORTED,\n    data: FragLoadEmergencyAbortedData,\n  ) => void;\n  [Events.FRAG_LOADED]: (\n    event: Events.FRAG_LOADED,\n    data: FragLoadedData,\n  ) => void;\n  [Events.FRAG_DECRYPTED]: (\n    event: Events.FRAG_DECRYPTED,\n    data: FragDecryptedData,\n  ) => void;\n  [Events.FRAG_PARSING_INIT_SEGMENT]: (\n    event: Events.FRAG_PARSING_INIT_SEGMENT,\n    data: FragParsingInitSegmentData,\n  ) => void;\n  [Events.FRAG_PARSING_USERDATA]: (\n    event: Events.FRAG_PARSING_USERDATA,\n    data: FragParsingUserdataData,\n  ) => void;\n  [Events.FRAG_PARSING_METADATA]: (\n    event: Events.FRAG_PARSING_METADATA,\n    data: FragParsingMetadataData,\n  ) => void;\n  // [Events.FRAG_PARSING_DATA]: TodoEventType\n  [Events.FRAG_PARSED]: (\n    event: Events.FRAG_PARSED,\n    data: FragParsedData,\n  ) => void;\n  [Events.FRAG_BUFFERED]: (\n    event: Events.FRAG_BUFFERED,\n    data: FragBufferedData,\n  ) => void;\n  [Events.FRAG_CHANGED]: (\n    event: Events.FRAG_CHANGED,\n    data: FragChangedData,\n  ) => void;\n  [Events.FPS_DROP]: (event: Events.FPS_DROP, data: FPSDropData) => void;\n  [Events.FPS_DROP_LEVEL_CAPPING]: (\n    event: Events.FPS_DROP_LEVEL_CAPPING,\n    data: FPSDropLevelCappingData,\n  ) => void;\n  [Events.MAX_AUTO_LEVEL_UPDATED]: (\n    event: Events.MAX_AUTO_LEVEL_UPDATED,\n    data: MaxAutoLevelUpdatedData,\n  ) => void;\n  [Events.ERROR]: (event: Events.ERROR, data: ErrorData) => void;\n  [Events.DESTROYING]: (event: Events.DESTROYING) => void;\n  [Events.KEY_LOADING]: (\n    event: Events.KEY_LOADING,\n    data: KeyLoadingData,\n  ) => void;\n  [Events.KEY_LOADED]: (event: Events.KEY_LOADED, data: KeyLoadedData) => void;\n  [Events.LIVE_BACK_BUFFER_REACHED]: (\n    event: Events.LIVE_BACK_BUFFER_REACHED,\n    data: LiveBackBufferData,\n  ) => void;\n  [Events.BACK_BUFFER_REACHED]: (\n    event: Events.BACK_BUFFER_REACHED,\n    data: BackBufferData,\n  ) => void;\n  [Events.STEERING_MANIFEST_LOADED]: (\n    event: Events.STEERING_MANIFEST_LOADED,\n    data: SteeringManifestLoadedData,\n  ) => void;\n}\nexport interface HlsEventEmitter {\n  on<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context,\n  ): void;\n  once<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context,\n  ): void;\n\n  removeAllListeners<E extends keyof HlsListeners>(event?: E): void;\n  off<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener?: HlsListeners[E],\n    context?: Context,\n    once?: boolean,\n  ): void;\n\n  listeners<E extends keyof HlsListeners>(event: E): HlsListeners[E][];\n  emit<E extends keyof HlsListeners>(\n    event: E,\n    name: E,\n    eventObject: Parameters<HlsListeners[E]>[1],\n  ): boolean;\n  listenerCount<E extends keyof HlsListeners>(event: E): number;\n}\n","export enum ErrorTypes {\n  // Identifier for a network error (loading error / timeout ...)\n  NETWORK_ERROR = 'networkError',\n  // Identifier for a media Error (video/parsing/mediasource error)\n  MEDIA_ERROR = 'mediaError',\n  // EME (encrypted media extensions) errors\n  KEY_SYSTEM_ERROR = 'keySystemError',\n  // Identifier for a mux Error (demuxing/remuxing)\n  MUX_ERROR = 'muxError',\n  // Identifier for all other errors\n  OTHER_ERROR = 'otherError',\n}\n\nexport enum ErrorDetails {\n  KEY_SYSTEM_NO_KEYS = 'keySystemNoKeys',\n  KEY_SYSTEM_NO_ACCESS = 'keySystemNoAccess',\n  KEY_SYSTEM_NO_SESSION = 'keySystemNoSession',\n  KEY_SYSTEM_NO_CONFIGURED_LICENSE = 'keySystemNoConfiguredLicense',\n  KEY_SYSTEM_LICENSE_REQUEST_FAILED = 'keySystemLicenseRequestFailed',\n  KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = 'keySystemServerCertificateRequestFailed',\n  KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = 'keySystemServerCertificateUpdateFailed',\n  KEY_SYSTEM_SESSION_UPDATE_FAILED = 'keySystemSessionUpdateFailed',\n  KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = 'keySystemStatusOutputRestricted',\n  KEY_SYSTEM_STATUS_INTERNAL_ERROR = 'keySystemStatusInternalError',\n  // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_ERROR = 'manifestLoadError',\n  // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_TIMEOUT = 'manifestLoadTimeOut',\n  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_PARSING_ERROR = 'manifestParsingError',\n  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_INCOMPATIBLE_CODECS_ERROR = 'manifestIncompatibleCodecsError',\n  // Identifier for a level which contains no fragments - data: { url: faulty URL, reason: \"no fragments found in level\", level: index of the bad level }\n  LEVEL_EMPTY_ERROR = 'levelEmptyError',\n  // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_ERROR = 'levelLoadError',\n  // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_TIMEOUT = 'levelLoadTimeOut',\n  // Identifier for a level parse error - data: { url : faulty URL, error: Error, reason: error message }\n  LEVEL_PARSING_ERROR = 'levelParsingError',\n  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n  LEVEL_SWITCH_ERROR = 'levelSwitchError',\n  // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_ERROR = 'audioTrackLoadError',\n  // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_TIMEOUT = 'audioTrackLoadTimeOut',\n  // Identifier for a subtitle track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  SUBTITLE_LOAD_ERROR = 'subtitleTrackLoadError',\n  // Identifier for a subtitle track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  SUBTITLE_TRACK_LOAD_TIMEOUT = 'subtitleTrackLoadTimeOut',\n  // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  FRAG_LOAD_ERROR = 'fragLoadError',\n  // Identifier for fragment load timeout error - data: { frag : fragment object}\n  FRAG_LOAD_TIMEOUT = 'fragLoadTimeOut',\n  // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n  FRAG_DECRYPT_ERROR = 'fragDecryptError',\n  // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n  // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n  FRAG_PARSING_ERROR = 'fragParsingError',\n  // Identifier for a fragment or part load skipped because of a GAP tag or attribute\n  FRAG_GAP = 'fragGap',\n  // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n  REMUX_ALLOC_ERROR = 'remuxAllocError',\n  // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  KEY_LOAD_ERROR = 'keyLoadError',\n  // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n  KEY_LOAD_TIMEOUT = 'keyLoadTimeOut',\n  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : { error : exception , mimeType : mimeType }\n  BUFFER_ADD_CODEC_ERROR = 'bufferAddCodecError',\n  // Triggered when source buffer(s) could not be created using level (manifest CODECS attribute), parsed media, or best guess codec(s) - data: { reason : error reason }\n  BUFFER_INCOMPATIBLE_CODECS_ERROR = 'bufferIncompatibleCodecsError',\n  // Identifier for a buffer append error - data: append error description\n  BUFFER_APPEND_ERROR = 'bufferAppendError',\n  // Identifier for a buffer appending error event - data: appending error description\n  BUFFER_APPENDING_ERROR = 'bufferAppendingError',\n  // Identifier for a buffer stalled error event\n  BUFFER_STALLED_ERROR = 'bufferStalledError',\n  // Identifier for a buffer full event\n  BUFFER_FULL_ERROR = 'bufferFullError',\n  // Identifier for a buffer seek over hole event\n  BUFFER_SEEK_OVER_HOLE = 'bufferSeekOverHole',\n  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n  BUFFER_NUDGE_ON_STALL = 'bufferNudgeOnStall',\n  // Identifier for an internal exception happening inside hls.js while handling an event\n  INTERNAL_EXCEPTION = 'internalException',\n  // Identifier for an internal call to abort a loader\n  INTERNAL_ABORTED = 'aborted',\n  // Uncategorized error\n  UNKNOWN = 'unknown',\n}\n","export const enum DecrypterAesMode {\n  cbc = 0,\n  ctr = 1,\n}\n","import { DecrypterAesMode } from './decrypter-aes-mode';\n\nexport default class AESCrypto {\n  private subtle: SubtleCrypto;\n  private aesIV: Uint8Array;\n  private aesMode: DecrypterAesMode;\n\n  constructor(subtle: SubtleCrypto, iv: Uint8Array, aesMode: DecrypterAesMode) {\n    this.subtle = subtle;\n    this.aesIV = iv;\n    this.aesMode = aesMode;\n  }\n\n  decrypt(data: ArrayBuffer, key: CryptoKey) {\n    switch (this.aesMode) {\n      case DecrypterAesMode.cbc:\n        return this.subtle.decrypt(\n          { name: 'AES-CBC', iv: this.aesIV },\n          key,\n          data,\n        );\n      case DecrypterAesMode.ctr:\n        return this.subtle.decrypt(\n          { name: 'AES-CTR', counter: this.aesIV, length: 64 }, //64 : NIST SP800-38A standard suggests that the counter should occupy half of the counter block\n          key,\n          data,\n        );\n      default:\n        throw new Error(`[AESCrypto] invalid aes mode ${this.aesMode}`);\n    }\n  }\n}\n","import { DecrypterAesMode } from './decrypter-aes-mode';\n\nexport default class FastAESKey {\n  private subtle: any;\n  private key: ArrayBuffer;\n  private aesMode: DecrypterAesMode;\n\n  constructor(subtle, key, aesMode: DecrypterAesMode) {\n    this.subtle = subtle;\n    this.key = key;\n    this.aesMode = aesMode;\n  }\n\n  expandKey() {\n    const subtleAlgoName = getSubtleAlgoName(this.aesMode);\n    return this.subtle.importKey(\n      'raw',\n      this.key,\n      { name: subtleAlgoName },\n      false,\n      ['encrypt', 'decrypt'],\n    );\n  }\n}\n\nfunction getSubtleAlgoName(aesMode: DecrypterAesMode) {\n  switch (aesMode) {\n    case DecrypterAesMode.cbc:\n      return 'AES-CBC';\n    case DecrypterAesMode.ctr:\n      return 'AES-CTR';\n    default:\n      throw new Error(`[FastAESKey] invalid aes mode ${aesMode}`);\n  }\n}\n","export function sliceUint8(\n  array: Uint8Array,\n  start?: number,\n  end?: number,\n): Uint8Array {\n  // @ts-expect-error This polyfills IE11 usage of Uint8Array slice.\n  // It always exists in the TypeScript definition so fails, but it fails at runtime on IE11.\n  return Uint8Array.prototype.slice\n    ? array.slice(start, end)\n    : new Uint8Array(Array.prototype.slice.call(array, start, end));\n}\n","import { sliceUint8 } from '../utils/typed-array';\n\n// PKCS7\nexport function removePadding(array: Uint8Array): Uint8Array {\n  const outputBytes = array.byteLength;\n  const paddingBytes =\n    outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);\n  if (paddingBytes) {\n    return sliceUint8(array, 0, outputBytes - paddingBytes);\n  }\n  return array;\n}\n\nexport default class AESDecryptor {\n  private rcon: Array<number> = [\n    0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,\n  ];\n  private subMix: Array<Uint32Array> = [\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n  ];\n  private invSubMix: Array<Uint32Array> = [\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n  ];\n  private sBox: Uint32Array = new Uint32Array(256);\n  private invSBox: Uint32Array = new Uint32Array(256);\n  private key: Uint32Array = new Uint32Array(0);\n\n  private ksRows: number = 0;\n  private keySize: number = 0;\n  private keySchedule!: Uint32Array;\n  private invKeySchedule!: Uint32Array;\n\n  constructor() {\n    this.initTable();\n  }\n\n  // Using view.getUint32() also swaps the byte order.\n  uint8ArrayToUint32Array_(arrayBuffer) {\n    const view = new DataView(arrayBuffer);\n    const newArray = new Uint32Array(4);\n    for (let i = 0; i < 4; i++) {\n      newArray[i] = view.getUint32(i * 4);\n    }\n\n    return newArray;\n  }\n\n  initTable() {\n    const sBox = this.sBox;\n    const invSBox = this.invSBox;\n    const subMix = this.subMix;\n    const subMix0 = subMix[0];\n    const subMix1 = subMix[1];\n    const subMix2 = subMix[2];\n    const subMix3 = subMix[3];\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    const d = new Uint32Array(256);\n    let x = 0;\n    let xi = 0;\n    let i = 0;\n    for (i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = (i << 1) ^ 0x11b;\n      }\n    }\n\n    for (i = 0; i < 256; i++) {\n      let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n      sBox[x] = sx;\n      invSBox[sx] = x;\n\n      // Compute multiplication\n      const x2 = d[x];\n      const x4 = d[x2];\n      const x8 = d[x4];\n\n      // Compute sub/invSub bytes, mix columns tables\n      let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n      subMix0[x] = (t << 24) | (t >>> 8);\n      subMix1[x] = (t << 16) | (t >>> 16);\n      subMix2[x] = (t << 8) | (t >>> 24);\n      subMix3[x] = t;\n\n      // Compute inv sub bytes, inv mix columns tables\n      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n      invSubMix0[sx] = (t << 24) | (t >>> 8);\n      invSubMix1[sx] = (t << 16) | (t >>> 16);\n      invSubMix2[sx] = (t << 8) | (t >>> 24);\n      invSubMix3[sx] = t;\n\n      // Compute next counter\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  }\n\n  expandKey(keyBuffer: ArrayBuffer) {\n    // convert keyBuffer to Uint32Array\n    const key = this.uint8ArrayToUint32Array_(keyBuffer);\n    let sameKey = true;\n    let offset = 0;\n\n    while (offset < key.length && sameKey) {\n      sameKey = key[offset] === this.key[offset];\n      offset++;\n    }\n\n    if (sameKey) {\n      return;\n    }\n\n    this.key = key;\n    const keySize = (this.keySize = key.length);\n\n    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n      throw new Error('Invalid aes key size=' + keySize);\n    }\n\n    const ksRows = (this.ksRows = (keySize + 6 + 1) * 4);\n    let ksRow;\n    let invKsRow;\n\n    const keySchedule = (this.keySchedule = new Uint32Array(ksRows));\n    const invKeySchedule = (this.invKeySchedule = new Uint32Array(ksRows));\n    const sbox = this.sBox;\n    const rcon = this.rcon;\n\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    let prev;\n    let t;\n\n    for (ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        prev = keySchedule[ksRow] = key[ksRow];\n        continue;\n      }\n      t = prev;\n\n      if (ksRow % keySize === 0) {\n        // Rot word\n        t = (t << 8) | (t >>> 24);\n\n        // Sub word\n        t =\n          (sbox[t >>> 24] << 24) |\n          (sbox[(t >>> 16) & 0xff] << 16) |\n          (sbox[(t >>> 8) & 0xff] << 8) |\n          sbox[t & 0xff];\n\n        // Mix Rcon\n        t ^= rcon[(ksRow / keySize) | 0] << 24;\n      } else if (keySize > 6 && ksRow % keySize === 4) {\n        // Sub word\n        t =\n          (sbox[t >>> 24] << 24) |\n          (sbox[(t >>> 16) & 0xff] << 16) |\n          (sbox[(t >>> 8) & 0xff] << 8) |\n          sbox[t & 0xff];\n      }\n\n      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n    }\n\n    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      ksRow = ksRows - invKsRow;\n      if (invKsRow & 3) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] =\n          invSubMix0[sbox[t >>> 24]] ^\n          invSubMix1[sbox[(t >>> 16) & 0xff]] ^\n          invSubMix2[sbox[(t >>> 8) & 0xff]] ^\n          invSubMix3[sbox[t & 0xff]];\n      }\n\n      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n    }\n  }\n\n  // Adding this as a method greatly improves performance.\n  networkToHostOrderSwap(word) {\n    return (\n      (word << 24) |\n      ((word & 0xff00) << 8) |\n      ((word & 0xff0000) >> 8) |\n      (word >>> 24)\n    );\n  }\n\n  decrypt(inputArrayBuffer: ArrayBuffer, offset: number, aesIV: ArrayBuffer) {\n    const nRounds = this.keySize + 6;\n    const invKeySchedule = this.invKeySchedule;\n    const invSBOX = this.invSBox;\n\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    const initVector = this.uint8ArrayToUint32Array_(aesIV);\n    let initVector0 = initVector[0];\n    let initVector1 = initVector[1];\n    let initVector2 = initVector[2];\n    let initVector3 = initVector[3];\n\n    const inputInt32 = new Int32Array(inputArrayBuffer);\n    const outputInt32 = new Int32Array(inputInt32.length);\n\n    let t0, t1, t2, t3;\n    let s0, s1, s2, s3;\n    let inputWords0, inputWords1, inputWords2, inputWords3;\n\n    let ksRow, i;\n    const swapWord = this.networkToHostOrderSwap;\n\n    while (offset < inputInt32.length) {\n      inputWords0 = swapWord(inputInt32[offset]);\n      inputWords1 = swapWord(inputInt32[offset + 1]);\n      inputWords2 = swapWord(inputInt32[offset + 2]);\n      inputWords3 = swapWord(inputInt32[offset + 3]);\n\n      s0 = inputWords0 ^ invKeySchedule[0];\n      s1 = inputWords3 ^ invKeySchedule[1];\n      s2 = inputWords2 ^ invKeySchedule[2];\n      s3 = inputWords1 ^ invKeySchedule[3];\n\n      ksRow = 4;\n\n      // Iterate through the rounds of decryption\n      for (i = 1; i < nRounds; i++) {\n        t0 =\n          invSubMix0[s0 >>> 24] ^\n          invSubMix1[(s1 >> 16) & 0xff] ^\n          invSubMix2[(s2 >> 8) & 0xff] ^\n          invSubMix3[s3 & 0xff] ^\n          invKeySchedule[ksRow];\n        t1 =\n          invSubMix0[s1 >>> 24] ^\n          invSubMix1[(s2 >> 16) & 0xff] ^\n          invSubMix2[(s3 >> 8) & 0xff] ^\n          invSubMix3[s0 & 0xff] ^\n          invKeySchedule[ksRow + 1];\n        t2 =\n          invSubMix0[s2 >>> 24] ^\n          invSubMix1[(s3 >> 16) & 0xff] ^\n          invSubMix2[(s0 >> 8) & 0xff] ^\n          invSubMix3[s1 & 0xff] ^\n          invKeySchedule[ksRow + 2];\n        t3 =\n          invSubMix0[s3 >>> 24] ^\n          invSubMix1[(s0 >> 16) & 0xff] ^\n          invSubMix2[(s1 >> 8) & 0xff] ^\n          invSubMix3[s2 & 0xff] ^\n          invKeySchedule[ksRow + 3];\n        // Update state\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n\n        ksRow = ksRow + 4;\n      }\n\n      // Shift rows, sub bytes, add round key\n      t0 =\n        (invSBOX[s0 >>> 24] << 24) ^\n        (invSBOX[(s1 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s2 >> 8) & 0xff] << 8) ^\n        invSBOX[s3 & 0xff] ^\n        invKeySchedule[ksRow];\n      t1 =\n        (invSBOX[s1 >>> 24] << 24) ^\n        (invSBOX[(s2 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s3 >> 8) & 0xff] << 8) ^\n        invSBOX[s0 & 0xff] ^\n        invKeySchedule[ksRow + 1];\n      t2 =\n        (invSBOX[s2 >>> 24] << 24) ^\n        (invSBOX[(s3 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s0 >> 8) & 0xff] << 8) ^\n        invSBOX[s1 & 0xff] ^\n        invKeySchedule[ksRow + 2];\n      t3 =\n        (invSBOX[s3 >>> 24] << 24) ^\n        (invSBOX[(s0 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s1 >> 8) & 0xff] << 8) ^\n        invSBOX[s2 & 0xff] ^\n        invKeySchedule[ksRow + 3];\n\n      // Write\n      outputInt32[offset] = swapWord(t0 ^ initVector0);\n      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n      outputInt32[offset + 3] = swapWord(t1 ^ initVector3);\n\n      // reset initVector to last 4 unsigned int\n      initVector0 = inputWords0;\n      initVector1 = inputWords1;\n      initVector2 = inputWords2;\n      initVector3 = inputWords3;\n\n      offset = offset + 4;\n    }\n\n    return outputInt32.buffer;\n  }\n}\n","export interface ILogFunction {\n  (message?: any, ...optionalParams: any[]): void;\n}\n\nexport interface ILogger {\n  trace: ILogFunction;\n  debug: ILogFunction;\n  log: ILogFunction;\n  warn: ILogFunction;\n  info: ILogFunction;\n  error: ILogFunction;\n}\n\nexport class Logger implements ILogger {\n  trace: ILogFunction;\n  debug: ILogFunction;\n  log: ILogFunction;\n  warn: ILogFunction;\n  info: ILogFunction;\n  error: ILogFunction;\n\n  constructor(label: string, logger: ILogger) {\n    const lb = `[${label}]:`;\n    this.trace = noop;\n    this.debug = logger.debug.bind(null, lb);\n    this.log = logger.log.bind(null, lb);\n    this.warn = logger.warn.bind(null, lb);\n    this.info = logger.info.bind(null, lb);\n    this.error = logger.error.bind(null, lb);\n  }\n}\n\nconst noop: ILogFunction = function () {};\n\nconst fakeLogger: ILogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop,\n};\n\nfunction createLogger() {\n  return Object.assign({}, fakeLogger);\n}\n\n// let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction consolePrintFn(type: string, id: string | undefined): ILogFunction {\n  const func: ILogFunction = self.console[type];\n  return func\n    ? func.bind(self.console, `${id ? '[' + id + '] ' : ''}[${type}] >`)\n    : noop;\n}\n\nfunction getLoggerFn(\n  key: string,\n  debugConfig: boolean | Partial<ILogger>,\n  id: string | undefined,\n): ILogFunction {\n  return debugConfig[key]\n    ? debugConfig[key].bind(debugConfig)\n    : consolePrintFn(key, id);\n}\n\nlet exportedLogger: ILogger = createLogger();\n\nexport function enableLogs(\n  debugConfig: boolean | ILogger,\n  context: string,\n  id?: string | undefined,\n): ILogger {\n  // check that console is available\n  const newLogger = createLogger();\n  if (\n    (typeof console === 'object' && debugConfig === true) ||\n    typeof debugConfig === 'object'\n  ) {\n    const keys: (keyof ILogger)[] = [\n      // Remove out from list here to hard-disable a log-level\n      // 'trace',\n      'debug',\n      'log',\n      'info',\n      'warn',\n      'error',\n    ];\n    keys.forEach((key) => {\n      newLogger[key] = getLoggerFn(key, debugConfig, id);\n    });\n    // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n    try {\n      newLogger.log(\n        `Debug logs enabled for \"${context}\" in hls.js version ${__VERSION__}`,\n      );\n    } catch (e) {\n      /* log fn threw an exception. All logger methods are no-ops. */\n      return createLogger();\n    }\n  }\n  exportedLogger = newLogger;\n  return newLogger;\n}\n\nexport const logger: ILogger = exportedLogger;\n","// https://caniuse.com/mdn-javascript_builtins_number_isfinite\nexport const isFiniteNumber =\n  Number.isFinite ||\n  function (value) {\n    return typeof value === 'number' && isFinite(value);\n  };\n\n// https://caniuse.com/mdn-javascript_builtins_number_issafeinteger\nexport const isSafeInteger =\n  Number.isSafeInteger ||\n  function (value) {\n    return typeof value === 'number' && Math.abs(value) <= MAX_SAFE_INTEGER;\n  };\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n","// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX =\n    /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n","import { buildAbsoluteURL } from 'url-toolkit';\nimport { LevelKey } from './level-key';\nimport { LoadStats } from './load-stats';\nimport { AttrList } from '../utils/attr-list';\nimport type {\n  FragmentLoaderContext,\n  KeyLoaderContext,\n  Loader,\n  PlaylistLevelType,\n} from '../types/loader';\nimport type { KeySystemFormats } from '../utils/mediakeys-helper';\n\nexport const enum ElementaryStreamTypes {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n  AUDIOVIDEO = 'audiovideo',\n}\n\nexport interface ElementaryStreamInfo {\n  startPTS: number;\n  endPTS: number;\n  startDTS: number;\n  endDTS: number;\n  partial?: boolean;\n}\n\nexport type ElementaryStreams = Record<\n  ElementaryStreamTypes,\n  ElementaryStreamInfo | null\n>;\n\nexport class BaseSegment {\n  private _byteRange: [number, number] | null = null;\n  private _url: string | null = null;\n\n  // baseurl is the URL to the playlist\n  public readonly baseurl: string;\n  // relurl is the portion of the URL that comes from inside the playlist.\n  public relurl?: string;\n  // Holds the types of data this fragment supports\n  public elementaryStreams: ElementaryStreams = {\n    [ElementaryStreamTypes.AUDIO]: null,\n    [ElementaryStreamTypes.VIDEO]: null,\n    [ElementaryStreamTypes.AUDIOVIDEO]: null,\n  };\n\n  constructor(baseurl: string) {\n    this.baseurl = baseurl;\n  }\n\n  // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n  setByteRange(value: string, previous?: BaseSegment) {\n    const params = value.split('@', 2);\n    let start: number;\n    if (params.length === 1) {\n      start = previous?.byteRangeEndOffset || 0;\n    } else {\n      start = parseInt(params[1]);\n    }\n    this._byteRange = [start, parseInt(params[0]) + start];\n  }\n\n  get byteRange(): [number, number] | [] {\n    if (!this._byteRange) {\n      return [];\n    }\n\n    return this._byteRange;\n  }\n\n  get byteRangeStartOffset(): number | undefined {\n    return this.byteRange[0];\n  }\n\n  get byteRangeEndOffset(): number | undefined {\n    return this.byteRange[1];\n  }\n\n  get url(): string {\n    if (!this._url && this.baseurl && this.relurl) {\n      this._url = buildAbsoluteURL(this.baseurl, this.relurl, {\n        alwaysNormalize: true,\n      });\n    }\n    return this._url || '';\n  }\n\n  set url(value: string) {\n    this._url = value;\n  }\n}\n\n/**\n * Object representing parsed data from an HLS Segment. Found in {@link hls.js#LevelDetails.fragments}.\n */\nexport class Fragment extends BaseSegment {\n  private _decryptdata: LevelKey | null = null;\n\n  public rawProgramDateTime: string | null = null;\n  public programDateTime: number | null = null;\n  public tagList: Array<string[]> = [];\n\n  // EXTINF has to be present for a m3u8 to be considered valid\n  public duration: number = 0;\n  // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'\n  public sn: number | 'initSegment' = 0;\n  // levelkeys are the EXT-X-KEY tags that apply to this segment for decryption\n  // core difference from the private field _decryptdata is the lack of the initialized IV\n  // _decryptdata will set the IV for this segment based on the segment number in the fragment\n  public levelkeys?: { [key: string]: LevelKey };\n  // A string representing the fragment type\n  public readonly type: PlaylistLevelType;\n  // A reference to the loader. Set while the fragment is loading, and removed afterwards. Used to abort fragment loading\n  public loader: Loader<FragmentLoaderContext> | null = null;\n  // A reference to the key loader. Set while the key is loading, and removed afterwards. Used to abort key loading\n  public keyLoader: Loader<KeyLoaderContext> | null = null;\n  // The level/track index to which the fragment belongs\n  public level: number = -1;\n  // The continuity counter of the fragment\n  public cc: number = 0;\n  // The starting Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  public startPTS?: number;\n  // The ending Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  public endPTS?: number;\n  // The starting Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  public startDTS!: number;\n  // The ending Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  public endDTS!: number;\n  // The start time of the fragment, as listed in the manifest. Updated after transmux complete.\n  public start: number = 0;\n  // Set by `updateFragPTSDTS` in level-helper\n  public deltaPTS?: number;\n  // The maximum starting Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  public maxStartPTS?: number;\n  // The minimum ending Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  public minEndPTS?: number;\n  // Load/parse timing information\n  public stats: LoadStats = new LoadStats();\n  // Init Segment bytes (unset for media segments)\n  public data?: Uint8Array;\n  // A flag indicating whether the segment was downloaded in order to test bitrate, and was not buffered\n  public bitrateTest: boolean = false;\n  // #EXTINF  segment title\n  public title: string | null = null;\n  // The Media Initialization Section for this segment\n  public initSegment: Fragment | null = null;\n  // Fragment is the last fragment in the media playlist\n  public endList?: boolean;\n  // Fragment is marked by an EXT-X-GAP tag indicating that it does not contain media data and should not be loaded\n  public gap?: boolean;\n  // Deprecated\n  public urlId: number = 0;\n\n  constructor(type: PlaylistLevelType, baseurl: string) {\n    super(baseurl);\n    this.type = type;\n  }\n\n  get decryptdata(): LevelKey | null {\n    const { levelkeys } = this;\n    if (!levelkeys && !this._decryptdata) {\n      return null;\n    }\n\n    if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {\n      const key = this.levelkeys.identity;\n      if (key) {\n        this._decryptdata = key.getDecryptData(this.sn);\n      } else {\n        const keyFormats = Object.keys(this.levelkeys);\n        if (keyFormats.length === 1) {\n          return (this._decryptdata = this.levelkeys[\n            keyFormats[0]\n          ].getDecryptData(this.sn));\n        } else {\n          // Multiple keys. key-loader to call Fragment.setKeyFormat based on selected key-system.\n        }\n      }\n    }\n\n    return this._decryptdata;\n  }\n\n  get end(): number {\n    return this.start + this.duration;\n  }\n\n  get endProgramDateTime() {\n    if (this.programDateTime === null) {\n      return null;\n    }\n\n    if (!Number.isFinite(this.programDateTime)) {\n      return null;\n    }\n\n    const duration = !Number.isFinite(this.duration) ? 0 : this.duration;\n\n    return this.programDateTime + duration * 1000;\n  }\n\n  get encrypted() {\n    // At the m3u8-parser level we need to add support for manifest signalled keyformats\n    // when we want the fragment to start reporting that it is encrypted.\n    // Currently, keyFormat will only be set for identity keys\n    if (this._decryptdata?.encrypted) {\n      return true;\n    } else if (this.levelkeys) {\n      const keyFormats = Object.keys(this.levelkeys);\n      const len = keyFormats.length;\n      if (len > 1 || (len === 1 && this.levelkeys[keyFormats[0]].encrypted)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  setKeyFormat(keyFormat: KeySystemFormats) {\n    if (this.levelkeys) {\n      const key = this.levelkeys[keyFormat];\n      if (key && !this._decryptdata) {\n        this._decryptdata = key.getDecryptData(this.sn);\n      }\n    }\n  }\n\n  abortRequests(): void {\n    this.loader?.abort();\n    this.keyLoader?.abort();\n  }\n\n  setElementaryStreamInfo(\n    type: ElementaryStreamTypes,\n    startPTS: number,\n    endPTS: number,\n    startDTS: number,\n    endDTS: number,\n    partial: boolean = false,\n  ) {\n    const { elementaryStreams } = this;\n    const info = elementaryStreams[type];\n    if (!info) {\n      elementaryStreams[type] = {\n        startPTS,\n        endPTS,\n        startDTS,\n        endDTS,\n        partial,\n      };\n      return;\n    }\n\n    info.startPTS = Math.min(info.startPTS, startPTS);\n    info.endPTS = Math.max(info.endPTS, endPTS);\n    info.startDTS = Math.min(info.startDTS, startDTS);\n    info.endDTS = Math.max(info.endDTS, endDTS);\n  }\n\n  clearElementaryStreamInfo() {\n    const { elementaryStreams } = this;\n    elementaryStreams[ElementaryStreamTypes.AUDIO] = null;\n    elementaryStreams[ElementaryStreamTypes.VIDEO] = null;\n    elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;\n  }\n}\n\n/**\n * Object representing parsed data from an HLS Partial Segment. Found in {@link hls.js#LevelDetails.partList}.\n */\nexport class Part extends BaseSegment {\n  public readonly fragOffset: number = 0;\n  public readonly duration: number = 0;\n  public readonly gap: boolean = false;\n  public readonly independent: boolean = false;\n  public readonly relurl: string;\n  public readonly fragment: Fragment;\n  public readonly index: number;\n  public stats: LoadStats = new LoadStats();\n\n  constructor(\n    partAttrs: AttrList,\n    frag: Fragment,\n    baseurl: string,\n    index: number,\n    previous?: Part,\n  ) {\n    super(baseurl);\n    this.duration = partAttrs.decimalFloatingPoint('DURATION');\n    this.gap = partAttrs.bool('GAP');\n    this.independent = partAttrs.bool('INDEPENDENT');\n    this.relurl = partAttrs.enumeratedString('URI') as string;\n    this.fragment = frag;\n    this.index = index;\n    const byteRange = partAttrs.enumeratedString('BYTERANGE');\n    if (byteRange) {\n      this.setByteRange(byteRange, previous);\n    }\n    if (previous) {\n      this.fragOffset = previous.fragOffset + previous.duration;\n    }\n  }\n\n  get start(): number {\n    return this.fragment.start + this.fragOffset;\n  }\n\n  get end(): number {\n    return this.start + this.duration;\n  }\n\n  get loaded(): boolean {\n    const { elementaryStreams } = this;\n    return !!(\n      elementaryStreams.audio ||\n      elementaryStreams.video ||\n      elementaryStreams.audiovideo\n    );\n  }\n}\n","type RawFrame = { type: string; size: number; data: Uint8Array };\n\n// breaking up those two types in order to clarify what is happening in the decoding path.\ntype DecodedFrame<T> = { key: string; data: T; info?: any };\nexport type Frame = DecodedFrame<ArrayBuffer | string>;\n\n/**\n * Returns true if an ID3 header can be found at offset in data\n * @param data - The data to search\n * @param offset - The offset at which to start searching\n */\nexport const isHeader = (data: Uint8Array, offset: number): boolean => {\n  /*\n   * http://id3.org/id3v2.3.0\n   * [0]     = 'I'\n   * [1]     = 'D'\n   * [2]     = '3'\n   * [3,4]   = {Version}\n   * [5]     = {Flags}\n   * [6-9]   = {ID3 Size}\n   *\n   * An ID3v2 tag can be detected with the following pattern:\n   *  $49 44 33 yy yy xx zz zz zz zz\n   * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n   */\n  if (offset + 10 <= data.length) {\n    // look for 'ID3' identifier\n    if (\n      data[offset] === 0x49 &&\n      data[offset + 1] === 0x44 &&\n      data[offset + 2] === 0x33\n    ) {\n      // check version is within range\n      if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n        // check size is within range\n        if (\n          data[offset + 6] < 0x80 &&\n          data[offset + 7] < 0x80 &&\n          data[offset + 8] < 0x80 &&\n          data[offset + 9] < 0x80\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Returns true if an ID3 footer can be found at offset in data\n * @param data - The data to search\n * @param offset - The offset at which to start searching\n */\nexport const isFooter = (data: Uint8Array, offset: number): boolean => {\n  /*\n   * The footer is a copy of the header, but with a different identifier\n   */\n  if (offset + 10 <= data.length) {\n    // look for '3DI' identifier\n    if (\n      data[offset] === 0x33 &&\n      data[offset + 1] === 0x44 &&\n      data[offset + 2] === 0x49\n    ) {\n      // check version is within range\n      if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n        // check size is within range\n        if (\n          data[offset + 6] < 0x80 &&\n          data[offset + 7] < 0x80 &&\n          data[offset + 8] < 0x80 &&\n          data[offset + 9] < 0x80\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n * @param data - The data to search in\n * @param offset - The offset at which to start searching\n * @returns the block of data containing any ID3 tags found\n * or *undefined* if no header is found at the starting offset\n */\nexport const getID3Data = (\n  data: Uint8Array,\n  offset: number,\n): Uint8Array | undefined => {\n  const front = offset;\n  let length = 0;\n\n  while (isHeader(data, offset)) {\n    // ID3 header is 10 bytes\n    length += 10;\n\n    const size = readSize(data, offset + 6);\n    length += size;\n\n    if (isFooter(data, offset + 10)) {\n      // ID3 footer is 10 bytes\n      length += 10;\n    }\n\n    offset += length;\n  }\n\n  if (length > 0) {\n    return data.subarray(front, front + length);\n  }\n\n  return undefined;\n};\n\nconst readSize = (data: Uint8Array, offset: number): number => {\n  let size = 0;\n  size = (data[offset] & 0x7f) << 21;\n  size |= (data[offset + 1] & 0x7f) << 14;\n  size |= (data[offset + 2] & 0x7f) << 7;\n  size |= data[offset + 3] & 0x7f;\n  return size;\n};\n\nexport const canParse = (data: Uint8Array, offset: number): boolean => {\n  return (\n    isHeader(data, offset) &&\n    readSize(data, offset + 6) + 10 <= data.length - offset\n  );\n};\n\n/**\n * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n * @param data - Block of data containing one or more ID3 tags\n */\nexport const getTimeStamp = (data: Uint8Array): number | undefined => {\n  const frames: Frame[] = getID3Frames(data);\n\n  for (let i = 0; i < frames.length; i++) {\n    const frame = frames[i];\n\n    if (isTimeStampFrame(frame)) {\n      return readTimeStamp(frame as DecodedFrame<ArrayBuffer>);\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n */\nexport const isTimeStampFrame = (frame: Frame): boolean => {\n  return (\n    frame &&\n    frame.key === 'PRIV' &&\n    frame.info === 'com.apple.streaming.transportStreamTimestamp'\n  );\n};\n\nconst getFrameData = (data: Uint8Array): RawFrame => {\n  /*\n  Frame ID       $xx xx xx xx (four characters)\n  Size           $xx xx xx xx\n  Flags          $xx xx\n  */\n  const type: string = String.fromCharCode(data[0], data[1], data[2], data[3]);\n  const size: number = readSize(data, 4);\n\n  // skip frame id, size, and flags\n  const offset = 10;\n\n  return { type, size, data: data.subarray(offset, offset + size) };\n};\n\n/**\n * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n * @param id3Data - The ID3 data containing one or more ID3 tags\n */\nexport const getID3Frames = (id3Data: Uint8Array): Frame[] => {\n  let offset = 0;\n  const frames: Frame[] = [];\n\n  while (isHeader(id3Data, offset)) {\n    const size = readSize(id3Data, offset + 6);\n    // skip past ID3 header\n    offset += 10;\n    const end = offset + size;\n    // loop through frames in the ID3 tag\n    while (offset + 8 < end) {\n      const frameData: RawFrame = getFrameData(id3Data.subarray(offset));\n      const frame: Frame | undefined = decodeFrame(frameData);\n      if (frame) {\n        frames.push(frame);\n      }\n\n      // skip frame header and frame data\n      offset += frameData.size + 10;\n    }\n\n    if (isFooter(id3Data, offset)) {\n      offset += 10;\n    }\n  }\n\n  return frames;\n};\n\nexport const decodeFrame = (frame: RawFrame): Frame | undefined => {\n  if (frame.type === 'PRIV') {\n    return decodePrivFrame(frame);\n  } else if (frame.type[0] === 'W') {\n    return decodeURLFrame(frame);\n  }\n\n  return decodeTextFrame(frame);\n};\n\nconst decodePrivFrame = (\n  frame: RawFrame,\n): DecodedFrame<ArrayBuffer> | undefined => {\n  /*\n  Format: <text string>\\0<binary data>\n  */\n  if (frame.size < 2) {\n    return undefined;\n  }\n\n  const owner = utf8ArrayToStr(frame.data, true);\n  const privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n\n  return { key: frame.type, info: owner, data: privateData.buffer };\n};\n\nconst decodeTextFrame = (frame: RawFrame): DecodedFrame<string> | undefined => {\n  if (frame.size < 2) {\n    return undefined;\n  }\n\n  if (frame.type === 'TXXX') {\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Description}\\0{Value}\n    */\n    let index = 1;\n    const description = utf8ArrayToStr(frame.data.subarray(index), true);\n\n    index += description.length + 1;\n    const value = utf8ArrayToStr(frame.data.subarray(index));\n\n    return { key: frame.type, info: description, data: value };\n  }\n  /*\n  Format:\n  [0]   = {Text Encoding}\n  [1-?] = {Value}\n  */\n  const text = utf8ArrayToStr(frame.data.subarray(1));\n  return { key: frame.type, data: text };\n};\n\nconst decodeURLFrame = (frame: RawFrame): DecodedFrame<string> | undefined => {\n  if (frame.type === 'WXXX') {\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Description}\\0{URL}\n    */\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    let index = 1;\n    const description: string = utf8ArrayToStr(\n      frame.data.subarray(index),\n      true,\n    );\n\n    index += description.length + 1;\n    const value: string = utf8ArrayToStr(frame.data.subarray(index));\n\n    return { key: frame.type, info: description, data: value };\n  }\n  /*\n  Format:\n  [0-?] = {URL}\n  */\n  const url: string = utf8ArrayToStr(frame.data);\n  return { key: frame.type, data: url };\n};\n\nconst readTimeStamp = (\n  timeStampFrame: DecodedFrame<ArrayBuffer>,\n): number | undefined => {\n  if (timeStampFrame.data.byteLength === 8) {\n    const data = new Uint8Array(timeStampFrame.data);\n    // timestamp is 33 bit expressed as a big-endian eight-octet number,\n    // with the upper 31 bits set to zero.\n    const pts33Bit = data[3] & 0x1;\n    let timestamp =\n      (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];\n    timestamp /= 45;\n\n    if (pts33Bit) {\n      timestamp += 47721858.84;\n    } // 2^32 / 90\n\n    return Math.round(timestamp);\n  }\n\n  return undefined;\n};\n\n// http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n/* utf.js - UTF-8 <=> UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */\nexport const utf8ArrayToStr = (\n  array: Uint8Array,\n  exitOnNull: boolean = false,\n): string => {\n  const decoder = getTextDecoder();\n  if (decoder) {\n    const decoded = decoder.decode(array);\n\n    if (exitOnNull) {\n      // grab up to the first null\n      const idx = decoded.indexOf('\\0');\n      return idx !== -1 ? decoded.substring(0, idx) : decoded;\n    }\n\n    // remove any null characters\n    return decoded.replace(/\\0/g, '');\n  }\n\n  const len = array.length;\n  let c;\n  let char2;\n  let char3;\n  let out = '';\n  let i = 0;\n  while (i < len) {\n    c = array[i++];\n    if (c === 0x00 && exitOnNull) {\n      return out;\n    } else if (c === 0x00 || c === 0x03) {\n      // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it\n      continue;\n    }\n    switch (c >> 4) {\n      case 0:\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12:\n      case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[i++];\n        out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[i++];\n        char3 = array[i++];\n        out += String.fromCharCode(\n          ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0),\n        );\n        break;\n      default:\n    }\n  }\n  return out;\n};\n\nexport const testables = {\n  decodeTextFrame: decodeTextFrame,\n};\n\nlet decoder: TextDecoder;\n\nfunction getTextDecoder() {\n  // On Play Station 4, TextDecoder is defined but partially implemented.\n  // Manual decoding option is preferable\n  if (navigator.userAgent.includes('PlayStation 4')) {\n    return;\n  }\n\n  if (!decoder && typeof self.TextDecoder !== 'undefined') {\n    decoder = new self.TextDecoder('utf-8');\n  }\n\n  return decoder;\n}\n","/**\n *  hex dump helper class\n */\n\nconst Hex = {\n  hexDump: function (array: Uint8Array) {\n    let str = '';\n    for (let i = 0; i < array.length; i++) {\n      let h = array[i].toString(16);\n      if (h.length < 2) {\n        h = '0' + h;\n      }\n\n      str += h;\n    }\n    return str;\n  },\n};\n\nexport default Hex;\n","import { ElementaryStreamTypes } from '../loader/fragment';\nimport { sliceUint8 } from './typed-array';\nimport { utf8ArrayToStr } from '../demux/id3';\nimport { logger } from '../utils/logger';\nimport Hex from './hex';\nimport type { PassthroughTrack, UserdataSample } from '../types/demuxer';\nimport type { DecryptData } from '../loader/level-key';\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\nconst push = [].push;\n\n// We are using fixed track IDs for driving the MP4 remuxer\n// instead of following the TS PIDs.\n// There is no reason not to do this and some browsers/SourceBuffer-demuxers\n// may not like if there are TrackID \"switches\"\n// See https://github.com/video-dev/hls.js/issues/1331\n// Here we are mapping our internal track types to constant MP4 track IDs\n// With MSE currently one can only have one track of each, and we are muxing\n// whatever video/audio rendition in them.\nexport const RemuxerTrackIdConfig = {\n  video: 1,\n  audio: 2,\n  id3: 3,\n  text: 4,\n};\n\nexport function bin2str(data: Uint8Array): string {\n  return String.fromCharCode.apply(null, data);\n}\n\nexport function readUint16(buffer: Uint8Array, offset: number): number {\n  const val = (buffer[offset] << 8) | buffer[offset + 1];\n  return val < 0 ? 65536 + val : val;\n}\n\nexport function readUint32(buffer: Uint8Array, offset: number): number {\n  const val = readSint32(buffer, offset);\n  return val < 0 ? 4294967296 + val : val;\n}\n\nexport function readSint32(buffer: Uint8Array, offset: number): number {\n  return (\n    (buffer[offset] << 24) |\n    (buffer[offset + 1] << 16) |\n    (buffer[offset + 2] << 8) |\n    buffer[offset + 3]\n  );\n}\n\nexport function writeUint32(buffer: Uint8Array, offset: number, value: number) {\n  buffer[offset] = value >> 24;\n  buffer[offset + 1] = (value >> 16) & 0xff;\n  buffer[offset + 2] = (value >> 8) & 0xff;\n  buffer[offset + 3] = value & 0xff;\n}\n\n// Find \"moof\" box\nexport function hasMoofData(data: Uint8Array): boolean {\n  const end = data.byteLength;\n  for (let i = 0; i < end; ) {\n    const size = readUint32(data, i);\n    if (\n      size > 8 &&\n      data[i + 4] === 0x6d &&\n      data[i + 5] === 0x6f &&\n      data[i + 6] === 0x6f &&\n      data[i + 7] === 0x66\n    ) {\n      return true;\n    }\n    i = size > 1 ? i + size : end;\n  }\n  return false;\n}\n\n// Find the data for a box specified by its path\nexport function findBox(data: Uint8Array, path: string[]): Uint8Array[] {\n  const results = [] as Uint8Array[];\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return results;\n  }\n  const end = data.byteLength;\n\n  for (let i = 0; i < end; ) {\n    const size = readUint32(data, i);\n    const type = bin2str(data.subarray(i + 4, i + 8));\n    const endbox = size > 1 ? i + size : end;\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, endbox));\n      } else {\n        // recursively search for the next box along the path\n        const subresults = findBox(data.subarray(i + 8, endbox), path.slice(1));\n        if (subresults.length) {\n          push.apply(results, subresults);\n        }\n      }\n    }\n    i = endbox;\n  }\n\n  // we've finished searching all of data\n  return results;\n}\n\ntype SidxInfo = {\n  earliestPresentationTime: number;\n  timescale: number;\n  version: number;\n  referencesCount: number;\n  references: any[];\n};\n\nexport function parseSegmentIndex(sidx: Uint8Array): SidxInfo | null {\n  const references: any[] = [];\n\n  const version = sidx[0];\n\n  // set initial offset, we skip the reference ID (not needed)\n  let index = 8;\n\n  const timescale = readUint32(sidx, index);\n  index += 4;\n\n  // TODO: parse earliestPresentationTime and firstOffset\n  // usually zero in our case\n  const earliestPresentationTime = 0;\n  const firstOffset = 0;\n\n  if (version === 0) {\n    index += 8;\n  } else {\n    index += 16;\n  }\n\n  // skip reserved\n  index += 2;\n\n  let startByte = sidx.length + firstOffset;\n\n  const referencesCount = readUint16(sidx, index);\n  index += 2;\n\n  for (let i = 0; i < referencesCount; i++) {\n    let referenceIndex = index;\n\n    const referenceInfo = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n\n    const referenceSize = referenceInfo & 0x7fffffff;\n    const referenceType = (referenceInfo & 0x80000000) >>> 31;\n\n    if (referenceType === 1) {\n      logger.warn('SIDX has hierarchical references (not supported)');\n      return null;\n    }\n\n    const subsegmentDuration = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n\n    references.push({\n      referenceSize,\n      subsegmentDuration, // unscaled\n      info: {\n        duration: subsegmentDuration / timescale,\n        start: startByte,\n        end: startByte + referenceSize - 1,\n      },\n    });\n\n    startByte += referenceSize;\n\n    // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n    // for |sapDelta|.\n    referenceIndex += 4;\n\n    // skip to next ref\n    index = referenceIndex;\n  }\n\n  return {\n    earliestPresentationTime,\n    timescale,\n    version,\n    referencesCount,\n    references,\n  };\n}\n\n/**\n * Parses an MP4 initialization segment and extracts stream type and\n * timescale values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * moov > trak > mdia > hdlr\n * ```\n * @param initSegment the bytes of the init segment\n * @returns a hash of track type to timescale values or null if\n * the init segment is malformed.\n */\n\nexport interface InitDataTrack {\n  timescale: number;\n  id: number;\n  codec: string;\n}\n\ntype HdlrType = ElementaryStreamTypes.AUDIO | ElementaryStreamTypes.VIDEO;\n\nexport interface InitData extends Array<any> {\n  [index: number]:\n    | {\n        timescale: number;\n        type: HdlrType;\n        default?: {\n          duration: number;\n          flags: number;\n        };\n      }\n    | undefined;\n  audio?: InitDataTrack;\n  video?: InitDataTrack;\n  caption?: InitDataTrack;\n}\n\nexport function parseInitSegment(initSegment: Uint8Array): InitData {\n  const result: InitData = [];\n  const traks = findBox(initSegment, ['moov', 'trak']);\n  for (let i = 0; i < traks.length; i++) {\n    const trak = traks[i];\n    const tkhd = findBox(trak, ['tkhd'])[0];\n    if (tkhd) {\n      let version = tkhd[0];\n      const trackId = readUint32(tkhd, version === 0 ? 12 : 20);\n      const mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n      if (mdhd) {\n        version = mdhd[0];\n        const timescale = readUint32(mdhd, version === 0 ? 12 : 20);\n        const hdlr = findBox(trak, ['mdia', 'hdlr'])[0];\n        if (hdlr) {\n          const hdlrType = bin2str(hdlr.subarray(8, 12));\n          const type: HdlrType | undefined = {\n            soun: ElementaryStreamTypes.AUDIO as const,\n            vide: ElementaryStreamTypes.VIDEO as const,\n          }[hdlrType];\n          if (type) {\n            // Parse codec details\n            const stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n            const stsdData = parseStsd(stsd);\n            result[trackId] = { timescale, type };\n            result[type] = { timescale, id: trackId, ...stsdData };\n          }\n        }\n      }\n    }\n  }\n\n  const trex = findBox(initSegment, ['moov', 'mvex', 'trex']);\n  trex.forEach((trex) => {\n    const trackId = readUint32(trex, 4);\n    const track = result[trackId];\n    if (track) {\n      track.default = {\n        duration: readUint32(trex, 12),\n        flags: readUint32(trex, 20),\n      };\n    }\n  });\n\n  return result;\n}\n\nfunction parseStsd(stsd: Uint8Array): { codec: string; encrypted: boolean } {\n  const sampleEntries = stsd.subarray(8);\n  const sampleEntriesEnd = sampleEntries.subarray(8 + 78);\n  const fourCC = bin2str(sampleEntries.subarray(4, 8));\n  let codec = fourCC;\n  const encrypted = fourCC === 'enca' || fourCC === 'encv';\n  if (encrypted) {\n    const encBox = findBox(sampleEntries, [fourCC])[0];\n    const encBoxChildren = encBox.subarray(fourCC === 'enca' ? 28 : 78);\n    const sinfs = findBox(encBoxChildren, ['sinf']);\n    sinfs.forEach((sinf) => {\n      const schm = findBox(sinf, ['schm'])[0];\n      if (schm) {\n        const scheme = bin2str(schm.subarray(4, 8));\n        if (scheme === 'cbcs' || scheme === 'cenc') {\n          const frma = findBox(sinf, ['frma'])[0];\n          if (frma) {\n            // for encrypted content codec fourCC will be in frma\n            codec = bin2str(frma);\n          }\n        }\n      }\n    });\n  }\n  switch (codec) {\n    case 'avc1':\n    case 'avc2':\n    case 'avc3':\n    case 'avc4': {\n      // extract profile + compatibility + level out of avcC box\n      const avcCBox = findBox(sampleEntriesEnd, ['avcC'])[0];\n      codec += '.' + toHex(avcCBox[1]) + toHex(avcCBox[2]) + toHex(avcCBox[3]);\n      break;\n    }\n    case 'mp4a': {\n      const codecBox = findBox(sampleEntries, [fourCC])[0];\n      const esdsBox = findBox(codecBox.subarray(28), ['esds'])[0];\n      if (esdsBox && esdsBox.length > 12) {\n        let i = 4;\n        // ES Descriptor tag\n        if (esdsBox[i++] !== 0x03) {\n          break;\n        }\n        i = skipBERInteger(esdsBox, i);\n        i += 2; // skip es_id;\n        const flags = esdsBox[i++];\n        if (flags & 0x80) {\n          i += 2; // skip dependency es_id\n        }\n        if (flags & 0x40) {\n          i += esdsBox[i++]; // skip URL\n        }\n        // Decoder config descriptor\n        if (esdsBox[i++] !== 0x04) {\n          break;\n        }\n        i = skipBERInteger(esdsBox, i);\n        const objectType = esdsBox[i++];\n        if (objectType === 0x40) {\n          codec += '.' + toHex(objectType);\n        } else {\n          break;\n        }\n        i += 12;\n        // Decoder specific info\n        if (esdsBox[i++] !== 0x05) {\n          break;\n        }\n        i = skipBERInteger(esdsBox, i);\n        const firstByte = esdsBox[i++];\n        let audioObjectType = (firstByte & 0xf8) >> 3;\n        if (audioObjectType === 31) {\n          audioObjectType +=\n            1 + ((firstByte & 0x7) << 3) + ((esdsBox[i] & 0xe0) >> 5);\n        }\n        codec += '.' + audioObjectType;\n      }\n      break;\n    }\n    case 'hvc1':\n    case 'hev1': {\n      const hvcCBox = findBox(sampleEntriesEnd, ['hvcC'])[0];\n      const profileByte = hvcCBox[1];\n      const profileSpace = ['', 'A', 'B', 'C'][profileByte >> 6];\n      const generalProfileIdc = profileByte & 0x1f;\n      const profileCompat = readUint32(hvcCBox, 2);\n      const tierFlag = (profileByte & 0x20) >> 5 ? 'H' : 'L';\n      const levelIDC = hvcCBox[12];\n      const constraintIndicator = hvcCBox.subarray(6, 12);\n      codec += '.' + profileSpace + generalProfileIdc;\n      codec += '.' + profileCompat.toString(16).toUpperCase();\n      codec += '.' + tierFlag + levelIDC;\n      let constraintString = '';\n      for (let i = constraintIndicator.length; i--; ) {\n        const byte = constraintIndicator[i];\n        if (byte || constraintString) {\n          const encodedByte = byte.toString(16).toUpperCase();\n          constraintString = '.' + encodedByte + constraintString;\n        }\n      }\n      codec += constraintString;\n      break;\n    }\n    case 'dvh1':\n    case 'dvhe': {\n      const dvcCBox = findBox(sampleEntriesEnd, ['dvcC'])[0];\n      const profile = (dvcCBox[2] >> 1) & 0x7f;\n      const level = ((dvcCBox[2] << 5) & 0x20) | ((dvcCBox[3] >> 3) & 0x1f);\n      codec += '.' + addLeadingZero(profile) + '.' + addLeadingZero(level);\n      break;\n    }\n    case 'vp09': {\n      const vpcCBox = findBox(sampleEntriesEnd, ['vpcC'])[0];\n      const profile = vpcCBox[4];\n      const level = vpcCBox[5];\n      const bitDepth = (vpcCBox[6] >> 4) & 0x0f;\n      codec +=\n        '.' +\n        addLeadingZero(profile) +\n        '.' +\n        addLeadingZero(level) +\n        '.' +\n        addLeadingZero(bitDepth);\n      break;\n    }\n    case 'av01': {\n      const av1CBox = findBox(sampleEntriesEnd, ['av1C'])[0];\n      const profile = av1CBox[1] >>> 5;\n      const level = av1CBox[1] & 0x1f;\n      const tierFlag = av1CBox[2] >>> 7 ? 'H' : 'M';\n      const highBitDepth = (av1CBox[2] & 0x40) >> 6;\n      const twelveBit = (av1CBox[2] & 0x20) >> 5;\n      const bitDepth =\n        profile === 2 && highBitDepth\n          ? twelveBit\n            ? 12\n            : 10\n          : highBitDepth\n            ? 10\n            : 8;\n      const monochrome = (av1CBox[2] & 0x10) >> 4;\n      const chromaSubsamplingX = (av1CBox[2] & 0x08) >> 3;\n      const chromaSubsamplingY = (av1CBox[2] & 0x04) >> 2;\n      const chromaSamplePosition = av1CBox[2] & 0x03;\n      // TODO: parse color_description_present_flag\n      // default it to BT.709/limited range for now\n      // more info https://aomediacodec.github.io/av1-isobmff/#av1codecconfigurationbox-syntax\n      const colorPrimaries = 1;\n      const transferCharacteristics = 1;\n      const matrixCoefficients = 1;\n      const videoFullRangeFlag = 0;\n      codec +=\n        '.' +\n        profile +\n        '.' +\n        addLeadingZero(level) +\n        tierFlag +\n        '.' +\n        addLeadingZero(bitDepth) +\n        '.' +\n        monochrome +\n        '.' +\n        chromaSubsamplingX +\n        chromaSubsamplingY +\n        chromaSamplePosition +\n        '.' +\n        addLeadingZero(colorPrimaries) +\n        '.' +\n        addLeadingZero(transferCharacteristics) +\n        '.' +\n        addLeadingZero(matrixCoefficients) +\n        '.' +\n        videoFullRangeFlag;\n      break;\n    }\n    case 'ac-3':\n    case 'ec-3':\n    case 'alac':\n    case 'fLaC':\n    case 'Opus':\n    default:\n      break;\n  }\n  return { codec, encrypted };\n}\n\nfunction skipBERInteger(bytes: Uint8Array, i: number): number {\n  const limit = i + 5;\n  while (bytes[i++] & 0x80 && i < limit) {}\n  return i;\n}\n\nfunction toHex(x: number): string {\n  return ('0' + x.toString(16).toUpperCase()).slice(-2);\n}\n\nfunction addLeadingZero(num: number): string {\n  return (num < 10 ? '0' : '') + num;\n}\n\nexport function patchEncyptionData(\n  initSegment: Uint8Array | undefined,\n  decryptdata: DecryptData | null,\n): Uint8Array | undefined {\n  if (!initSegment || !decryptdata) {\n    return initSegment;\n  }\n  const keyId = decryptdata.keyId;\n  if (keyId && decryptdata.isCommonEncryption) {\n    const traks = findBox(initSegment, ['moov', 'trak']);\n    traks.forEach((trak) => {\n      const stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n      // skip the sample entry count\n      const sampleEntries = stsd.subarray(8);\n      let encBoxes = findBox(sampleEntries, ['enca']);\n      const isAudio = encBoxes.length > 0;\n      if (!isAudio) {\n        encBoxes = findBox(sampleEntries, ['encv']);\n      }\n      encBoxes.forEach((enc) => {\n        const encBoxChildren = isAudio ? enc.subarray(28) : enc.subarray(78);\n        const sinfBoxes = findBox(encBoxChildren, ['sinf']);\n        sinfBoxes.forEach((sinf) => {\n          const tenc = parseSinf(sinf);\n          if (tenc) {\n            // Look for default key id (keyID offset is always 8 within the tenc box):\n            const tencKeyId = tenc.subarray(8, 24);\n            if (!tencKeyId.some((b) => b !== 0)) {\n              logger.log(\n                `[eme] Patching keyId in 'enc${\n                  isAudio ? 'a' : 'v'\n                }>sinf>>tenc' box: ${Hex.hexDump(tencKeyId)} -> ${Hex.hexDump(\n                  keyId,\n                )}`,\n              );\n              tenc.set(keyId, 8);\n            }\n          }\n        });\n      });\n    });\n  }\n\n  return initSegment;\n}\n\nexport function parseSinf(sinf: Uint8Array): Uint8Array | null {\n  const schm = findBox(sinf, ['schm'])[0];\n  if (schm) {\n    const scheme = bin2str(schm.subarray(4, 8));\n    if (scheme === 'cbcs' || scheme === 'cenc') {\n      return findBox(sinf, ['schi', 'tenc'])[0];\n    }\n  }\n  logger.error(`[eme] missing 'schm' box`);\n  return null;\n}\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param initData - a hash of track type to timescale values\n * @param fmp4 - the bytes of the mp4 fragment\n * @returns the earliest base media decode start time for the\n * fragment, in seconds\n */\nexport function getStartDTS(\n  initData: InitData,\n  fmp4: Uint8Array,\n): number | null {\n  // we need info from two children of each track fragment box\n  return findBox(fmp4, ['moof', 'traf']).reduce(\n    (result: number | null, traf) => {\n      const tfdt = findBox(traf, ['tfdt'])[0];\n      const version = tfdt[0];\n      const start = findBox(traf, ['tfhd']).reduce(\n        (result: number | null, tfhd) => {\n          // get the track id from the tfhd\n          const id = readUint32(tfhd, 4);\n          const track = initData[id];\n          if (track) {\n            let baseTime = readUint32(tfdt, 4);\n            if (version === 1) {\n              // If value is too large, assume signed 64-bit. Negative track fragment decode times are invalid, but they exist in the wild.\n              // This prevents large values from being used for initPTS, which can cause playlist sync issues.\n              // https://github.com/video-dev/hls.js/issues/5303\n              if (baseTime === UINT32_MAX) {\n                logger.warn(\n                  `[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time`,\n                );\n                return result;\n              }\n              baseTime *= UINT32_MAX + 1;\n              baseTime += readUint32(tfdt, 8);\n            }\n            // assume a 90kHz clock if no timescale was specified\n            const scale = track.timescale || 90e3;\n            // convert base time to seconds\n            const startTime = baseTime / scale;\n            if (\n              Number.isFinite(startTime) &&\n              (result === null || startTime < result)\n            ) {\n              return startTime;\n            }\n          }\n          return result;\n        },\n        null,\n      );\n      if (\n        start !== null &&\n        Number.isFinite(start) &&\n        (result === null || start < result)\n      ) {\n        return start;\n      }\n      return result;\n    },\n    null,\n  );\n}\n\n/*\n  For Reference:\n  aligned(8) class TrackFragmentHeaderBox\n           extends FullBox(‘tfhd’, 0, tf_flags){\n     unsigned int(32)  track_ID;\n     // all the following are optional fields\n     unsigned int(64)  base_data_offset;\n     unsigned int(32)  sample_description_index;\n     unsigned int(32)  default_sample_duration;\n     unsigned int(32)  default_sample_size;\n     unsigned int(32)  default_sample_flags\n  }\n */\nexport function getDuration(data: Uint8Array, initData: InitData) {\n  let rawDuration = 0;\n  let videoDuration = 0;\n  let audioDuration = 0;\n  const trafs = findBox(data, ['moof', 'traf']);\n  for (let i = 0; i < trafs.length; i++) {\n    const traf = trafs[i];\n    // There is only one tfhd & trun per traf\n    // This is true for CMAF style content, and we should perhaps check the ftyp\n    // and only look for a single trun then, but for ISOBMFF we should check\n    // for multiple track runs.\n    const tfhd = findBox(traf, ['tfhd'])[0];\n    // get the track id from the tfhd\n    const id = readUint32(tfhd, 4);\n    const track = initData[id];\n    if (!track) {\n      continue;\n    }\n    const trackDefault = track.default;\n    const tfhdFlags = readUint32(tfhd, 0) | trackDefault?.flags!;\n    let sampleDuration: number | undefined = trackDefault?.duration;\n    if (tfhdFlags & 0x000008) {\n      // 0x000008 indicates the presence of the default_sample_duration field\n      if (tfhdFlags & 0x000002) {\n        // 0x000002 indicates the presence of the sample_description_index field, which precedes default_sample_duration\n        // If present, the default_sample_duration exists at byte offset 12\n        sampleDuration = readUint32(tfhd, 12);\n      } else {\n        // Otherwise, the duration is at byte offset 8\n        sampleDuration = readUint32(tfhd, 8);\n      }\n    }\n    // assume a 90kHz clock if no timescale was specified\n    const timescale = track.timescale || 90e3;\n    const truns = findBox(traf, ['trun']);\n    for (let j = 0; j < truns.length; j++) {\n      rawDuration = computeRawDurationFromSamples(truns[j]);\n      if (!rawDuration && sampleDuration) {\n        const sampleCount = readUint32(truns[j], 4);\n        rawDuration = sampleDuration * sampleCount;\n      }\n      if (track.type === ElementaryStreamTypes.VIDEO) {\n        videoDuration += rawDuration / timescale;\n      } else if (track.type === ElementaryStreamTypes.AUDIO) {\n        audioDuration += rawDuration / timescale;\n      }\n    }\n  }\n  if (videoDuration === 0 && audioDuration === 0) {\n    // If duration samples are not available in the traf use sidx subsegment_duration\n    let sidxDuration = 0;\n    const sidxs = findBox(data, ['sidx']);\n    for (let i = 0; i < sidxs.length; i++) {\n      const sidx = parseSegmentIndex(sidxs[i]);\n      if (sidx?.references) {\n        sidxDuration += sidx.references.reduce(\n          (dur, ref) => dur + ref.info.duration || 0,\n          0,\n        );\n      }\n    }\n\n    return sidxDuration;\n  }\n  if (videoDuration) {\n    return videoDuration;\n  }\n  return audioDuration;\n}\n\n/*\n  For Reference:\n  aligned(8) class TrackRunBox\n           extends FullBox(‘trun’, version, tr_flags) {\n     unsigned int(32)  sample_count;\n     // the following are optional fields\n     signed int(32) data_offset;\n     unsigned int(32)  first_sample_flags;\n     // all fields in the following array are optional\n     {\n        unsigned int(32)  sample_duration;\n        unsigned int(32)  sample_size;\n        unsigned int(32)  sample_flags\n        if (version == 0)\n           { unsigned int(32)\n        else\n           { signed int(32)\n     }[ sample_count ]\n  }\n */\nexport function computeRawDurationFromSamples(trun): number {\n  const flags = readUint32(trun, 0);\n  // Flags are at offset 0, non-optional sample_count is at offset 4. Therefore we start 8 bytes in.\n  // Each field is an int32, which is 4 bytes\n  let offset = 8;\n  // data-offset-present flag\n  if (flags & 0x000001) {\n    offset += 4;\n  }\n  // first-sample-flags-present flag\n  if (flags & 0x000004) {\n    offset += 4;\n  }\n\n  let duration = 0;\n  const sampleCount = readUint32(trun, 4);\n  for (let i = 0; i < sampleCount; i++) {\n    // sample-duration-present flag\n    if (flags & 0x000100) {\n      const sampleDuration = readUint32(trun, offset);\n      duration += sampleDuration;\n      offset += 4;\n    }\n    // sample-size-present flag\n    if (flags & 0x000200) {\n      offset += 4;\n    }\n    // sample-flags-present flag\n    if (flags & 0x000400) {\n      offset += 4;\n    }\n    // sample-composition-time-offsets-present flag\n    if (flags & 0x000800) {\n      offset += 4;\n    }\n  }\n  return duration;\n}\n\nexport function offsetStartDTS(\n  initData: InitData,\n  fmp4: Uint8Array,\n  timeOffset: number,\n) {\n  findBox(fmp4, ['moof', 'traf']).forEach((traf) => {\n    findBox(traf, ['tfhd']).forEach((tfhd) => {\n      // get the track id from the tfhd\n      const id = readUint32(tfhd, 4);\n      const track = initData[id];\n      if (!track) {\n        return;\n      }\n      // assume a 90kHz clock if no timescale was specified\n      const timescale = track.timescale || 90e3;\n      // get the base media decode time from the tfdt\n      findBox(traf, ['tfdt']).forEach((tfdt) => {\n        const version = tfdt[0];\n        const offset = timeOffset * timescale;\n        if (offset) {\n          let baseMediaDecodeTime = readUint32(tfdt, 4);\n          if (version === 0) {\n            baseMediaDecodeTime -= offset;\n            baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n            writeUint32(tfdt, 4, baseMediaDecodeTime);\n          } else {\n            baseMediaDecodeTime *= Math.pow(2, 32);\n            baseMediaDecodeTime += readUint32(tfdt, 8);\n            baseMediaDecodeTime -= offset;\n            baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);\n            const upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n            const lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n            writeUint32(tfdt, 4, upper);\n            writeUint32(tfdt, 8, lower);\n          }\n        }\n      });\n    });\n  });\n}\n\n// TODO: Check if the last moof+mdat pair is part of the valid range\nexport function segmentValidRange(data: Uint8Array): SegmentedRange {\n  const segmentedRange: SegmentedRange = {\n    valid: null,\n    remainder: null,\n  };\n\n  const moofs = findBox(data, ['moof']);\n  if (moofs.length < 2) {\n    segmentedRange.remainder = data;\n    return segmentedRange;\n  }\n  const last = moofs[moofs.length - 1];\n  // Offset by 8 bytes; findBox offsets the start by as much\n  segmentedRange.valid = sliceUint8(data, 0, last.byteOffset - 8);\n  segmentedRange.remainder = sliceUint8(data, last.byteOffset - 8);\n  return segmentedRange;\n}\n\nexport interface SegmentedRange {\n  valid: Uint8Array | null;\n  remainder: Uint8Array | null;\n}\n\nexport function appendUint8Array(\n  data1: Uint8Array,\n  data2: Uint8Array,\n): Uint8Array {\n  const temp = new Uint8Array(data1.length + data2.length);\n  temp.set(data1);\n  temp.set(data2, data1.length);\n\n  return temp;\n}\n\nexport interface IEmsgParsingData {\n  schemeIdUri: string;\n  value: string;\n  timeScale: number;\n  presentationTimeDelta?: number;\n  presentationTime?: number;\n  eventDuration: number;\n  id: number;\n  payload: Uint8Array;\n}\n\nexport function parseSamples(\n  timeOffset: number,\n  track: PassthroughTrack,\n): UserdataSample[] {\n  const seiSamples = [] as UserdataSample[];\n  const videoData = track.samples;\n  const timescale = track.timescale;\n  const trackId = track.id;\n  let isHEVCFlavor = false;\n\n  const moofs = findBox(videoData, ['moof']);\n  moofs.map((moof) => {\n    const moofOffset = moof.byteOffset - 8;\n    const trafs = findBox(moof, ['traf']);\n    trafs.map((traf) => {\n      // get the base media decode time from the tfdt\n      const baseTime = findBox(traf, ['tfdt']).map((tfdt) => {\n        const version = tfdt[0];\n        let result = readUint32(tfdt, 4);\n        if (version === 1) {\n          result *= Math.pow(2, 32);\n          result += readUint32(tfdt, 8);\n        }\n        return result / timescale;\n      })[0];\n\n      if (baseTime !== undefined) {\n        timeOffset = baseTime;\n      }\n\n      return findBox(traf, ['tfhd']).map((tfhd) => {\n        const id = readUint32(tfhd, 4);\n        const tfhdFlags = readUint32(tfhd, 0) & 0xffffff;\n        const baseDataOffsetPresent = (tfhdFlags & 0x000001) !== 0;\n        const sampleDescriptionIndexPresent = (tfhdFlags & 0x000002) !== 0;\n        const defaultSampleDurationPresent = (tfhdFlags & 0x000008) !== 0;\n        let defaultSampleDuration = 0;\n        const defaultSampleSizePresent = (tfhdFlags & 0x000010) !== 0;\n        let defaultSampleSize = 0;\n        const defaultSampleFlagsPresent = (tfhdFlags & 0x000020) !== 0;\n        let tfhdOffset = 8;\n\n        if (id === trackId) {\n          if (baseDataOffsetPresent) {\n            tfhdOffset += 8;\n          }\n          if (sampleDescriptionIndexPresent) {\n            tfhdOffset += 4;\n          }\n          if (defaultSampleDurationPresent) {\n            defaultSampleDuration = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n          if (defaultSampleSizePresent) {\n            defaultSampleSize = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n          if (defaultSampleFlagsPresent) {\n            tfhdOffset += 4;\n          }\n          if (track.type === 'video') {\n            isHEVCFlavor = isHEVC(track.codec);\n          }\n\n          findBox(traf, ['trun']).map((trun) => {\n            const version = trun[0];\n            const flags = readUint32(trun, 0) & 0xffffff;\n            const dataOffsetPresent = (flags & 0x000001) !== 0;\n            let dataOffset = 0;\n            const firstSampleFlagsPresent = (flags & 0x000004) !== 0;\n            const sampleDurationPresent = (flags & 0x000100) !== 0;\n            let sampleDuration = 0;\n            const sampleSizePresent = (flags & 0x000200) !== 0;\n            let sampleSize = 0;\n            const sampleFlagsPresent = (flags & 0x000400) !== 0;\n            const sampleCompositionOffsetsPresent = (flags & 0x000800) !== 0;\n            let compositionOffset = 0;\n            const sampleCount = readUint32(trun, 4);\n            let trunOffset = 8; // past version, flags, and sample count\n\n            if (dataOffsetPresent) {\n              dataOffset = readUint32(trun, trunOffset);\n              trunOffset += 4;\n            }\n            if (firstSampleFlagsPresent) {\n              trunOffset += 4;\n            }\n\n            let sampleOffset = dataOffset + moofOffset;\n\n            for (let ix = 0; ix < sampleCount; ix++) {\n              if (sampleDurationPresent) {\n                sampleDuration = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleDuration = defaultSampleDuration;\n              }\n              if (sampleSizePresent) {\n                sampleSize = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleSize = defaultSampleSize;\n              }\n              if (sampleFlagsPresent) {\n                trunOffset += 4;\n              }\n              if (sampleCompositionOffsetsPresent) {\n                if (version === 0) {\n                  compositionOffset = readUint32(trun, trunOffset);\n                } else {\n                  compositionOffset = readSint32(trun, trunOffset);\n                }\n                trunOffset += 4;\n              }\n              if (track.type === ElementaryStreamTypes.VIDEO) {\n                let naluTotalSize = 0;\n                while (naluTotalSize < sampleSize) {\n                  const naluSize = readUint32(videoData, sampleOffset);\n                  sampleOffset += 4;\n                  if (isSEIMessage(isHEVCFlavor, videoData[sampleOffset])) {\n                    const data = videoData.subarray(\n                      sampleOffset,\n                      sampleOffset + naluSize,\n                    );\n                    parseSEIMessageFromNALu(\n                      data,\n                      isHEVCFlavor ? 2 : 1,\n                      timeOffset + compositionOffset / timescale,\n                      seiSamples,\n                    );\n                  }\n                  sampleOffset += naluSize;\n                  naluTotalSize += naluSize + 4;\n                }\n              }\n\n              timeOffset += sampleDuration / timescale;\n            }\n          });\n        }\n      });\n    });\n  });\n  return seiSamples;\n}\n\nfunction isHEVC(codec: string) {\n  if (!codec) {\n    return false;\n  }\n  const delimit = codec.indexOf('.');\n  const baseCodec = delimit < 0 ? codec : codec.substring(0, delimit);\n  return (\n    baseCodec === 'hvc1' ||\n    baseCodec === 'hev1' ||\n    // Dolby Vision\n    baseCodec === 'dvh1' ||\n    baseCodec === 'dvhe'\n  );\n}\n\nfunction isSEIMessage(isHEVCFlavor: boolean, naluHeader: number) {\n  if (isHEVCFlavor) {\n    const naluType = (naluHeader >> 1) & 0x3f;\n    return naluType === 39 || naluType === 40;\n  } else {\n    const naluType = naluHeader & 0x1f;\n    return naluType === 6;\n  }\n}\n\nexport function parseSEIMessageFromNALu(\n  unescapedData: Uint8Array,\n  headerSize: number,\n  pts: number,\n  samples: UserdataSample[],\n) {\n  const data = discardEPB(unescapedData);\n  let seiPtr = 0;\n  // skip nal header\n  seiPtr += headerSize;\n  let payloadType = 0;\n  let payloadSize = 0;\n  let b = 0;\n\n  while (seiPtr < data.length) {\n    payloadType = 0;\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n      b = data[seiPtr++];\n      payloadType += b;\n    } while (b === 0xff);\n\n    // Parse payload size.\n    payloadSize = 0;\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n      b = data[seiPtr++];\n      payloadSize += b;\n    } while (b === 0xff);\n\n    const leftOver = data.length - seiPtr;\n    // Create a variable to process the payload\n    let payPtr = seiPtr;\n\n    // Increment the seiPtr to the end of the payload\n    if (payloadSize < leftOver) {\n      seiPtr += payloadSize;\n    } else if (payloadSize > leftOver) {\n      // Some type of corruption has happened?\n      logger.error(\n        `Malformed SEI payload. ${payloadSize} is too small, only ${leftOver} bytes left to parse.`,\n      );\n      // We might be able to parse some data, but let's be safe and ignore it.\n      break;\n    }\n\n    if (payloadType === 4) {\n      const countryCode = data[payPtr++];\n      if (countryCode === 181) {\n        const providerCode = readUint16(data, payPtr);\n        payPtr += 2;\n\n        if (providerCode === 49) {\n          const userStructure = readUint32(data, payPtr);\n          payPtr += 4;\n\n          if (userStructure === 0x47413934) {\n            const userDataType = data[payPtr++];\n\n            // Raw CEA-608 bytes wrapped in CEA-708 packet\n            if (userDataType === 3) {\n              const firstByte = data[payPtr++];\n              const totalCCs = 0x1f & firstByte;\n              const enabled = 0x40 & firstByte;\n              const totalBytes = enabled ? 2 + totalCCs * 3 : 0;\n              const byteArray = new Uint8Array(totalBytes);\n              if (enabled) {\n                byteArray[0] = firstByte;\n                for (let i = 1; i < totalBytes; i++) {\n                  byteArray[i] = data[payPtr++];\n                }\n              }\n\n              samples.push({\n                type: userDataType,\n                payloadType,\n                pts,\n                bytes: byteArray,\n              });\n            }\n          }\n        }\n      }\n    } else if (payloadType === 5) {\n      if (payloadSize > 16) {\n        const uuidStrArray: Array<string> = [];\n        for (let i = 0; i < 16; i++) {\n          const b = data[payPtr++].toString(16);\n          uuidStrArray.push(b.length == 1 ? '0' + b : b);\n\n          if (i === 3 || i === 5 || i === 7 || i === 9) {\n            uuidStrArray.push('-');\n          }\n        }\n        const length = payloadSize - 16;\n        const userDataBytes = new Uint8Array(length);\n        for (let i = 0; i < length; i++) {\n          userDataBytes[i] = data[payPtr++];\n        }\n\n        samples.push({\n          payloadType,\n          pts,\n          uuid: uuidStrArray.join(''),\n          userData: utf8ArrayToStr(userDataBytes),\n          userDataBytes,\n        });\n      }\n    }\n  }\n}\n\n/**\n * remove Emulation Prevention bytes from a RBSP\n */\nexport function discardEPB(data: Uint8Array): Uint8Array {\n  const length = data.byteLength;\n  const EPBPositions = [] as Array<number>;\n  let i = 1;\n\n  // Find all `Emulation Prevention Bytes`\n  while (i < length - 2) {\n    if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n      EPBPositions.push(i + 2);\n      i += 2;\n    } else {\n      i++;\n    }\n  }\n\n  // If no Emulation Prevention Bytes were found just return the original\n  // array\n  if (EPBPositions.length === 0) {\n    return data;\n  }\n\n  // Create a new array to hold the NAL unit data\n  const newLength = length - EPBPositions.length;\n  const newData = new Uint8Array(newLength);\n  let sourceIndex = 0;\n\n  for (i = 0; i < newLength; sourceIndex++, i++) {\n    if (sourceIndex === EPBPositions[0]) {\n      // Skip this byte\n      sourceIndex++;\n      // Remove this position index\n      EPBPositions.shift();\n    }\n    newData[i] = data[sourceIndex];\n  }\n  return newData;\n}\n\nexport function parseEmsg(data: Uint8Array): IEmsgParsingData {\n  const version = data[0];\n  let schemeIdUri: string = '';\n  let value: string = '';\n  let timeScale: number = 0;\n  let presentationTimeDelta: number = 0;\n  let presentationTime: number = 0;\n  let eventDuration: number = 0;\n  let id: number = 0;\n  let offset: number = 0;\n\n  if (version === 0) {\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    timeScale = readUint32(data, 12);\n    presentationTimeDelta = readUint32(data, 16);\n    eventDuration = readUint32(data, 20);\n    id = readUint32(data, 24);\n    offset = 28;\n  } else if (version === 1) {\n    offset += 4;\n    timeScale = readUint32(data, offset);\n    offset += 4;\n    const leftPresentationTime = readUint32(data, offset);\n    offset += 4;\n    const rightPresentationTime = readUint32(data, offset);\n    offset += 4;\n    presentationTime = 2 ** 32 * leftPresentationTime + rightPresentationTime;\n    if (!Number.isSafeInteger(presentationTime)) {\n      presentationTime = Number.MAX_SAFE_INTEGER;\n      logger.warn(\n        'Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box',\n      );\n    }\n\n    eventDuration = readUint32(data, offset);\n    offset += 4;\n    id = readUint32(data, offset);\n    offset += 4;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n  }\n  const payload = data.subarray(offset, data.byteLength);\n\n  return {\n    schemeIdUri,\n    value,\n    timeScale,\n    presentationTime,\n    presentationTimeDelta,\n    eventDuration,\n    id,\n    payload,\n  };\n}\n\nexport function mp4Box(type: ArrayLike<number>, ...payload: Uint8Array[]) {\n  const len = payload.length;\n  let size = 8;\n  let i = len;\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  const result = new Uint8Array(size);\n  result[0] = (size >> 24) & 0xff;\n  result[1] = (size >> 16) & 0xff;\n  result[2] = (size >> 8) & 0xff;\n  result[3] = size & 0xff;\n  result.set(type, 4);\n  for (i = 0, size = 8; i < len; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n}\n\nexport function mp4pssh(\n  systemId: Uint8Array,\n  keyids: Array<Uint8Array> | null,\n  data: Uint8Array,\n) {\n  if (systemId.byteLength !== 16) {\n    throw new RangeError('Invalid system id');\n  }\n  let version;\n  let kids;\n  if (keyids) {\n    version = 1;\n    kids = new Uint8Array(keyids.length * 16);\n    for (let ix = 0; ix < keyids.length; ix++) {\n      const k = keyids[ix]; // uint8array\n      if (k.byteLength !== 16) {\n        throw new RangeError('Invalid key');\n      }\n      kids.set(k, ix * 16);\n    }\n  } else {\n    version = 0;\n    kids = new Uint8Array();\n  }\n  let kidCount;\n  if (version > 0) {\n    kidCount = new Uint8Array(4);\n    if (keyids!.length > 0) {\n      new DataView(kidCount.buffer).setUint32(0, keyids!.length, false);\n    }\n  } else {\n    kidCount = new Uint8Array();\n  }\n  const dataSize = new Uint8Array(4);\n  if (data && data.byteLength > 0) {\n    new DataView(dataSize.buffer).setUint32(0, data.byteLength, false);\n  }\n  return mp4Box(\n    [112, 115, 115, 104],\n    new Uint8Array([\n      version,\n      0x00,\n      0x00,\n      0x00, // Flags\n    ]),\n    systemId, // 16 bytes\n    kidCount,\n    kids,\n    dataSize,\n    data || new Uint8Array(),\n  );\n}\n\nexport function parsePssh(initData: ArrayBuffer) {\n  if (!(initData instanceof ArrayBuffer) || initData.byteLength < 32) {\n    return null;\n  }\n  const result = {\n    version: 0,\n    systemId: '',\n    kids: null as null | Uint8Array[],\n    data: null as null | Uint8Array,\n  };\n  const view = new DataView(initData);\n  const boxSize = view.getUint32(0);\n  if (initData.byteLength !== boxSize && boxSize > 44) {\n    return null;\n  }\n  const type = view.getUint32(4);\n  if (type !== 0x70737368) {\n    return null;\n  }\n  result.version = view.getUint32(8) >>> 24;\n  if (result.version > 1) {\n    return null;\n  }\n  result.systemId = Hex.hexDump(new Uint8Array(initData, 12, 16));\n  const dataSizeOrKidCount = view.getUint32(28);\n  if (result.version === 0) {\n    if (boxSize - 32 < dataSizeOrKidCount) {\n      return null;\n    }\n    result.data = new Uint8Array(initData, 32, dataSizeOrKidCount);\n  } else if (result.version === 1) {\n    result.kids = [];\n    for (let i = 0; i < dataSizeOrKidCount; i++) {\n      result.kids.push(new Uint8Array(initData, 32 + i * 16, 16));\n    }\n  }\n  return result;\n}\n","import AESCrypto from './aes-crypto';\nimport FastAESKey from './fast-aes-key';\nimport AESDecryptor, { removePadding } from './aes-decryptor';\nimport { logger } from '../utils/logger';\nimport { appendUint8Array } from '../utils/mp4-tools';\nimport { sliceUint8 } from '../utils/typed-array';\nimport { DecrypterAesMode } from './decrypter-aes-mode';\nimport type { HlsConfig } from '../config';\n\nconst CHUNK_SIZE = 16; // 16 bytes, 128 bits\n\nexport default class Decrypter {\n  private logEnabled: boolean = true;\n  private removePKCS7Padding: boolean;\n  private subtle: SubtleCrypto | null = null;\n  private softwareDecrypter: AESDecryptor | null = null;\n  private key: ArrayBuffer | null = null;\n  private fastAesKey: FastAESKey | null = null;\n  private remainderData: Uint8Array | null = null;\n  private currentIV: ArrayBuffer | null = null;\n  private currentResult: ArrayBuffer | null = null;\n  private useSoftware: boolean;\n  private enableSoftwareAES: boolean;\n\n  constructor(config: HlsConfig, { removePKCS7Padding = true } = {}) {\n    this.enableSoftwareAES = config.enableSoftwareAES;\n    this.removePKCS7Padding = removePKCS7Padding;\n    // built in decryptor expects PKCS7 padding\n    if (removePKCS7Padding) {\n      try {\n        const browserCrypto = self.crypto;\n        if (browserCrypto) {\n          this.subtle =\n            browserCrypto.subtle ||\n            ((browserCrypto as any).webkitSubtle as SubtleCrypto);\n        }\n      } catch (e) {\n        /* no-op */\n      }\n    }\n    this.useSoftware = this.subtle === null;\n  }\n\n  destroy() {\n    this.subtle = null;\n    this.softwareDecrypter = null;\n    this.key = null;\n    this.fastAesKey = null;\n    this.remainderData = null;\n    this.currentIV = null;\n    this.currentResult = null;\n  }\n\n  public isSync() {\n    return this.useSoftware;\n  }\n\n  public flush(): Uint8Array | null {\n    const { currentResult, remainderData } = this;\n    if (!currentResult || remainderData) {\n      this.reset();\n      return null;\n    }\n    const data = new Uint8Array(currentResult);\n    this.reset();\n    if (this.removePKCS7Padding) {\n      return removePadding(data);\n    }\n    return data;\n  }\n\n  public reset() {\n    this.currentResult = null;\n    this.currentIV = null;\n    this.remainderData = null;\n    if (this.softwareDecrypter) {\n      this.softwareDecrypter = null;\n    }\n  }\n\n  public decrypt(\n    data: Uint8Array | ArrayBuffer,\n    key: ArrayBuffer,\n    iv: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ): Promise<ArrayBuffer> {\n    if (this.useSoftware) {\n      return new Promise((resolve, reject) => {\n        this.softwareDecrypt(new Uint8Array(data), key, iv, aesMode);\n        const decryptResult = this.flush();\n        if (decryptResult) {\n          resolve(decryptResult.buffer);\n        } else {\n          reject(new Error('[softwareDecrypt] Failed to decrypt data'));\n        }\n      });\n    }\n    return this.webCryptoDecrypt(new Uint8Array(data), key, iv, aesMode);\n  }\n\n  // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n  // data is handled in the flush() call\n  public softwareDecrypt(\n    data: Uint8Array,\n    key: ArrayBuffer,\n    iv: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ): ArrayBuffer | null {\n    const { currentIV, currentResult, remainderData } = this;\n    if (aesMode !== DecrypterAesMode.cbc || key.byteLength !== 16) {\n      logger.warn('SoftwareDecrypt: can only handle AES-128-CBC');\n      return null;\n    }\n    this.logOnce('JS AES decrypt');\n    // The output is staggered during progressive parsing - the current result is cached, and emitted on the next call\n    // This is done in order to strip PKCS7 padding, which is found at the end of each segment. We only know we've reached\n    // the end on flush(), but by that time we have already received all bytes for the segment.\n    // Progressive decryption does not work with WebCrypto\n\n    if (remainderData) {\n      data = appendUint8Array(remainderData, data);\n      this.remainderData = null;\n    }\n\n    // Byte length must be a multiple of 16 (AES-128 = 128 bit blocks = 16 bytes)\n    const currentChunk = this.getValidChunk(data);\n    if (!currentChunk.length) {\n      return null;\n    }\n\n    if (currentIV) {\n      iv = currentIV;\n    }\n\n    let softwareDecrypter = this.softwareDecrypter;\n    if (!softwareDecrypter) {\n      softwareDecrypter = this.softwareDecrypter = new AESDecryptor();\n    }\n    softwareDecrypter.expandKey(key);\n\n    const result = currentResult;\n\n    this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);\n    this.currentIV = sliceUint8(currentChunk, -16).buffer;\n\n    if (!result) {\n      return null;\n    }\n    return result;\n  }\n\n  public webCryptoDecrypt(\n    data: Uint8Array,\n    key: ArrayBuffer,\n    iv: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ): Promise<ArrayBuffer> {\n    const subtle = this.subtle;\n    if (this.key !== key || !this.fastAesKey) {\n      this.key = key;\n      this.fastAesKey = new FastAESKey(subtle, key, aesMode);\n    }\n    return this.fastAesKey\n      .expandKey()\n      .then((aesKey: CryptoKey) => {\n        // decrypt using web crypto\n        if (!subtle) {\n          return Promise.reject(new Error('web crypto not initialized'));\n        }\n        this.logOnce('WebCrypto AES decrypt');\n        const crypto = new AESCrypto(subtle, new Uint8Array(iv), aesMode);\n        return crypto.decrypt(data.buffer, aesKey);\n      })\n      .catch((err) => {\n        logger.warn(\n          `[decrypter]: WebCrypto Error, disable WebCrypto API, ${err.name}: ${err.message}`,\n        );\n\n        return this.onWebCryptoError(data, key, iv, aesMode);\n      });\n  }\n\n  private onWebCryptoError(data, key, iv, aesMode): ArrayBuffer | never {\n    const enableSoftwareAES = this.enableSoftwareAES;\n    if (enableSoftwareAES) {\n      this.useSoftware = true;\n      this.logEnabled = true;\n      this.softwareDecrypt(data, key, iv, aesMode);\n      const decryptResult = this.flush();\n      if (decryptResult) {\n        return decryptResult.buffer;\n      }\n    }\n    throw new Error(\n      'WebCrypto' +\n        (enableSoftwareAES ? ' and softwareDecrypt' : '') +\n        ': failed to decrypt data',\n    );\n  }\n\n  private getValidChunk(data: Uint8Array): Uint8Array {\n    let currentChunk = data;\n    const splitPoint = data.length - (data.length % CHUNK_SIZE);\n    if (splitPoint !== data.length) {\n      currentChunk = sliceUint8(data, 0, splitPoint);\n      this.remainderData = sliceUint8(data, splitPoint);\n    }\n    return currentChunk;\n  }\n\n  private logOnce(msg: string) {\n    if (!this.logEnabled) {\n      return;\n    }\n    logger.log(`[decrypter]: ${msg}`);\n    this.logEnabled = false;\n  }\n}\n","import type { RationalTimestamp } from '../utils/timescale-conversion';\n\nexport interface Demuxer {\n  demux(\n    data: Uint8Array,\n    timeOffset: number,\n    isSampleAes?: boolean,\n    flush?: boolean,\n  ): DemuxerResult;\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult>;\n  flush(timeOffset?: number): DemuxerResult | Promise<DemuxerResult>;\n  destroy(): void;\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  );\n  resetTimeStamp(defaultInitPTS?: RationalTimestamp | null): void;\n  resetContiguity(): void;\n}\n\nexport interface DemuxerResult {\n  audioTrack: DemuxedAudioTrack;\n  videoTrack: DemuxedVideoTrackBase;\n  id3Track: DemuxedMetadataTrack;\n  textTrack: DemuxedUserdataTrack;\n}\n\nexport interface DemuxedTrack {\n  type: string;\n  id: number;\n  pid: number;\n  inputTimeScale: number;\n  sequenceNumber: number;\n  samples:\n    | AudioSample[]\n    | VideoSample[]\n    | MetadataSample[]\n    | UserdataSample[]\n    | Uint8Array;\n  timescale?: number;\n  container?: string;\n  dropped: number;\n  duration?: number;\n  pesData?: ElementaryStreamData | null;\n  codec?: string;\n}\n\nexport interface PassthroughTrack extends DemuxedTrack {\n  sampleDuration: number;\n  samples: Uint8Array;\n  timescale: number;\n  duration: number;\n  codec: string;\n}\nexport interface DemuxedAudioTrack extends DemuxedTrack {\n  config?: number[] | Uint8Array;\n  samplerate?: number;\n  segmentCodec?: string;\n  channelCount?: number;\n  manifestCodec?: string;\n  parsedCodec?: string;\n  samples: AudioSample[];\n}\n\nexport interface DemuxedVideoTrackBase extends DemuxedTrack {\n  width?: number;\n  height?: number;\n  pixelRatio?: [number, number];\n  audFound?: boolean;\n  vps?: Uint8Array[];\n  pps?: Uint8Array[];\n  sps?: Uint8Array[];\n  naluState?: number;\n  segmentCodec?: string;\n  manifestCodec?: string;\n  samples: VideoSample[] | Uint8Array;\n  params?: object;\n}\n\nexport interface DemuxedVideoTrack extends DemuxedVideoTrackBase {\n  samples: VideoSample[];\n}\n\nexport interface DemuxedMetadataTrack extends DemuxedTrack {\n  samples: MetadataSample[];\n}\n\nexport interface DemuxedUserdataTrack extends DemuxedTrack {\n  samples: UserdataSample[];\n}\n\nexport const enum MetadataSchema {\n  audioId3 = 'org.id3',\n  dateRange = 'com.apple.quicktime.HLS',\n  emsg = 'https://aomedia.org/emsg/ID3',\n}\nexport interface MetadataSample {\n  pts: number;\n  dts: number;\n  duration: number;\n  len?: number;\n  data: Uint8Array;\n  type: MetadataSchema;\n}\n\nexport interface UserdataSample {\n  pts: number;\n  bytes?: Uint8Array;\n  type?: number;\n  payloadType?: number;\n  uuid?: string;\n  userData?: string;\n  userDataBytes?: Uint8Array;\n}\n\nexport interface VideoSample {\n  dts: number;\n  pts: number;\n  key: boolean;\n  frame: boolean;\n  units: VideoSampleUnit[];\n  debug: string;\n  length: number;\n}\n\nexport interface VideoSampleUnit {\n  data: Uint8Array;\n  type: number;\n  state?: number;\n}\n\nexport type AudioSample = {\n  unit: Uint8Array;\n  pts: number;\n};\n\nexport type AudioFrame = {\n  sample: AudioSample;\n  length: number;\n  missing: number;\n};\n\nexport interface ElementaryStreamData {\n  data: Uint8Array[];\n  size: number;\n}\n\nexport interface KeyData {\n  method: string;\n  key: Uint8Array;\n  iv: Uint8Array;\n}\n","import type { DemuxedTrack } from '../types/demuxer';\n\nexport function dummyTrack(type = '', inputTimeScale = 90000): DemuxedTrack {\n  return {\n    type,\n    id: -1,\n    pid: -1,\n    inputTimeScale,\n    sequenceNumber: -1,\n    samples: [],\n    dropped: 0,\n  };\n}\n","import * as ID3 from '../id3';\nimport {\n  DemuxerResult,\n  Demuxer,\n  DemuxedAudioTrack,\n  AudioFrame,\n  DemuxedMetadataTrack,\n  DemuxedVideoTrackBase,\n  DemuxedUserdataTrack,\n  KeyData,\n  MetadataSchema,\n} from '../../types/demuxer';\nimport { dummyTrack } from '../dummy-demuxed-track';\nimport { appendUint8Array } from '../../utils/mp4-tools';\nimport { sliceUint8 } from '../../utils/typed-array';\nimport { RationalTimestamp } from '../../utils/timescale-conversion';\n\nclass BaseAudioDemuxer implements Demuxer {\n  protected _audioTrack!: DemuxedAudioTrack;\n  protected _id3Track!: DemuxedMetadataTrack;\n  protected frameIndex: number = 0;\n  protected cachedData: Uint8Array | null = null;\n  protected basePTS: number | null = null;\n  protected initPTS: RationalTimestamp | null = null;\n  protected lastPTS: number | null = null;\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    this._id3Track = {\n      type: 'id3',\n      id: 3,\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0,\n    };\n  }\n\n  resetTimeStamp(deaultTimestamp: RationalTimestamp | null) {\n    this.initPTS = deaultTimestamp;\n    this.resetContiguity();\n  }\n\n  resetContiguity(): void {\n    this.basePTS = null;\n    this.lastPTS = null;\n    this.frameIndex = 0;\n  }\n\n  canParse(data: Uint8Array, offset: number): boolean {\n    return false;\n  }\n\n  appendFrame(\n    track: DemuxedAudioTrack,\n    data: Uint8Array,\n    offset: number,\n  ): AudioFrame | void {}\n\n  // feed incoming data to the front of the parsing pipeline\n  demux(data: Uint8Array, timeOffset: number): DemuxerResult {\n    if (this.cachedData) {\n      data = appendUint8Array(this.cachedData, data);\n      this.cachedData = null;\n    }\n\n    let id3Data: Uint8Array | undefined = ID3.getID3Data(data, 0);\n    let offset = id3Data ? id3Data.length : 0;\n    let lastDataIndex;\n    const track = this._audioTrack;\n    const id3Track = this._id3Track;\n    const timestamp = id3Data ? ID3.getTimeStamp(id3Data) : undefined;\n    const length = data.length;\n\n    if (\n      this.basePTS === null ||\n      (this.frameIndex === 0 && Number.isFinite(timestamp))\n    ) {\n      this.basePTS = initPTSFn(timestamp, timeOffset, this.initPTS);\n      this.lastPTS = this.basePTS;\n    }\n\n    if (this.lastPTS === null) {\n      this.lastPTS = this.basePTS;\n    }\n\n    // more expressive than alternative: id3Data?.length\n    if (id3Data && id3Data.length > 0) {\n      id3Track.samples.push({\n        pts: this.lastPTS,\n        dts: this.lastPTS,\n        data: id3Data,\n        type: MetadataSchema.audioId3,\n        duration: Number.POSITIVE_INFINITY,\n      });\n    }\n\n    while (offset < length) {\n      if (this.canParse(data, offset)) {\n        const frame = this.appendFrame(track, data, offset);\n        if (frame) {\n          this.frameIndex++;\n          this.lastPTS = frame.sample.pts;\n          offset += frame.length;\n          lastDataIndex = offset;\n        } else {\n          offset = length;\n        }\n      } else if (ID3.canParse(data, offset)) {\n        // after a ID3.canParse, a call to ID3.getID3Data *should* always returns some data\n        id3Data = ID3.getID3Data(data, offset)!;\n        id3Track.samples.push({\n          pts: this.lastPTS,\n          dts: this.lastPTS,\n          data: id3Data,\n          type: MetadataSchema.audioId3,\n          duration: Number.POSITIVE_INFINITY,\n        });\n        offset += id3Data.length;\n        lastDataIndex = offset;\n      } else {\n        offset++;\n      }\n      if (offset === length && lastDataIndex !== length) {\n        const partialData = sliceUint8(data, lastDataIndex);\n        if (this.cachedData) {\n          this.cachedData = appendUint8Array(this.cachedData, partialData);\n        } else {\n          this.cachedData = partialData;\n        }\n      }\n    }\n\n    return {\n      audioTrack: track,\n      videoTrack: dummyTrack() as DemuxedVideoTrackBase,\n      id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult> {\n    return Promise.reject(\n      new Error(\n        `[${this}] This demuxer does not support Sample-AES decryption`,\n      ),\n    );\n  }\n\n  flush(timeOffset: number): DemuxerResult {\n    // Parse cache in case of remaining frames.\n    const cachedData = this.cachedData;\n    if (cachedData) {\n      this.cachedData = null;\n      this.demux(cachedData, 0);\n    }\n\n    return {\n      audioTrack: this._audioTrack,\n      videoTrack: dummyTrack() as DemuxedVideoTrackBase,\n      id3Track: this._id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  destroy() {}\n}\n\n/**\n * Initialize PTS\n * <p>\n *    use timestamp unless it is undefined, NaN or Infinity\n * </p>\n */\nexport const initPTSFn = (\n  timestamp: number | undefined,\n  timeOffset: number,\n  initPTS: RationalTimestamp | null,\n): number => {\n  if (Number.isFinite(timestamp as number)) {\n    return timestamp! * 90;\n  }\n  const init90kHz = initPTS\n    ? (initPTS.baseTime * 90000) / initPTS.timescale\n    : 0;\n  return timeOffset * 90000 + init90kHz;\n};\nexport default BaseAudioDemuxer;\n","/**\n * ADTS parser helper\n * @link https://wiki.multimedia.cx/index.php?title=ADTS\n */\nimport { logger } from '../../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../../errors';\nimport type { HlsEventEmitter } from '../../events';\nimport { Events } from '../../events';\nimport type {\n  DemuxedAudioTrack,\n  AudioFrame,\n  AudioSample,\n} from '../../types/demuxer';\n\ntype AudioConfig = {\n  config: number[];\n  samplerate: number;\n  channelCount: number;\n  codec: string;\n  parsedCodec: string;\n  manifestCodec: string;\n};\n\ntype FrameHeader = {\n  headerLength: number;\n  frameLength: number;\n};\n\nexport function getAudioConfig(\n  observer: HlsEventEmitter,\n  data: Uint8Array,\n  offset: number,\n  audioCodec: string,\n): AudioConfig | void {\n  let adtsObjectType: number;\n  let originalAdtsObjectType: number;\n  let adtsExtensionSamplingIndex: number;\n  let adtsChannelConfig: number;\n  let config: number[];\n  const userAgent = navigator.userAgent.toLowerCase();\n  const manifestCodec = audioCodec;\n  const adtsSamplingRates = [\n    96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025,\n    8000, 7350,\n  ];\n  // byte 2\n  adtsObjectType = originalAdtsObjectType =\n    ((data[offset + 2] & 0xc0) >>> 6) + 1;\n  const adtsSamplingIndex = (data[offset + 2] & 0x3c) >>> 2;\n  if (adtsSamplingIndex > adtsSamplingRates.length - 1) {\n    const error = new Error(`invalid ADTS sampling index:${adtsSamplingIndex}`);\n    observer.emit(Events.ERROR, Events.ERROR, {\n      type: ErrorTypes.MEDIA_ERROR,\n      details: ErrorDetails.FRAG_PARSING_ERROR,\n      fatal: true,\n      error,\n      reason: error.message,\n    });\n    return;\n  }\n  adtsChannelConfig = (data[offset + 2] & 0x01) << 2;\n  // byte 3\n  adtsChannelConfig |= (data[offset + 3] & 0xc0) >>> 6;\n  logger.log(\n    `manifest codec:${audioCodec}, ADTS type:${adtsObjectType}, samplingIndex:${adtsSamplingIndex}`,\n  );\n  // Firefox and Pale Moon: freq less than 24kHz = AAC SBR (HE-AAC)\n  if (/firefox|palemoon/i.test(userAgent)) {\n    if (adtsSamplingIndex >= 6) {\n      adtsObjectType = 5;\n      config = new Array(4);\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSamplingIndex = adtsSamplingIndex - 3;\n    } else {\n      adtsObjectType = 2;\n      config = new Array(2);\n      adtsExtensionSamplingIndex = adtsSamplingIndex;\n    }\n    // Android : always use AAC\n  } else if (userAgent.indexOf('android') !== -1) {\n    adtsObjectType = 2;\n    config = new Array(2);\n    adtsExtensionSamplingIndex = adtsSamplingIndex;\n  } else {\n    /*  for other browsers (Chrome/Vivaldi/Opera ...)\n        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n    */\n    adtsObjectType = 5;\n    config = new Array(4);\n    // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n    if (\n      (audioCodec &&\n        (audioCodec.indexOf('mp4a.40.29') !== -1 ||\n          audioCodec.indexOf('mp4a.40.5') !== -1)) ||\n      (!audioCodec && adtsSamplingIndex >= 6)\n    ) {\n      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n      // there is a factor 2 between frame sample rate and output sample rate\n      // multiply frequency by 2 (see table below, equivalent to substract 3)\n      adtsExtensionSamplingIndex = adtsSamplingIndex - 3;\n    } else {\n      // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n      // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n      if (\n        (audioCodec &&\n          audioCodec.indexOf('mp4a.40.2') !== -1 &&\n          ((adtsSamplingIndex >= 6 && adtsChannelConfig === 1) ||\n            /vivaldi/i.test(userAgent))) ||\n        (!audioCodec && adtsChannelConfig === 1)\n      ) {\n        adtsObjectType = 2;\n        config = new Array(2);\n      }\n      adtsExtensionSamplingIndex = adtsSamplingIndex;\n    }\n  }\n  /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n    Audio Profile / Audio Object Type\n    0: Null\n    1: AAC Main\n    2: AAC LC (Low Complexity)\n    3: AAC SSR (Scalable Sample Rate)\n    4: AAC LTP (Long Term Prediction)\n    5: SBR (Spectral Band Replication)\n    6: AAC Scalable\n   sampling freq\n    0: 96000 Hz\n    1: 88200 Hz\n    2: 64000 Hz\n    3: 48000 Hz\n    4: 44100 Hz\n    5: 32000 Hz\n    6: 24000 Hz\n    7: 22050 Hz\n    8: 16000 Hz\n    9: 12000 Hz\n    10: 11025 Hz\n    11: 8000 Hz\n    12: 7350 Hz\n    13: Reserved\n    14: Reserved\n    15: frequency is written explictly\n    Channel Configurations\n    These are the channel configurations:\n    0: Defined in AOT Specifc Config\n    1: 1 channel: front-center\n    2: 2 channels: front-left, front-right\n  */\n  // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n  config[0] = adtsObjectType << 3;\n  // samplingFrequencyIndex\n  config[0] |= (adtsSamplingIndex & 0x0e) >> 1;\n  config[1] |= (adtsSamplingIndex & 0x01) << 7;\n  // channelConfiguration\n  config[1] |= adtsChannelConfig << 3;\n  if (adtsObjectType === 5) {\n    // adtsExtensionSamplingIndex\n    config[1] |= (adtsExtensionSamplingIndex & 0x0e) >> 1;\n    config[2] = (adtsExtensionSamplingIndex & 0x01) << 7;\n    // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n    //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n    config[2] |= 2 << 2;\n    config[3] = 0;\n  }\n  return {\n    config,\n    samplerate: adtsSamplingRates[adtsSamplingIndex],\n    channelCount: adtsChannelConfig,\n    codec: 'mp4a.40.' + adtsObjectType,\n    parsedCodec: 'mp4a.40.' + originalAdtsObjectType,\n    manifestCodec,\n  };\n}\n\nexport function isHeaderPattern(data: Uint8Array, offset: number): boolean {\n  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\n\nexport function getHeaderLength(data: Uint8Array, offset: number): number {\n  return data[offset + 1] & 0x01 ? 7 : 9;\n}\n\nexport function getFullFrameLength(data: Uint8Array, offset: number): number {\n  return (\n    ((data[offset + 3] & 0x03) << 11) |\n    (data[offset + 4] << 3) |\n    ((data[offset + 5] & 0xe0) >>> 5)\n  );\n}\n\nexport function canGetFrameLength(data: Uint8Array, offset: number): boolean {\n  return offset + 5 < data.length;\n}\n\nexport function isHeader(data: Uint8Array, offset: number): boolean {\n  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n  // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n  // More info https://wiki.multimedia.cx/index.php?title=ADTS\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\n\nexport function canParse(data: Uint8Array, offset: number): boolean {\n  return (\n    canGetFrameLength(data, offset) &&\n    isHeaderPattern(data, offset) &&\n    getFullFrameLength(data, offset) <= data.length - offset\n  );\n}\n\nexport function probe(data: Uint8Array, offset: number): boolean {\n  // same as isHeader but we also check that ADTS frame follows last ADTS frame\n  // or end of data is reached\n  if (isHeader(data, offset)) {\n    // ADTS header Length\n    const headerLength = getHeaderLength(data, offset);\n    if (offset + headerLength >= data.length) {\n      return false;\n    }\n    // ADTS frame Length\n    const frameLength = getFullFrameLength(data, offset);\n    if (frameLength <= headerLength) {\n      return false;\n    }\n\n    const newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n  return false;\n}\n\nexport function initTrackConfig(\n  track: DemuxedAudioTrack,\n  observer: HlsEventEmitter,\n  data: Uint8Array,\n  offset: number,\n  audioCodec: string,\n) {\n  if (!track.samplerate) {\n    const config = getAudioConfig(observer, data, offset, audioCodec);\n    if (!config) {\n      return;\n    }\n    track.config = config.config;\n    track.samplerate = config.samplerate;\n    track.channelCount = config.channelCount;\n    track.codec = config.codec;\n    track.manifestCodec = config.manifestCodec;\n    track.parsedCodec = config.parsedCodec;\n    logger.log(\n      `parsed codec:${track.parsedCodec}, codec:${track.codec}, rate:${config.samplerate}, channels:${config.channelCount}`,\n    );\n  }\n}\n\nexport function getFrameDuration(samplerate: number): number {\n  return (1024 * 90000) / samplerate;\n}\n\nexport function parseFrameHeader(\n  data: Uint8Array,\n  offset: number,\n): FrameHeader | void {\n  // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n  const headerLength = getHeaderLength(data, offset);\n  if (offset + headerLength <= data.length) {\n    // retrieve frame size\n    const frameLength = getFullFrameLength(data, offset) - headerLength;\n    if (frameLength > 0) {\n      // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}`);\n      return { headerLength, frameLength };\n    }\n  }\n}\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  offset: number,\n  pts: number,\n  frameIndex: number,\n): AudioFrame {\n  const frameDuration = getFrameDuration(track.samplerate as number);\n  const stamp = pts + frameIndex * frameDuration;\n  const header = parseFrameHeader(data, offset);\n  let unit: Uint8Array;\n  if (header) {\n    const { frameLength, headerLength } = header;\n    const length = headerLength + frameLength;\n    const missing = Math.max(0, offset + length - data.length);\n    // logger.log(`AAC frame ${frameIndex}, pts:${stamp} length@offset/total: ${frameLength}@${offset+headerLength}/${data.byteLength} missing: ${missing}`);\n    if (missing) {\n      unit = new Uint8Array(length - headerLength);\n      unit.set(data.subarray(offset + headerLength, data.length), 0);\n    } else {\n      unit = data.subarray(offset + headerLength, offset + length);\n    }\n\n    const sample: AudioSample = {\n      unit,\n      pts: stamp,\n    };\n    if (!missing) {\n      track.samples.push(sample as AudioSample);\n    }\n\n    return { sample, length, missing };\n  }\n  // overflow incomplete header\n  const length = data.length - offset;\n  unit = new Uint8Array(length);\n  unit.set(data.subarray(offset, data.length), 0);\n  const sample: AudioSample = {\n    unit,\n    pts: stamp,\n  };\n  return { sample, length, missing: -1 };\n}\n","/**\n *  MPEG parser helper\n */\nimport { DemuxedAudioTrack } from '../../types/demuxer';\n\nlet chromeVersion: number | null = null;\n\nconst BitratesMap = [\n  32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56,\n  64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80,\n  96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144,\n  160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144,\n  160,\n];\n\nconst SamplingRateMap = [\n  44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000,\n];\n\nconst SamplesCoefficients = [\n  // MPEG 2.5\n  [\n    0, // Reserved\n    72, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n  // Reserved\n  [\n    0, // Reserved\n    0, // Layer3\n    0, // Layer2\n    0, // Layer1\n  ],\n  // MPEG 2\n  [\n    0, // Reserved\n    72, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n  // MPEG 1\n  [\n    0, // Reserved\n    144, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n];\n\nconst BytesInSlot = [\n  0, // Reserved\n  1, // Layer3\n  1, // Layer2\n  4, // Layer1\n];\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  offset: number,\n  pts: number,\n  frameIndex: number,\n) {\n  // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n  if (offset + 24 > data.length) {\n    return;\n  }\n\n  const header = parseHeader(data, offset);\n  if (header && offset + header.frameLength <= data.length) {\n    const frameDuration = (header.samplesPerFrame * 90000) / header.sampleRate;\n    const stamp = pts + frameIndex * frameDuration;\n    const sample = {\n      unit: data.subarray(offset, offset + header.frameLength),\n      pts: stamp,\n      dts: stamp,\n    };\n\n    track.config = [];\n    track.channelCount = header.channelCount;\n    track.samplerate = header.sampleRate;\n    track.samples.push(sample);\n\n    return { sample, length: header.frameLength, missing: 0 };\n  }\n}\n\nexport function parseHeader(data: Uint8Array, offset: number) {\n  const mpegVersion = (data[offset + 1] >> 3) & 3;\n  const mpegLayer = (data[offset + 1] >> 1) & 3;\n  const bitRateIndex = (data[offset + 2] >> 4) & 15;\n  const sampleRateIndex = (data[offset + 2] >> 2) & 3;\n  if (\n    mpegVersion !== 1 &&\n    bitRateIndex !== 0 &&\n    bitRateIndex !== 15 &&\n    sampleRateIndex !== 3\n  ) {\n    const paddingBit = (data[offset + 2] >> 1) & 1;\n    const channelMode = data[offset + 3] >> 6;\n    const columnInBitrates =\n      mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;\n    const bitRate =\n      BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1000;\n    const columnInSampleRates =\n      mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;\n    const sampleRate =\n      SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];\n    const channelCount = channelMode === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n    const sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];\n    const bytesInSlot = BytesInSlot[mpegLayer];\n    const samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n    const frameLength =\n      Math.floor((sampleCoefficient * bitRate) / sampleRate + paddingBit) *\n      bytesInSlot;\n\n    if (chromeVersion === null) {\n      const userAgent = navigator.userAgent || '';\n      const result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n    const needChromeFix = !!chromeVersion && chromeVersion <= 87;\n\n    if (\n      needChromeFix &&\n      mpegLayer === 2 &&\n      bitRate >= 224000 &&\n      channelMode === 0\n    ) {\n      // Work around bug in Chromium by setting channelMode to dual-channel (01) instead of stereo (00)\n      data[offset + 3] = data[offset + 3] | 0x80;\n    }\n\n    return { sampleRate, channelCount, frameLength, samplesPerFrame };\n  }\n}\n\nexport function isHeaderPattern(data: Uint8Array, offset: number): boolean {\n  return (\n    data[offset] === 0xff &&\n    (data[offset + 1] & 0xe0) === 0xe0 &&\n    (data[offset + 1] & 0x06) !== 0x00\n  );\n}\n\nexport function isHeader(data: Uint8Array, offset: number): boolean {\n  // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n  // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n  // More info http://www.mp3-tech.org/programmer/frame_header.html\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\n\nexport function canParse(data: Uint8Array, offset: number): boolean {\n  const headerSize = 4;\n\n  return isHeaderPattern(data, offset) && headerSize <= data.length - offset;\n}\n\nexport function probe(data: Uint8Array, offset: number): boolean {\n  // same as isHeader but we also check that MPEG frame follows last MPEG frame\n  // or end of data is reached\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    // MPEG header Length\n    const headerLength = 4;\n    // MPEG frame Length\n    const header = parseHeader(data, offset);\n    let frameLength = headerLength;\n    if (header?.frameLength) {\n      frameLength = header.frameLength;\n    }\n\n    const newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n  return false;\n}\n","/**\n * AAC demuxer\n */\nimport BaseAudioDemuxer from './base-audio-demuxer';\nimport * as ADTS from './adts';\nimport * as MpegAudio from './mpegaudio';\nimport { logger } from '../../utils/logger';\nimport * as ID3 from '../id3';\nimport type { HlsEventEmitter } from '../../events';\nimport type { HlsConfig } from '../../config';\n\nclass AACDemuxer extends BaseAudioDemuxer {\n  private readonly observer: HlsEventEmitter;\n  private readonly config: HlsConfig;\n\n  constructor(observer, config) {\n    super();\n    this.observer = observer;\n    this.config = config;\n  }\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/adts',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'aac',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS\n  static probe(data: Uint8Array | undefined): boolean {\n    if (!data) {\n      return false;\n    }\n\n    // Check for the ADTS sync word\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n    const id3Data = ID3.getID3Data(data, 0);\n    let offset = id3Data?.length || 0;\n\n    if (MpegAudio.probe(data, offset)) {\n      return false;\n    }\n\n    for (let length = data.length; offset < length; offset++) {\n      if (ADTS.probe(data, offset)) {\n        logger.log('ADTS sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  canParse(data, offset) {\n    return ADTS.canParse(data, offset);\n  }\n\n  appendFrame(track, data, offset) {\n    ADTS.initTrackConfig(\n      track,\n      this.observer,\n      data,\n      offset,\n      track.manifestCodec,\n    );\n    const frame = ADTS.appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS as number,\n      this.frameIndex,\n    );\n    if (frame && frame.missing === 0) {\n      return frame;\n    }\n  }\n}\n\nexport default AACDemuxer;\n","/**\n * MP4 demuxer\n */\nimport {\n  Demuxer,\n  DemuxerResult,\n  PassthroughTrack,\n  DemuxedAudioTrack,\n  DemuxedUserdataTrack,\n  DemuxedMetadataTrack,\n  KeyData,\n  MetadataSchema,\n} from '../types/demuxer';\nimport {\n  findBox,\n  segmentValidRange,\n  appendUint8Array,\n  parseEmsg,\n  parseSamples,\n  parseInitSegment,\n  RemuxerTrackIdConfig,\n  hasMoofData,\n} from '../utils/mp4-tools';\nimport { dummyTrack } from './dummy-demuxed-track';\nimport type { HlsEventEmitter } from '../events';\nimport type { HlsConfig } from '../config';\n\nconst emsgSchemePattern = /\\/emsg[-/]ID3/i;\n\nclass MP4Demuxer implements Demuxer {\n  private remainderData: Uint8Array | null = null;\n  private timeOffset: number = 0;\n  private config: HlsConfig;\n  private videoTrack?: PassthroughTrack;\n  private audioTrack?: DemuxedAudioTrack;\n  private id3Track?: DemuxedMetadataTrack;\n  private txtTrack?: DemuxedUserdataTrack;\n\n  constructor(observer: HlsEventEmitter, config: HlsConfig) {\n    this.config = config;\n  }\n\n  public resetTimeStamp() {}\n\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    const videoTrack = (this.videoTrack = dummyTrack(\n      'video',\n      1,\n    ) as PassthroughTrack);\n    const audioTrack = (this.audioTrack = dummyTrack(\n      'audio',\n      1,\n    ) as DemuxedAudioTrack);\n    const captionTrack = (this.txtTrack = dummyTrack(\n      'text',\n      1,\n    ) as DemuxedUserdataTrack);\n\n    this.id3Track = dummyTrack('id3', 1) as DemuxedMetadataTrack;\n    this.timeOffset = 0;\n\n    if (!initSegment?.byteLength) {\n      return;\n    }\n    const initData = parseInitSegment(initSegment);\n\n    if (initData.video) {\n      const { id, timescale, codec } = initData.video;\n      videoTrack.id = id;\n      videoTrack.timescale = captionTrack.timescale = timescale;\n      videoTrack.codec = codec;\n    }\n\n    if (initData.audio) {\n      const { id, timescale, codec } = initData.audio;\n      audioTrack.id = id;\n      audioTrack.timescale = timescale;\n      audioTrack.codec = codec;\n    }\n\n    captionTrack.id = RemuxerTrackIdConfig.text;\n    videoTrack.sampleDuration = 0;\n    videoTrack.duration = audioTrack.duration = trackDuration;\n  }\n\n  public resetContiguity(): void {\n    this.remainderData = null;\n  }\n\n  static probe(data: Uint8Array) {\n    return hasMoofData(data);\n  }\n\n  public demux(data: Uint8Array, timeOffset: number): DemuxerResult {\n    this.timeOffset = timeOffset;\n    // Load all data into the avc track. The CMAF remuxer will look for the data in the samples object; the rest of the fields do not matter\n    let videoSamples = data;\n    const videoTrack = this.videoTrack as PassthroughTrack;\n    const textTrack = this.txtTrack as DemuxedUserdataTrack;\n    if (this.config.progressive) {\n      // Split the bytestream into two ranges: one encompassing all data up until the start of the last moof, and everything else.\n      // This is done to guarantee that we're sending valid data to MSE - when demuxing progressively, we have no guarantee\n      // that the fetch loader gives us flush moof+mdat pairs. If we push jagged data to MSE, it will throw an exception.\n      if (this.remainderData) {\n        videoSamples = appendUint8Array(this.remainderData, data);\n      }\n      const segmentedData = segmentValidRange(videoSamples);\n      this.remainderData = segmentedData.remainder;\n      videoTrack.samples = segmentedData.valid || new Uint8Array();\n    } else {\n      videoTrack.samples = videoSamples;\n    }\n\n    const id3Track = this.extractID3Track(videoTrack, timeOffset);\n    textTrack.samples = parseSamples(timeOffset, videoTrack);\n\n    return {\n      videoTrack,\n      audioTrack: this.audioTrack as DemuxedAudioTrack,\n      id3Track,\n      textTrack: this.txtTrack as DemuxedUserdataTrack,\n    };\n  }\n\n  public flush() {\n    const timeOffset = this.timeOffset;\n    const videoTrack = this.videoTrack as PassthroughTrack;\n    const textTrack = this.txtTrack as DemuxedUserdataTrack;\n    videoTrack.samples = this.remainderData || new Uint8Array();\n    this.remainderData = null;\n\n    const id3Track = this.extractID3Track(videoTrack, this.timeOffset);\n    textTrack.samples = parseSamples(timeOffset, videoTrack);\n\n    return {\n      videoTrack,\n      audioTrack: dummyTrack() as DemuxedAudioTrack,\n      id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  private extractID3Track(\n    videoTrack: PassthroughTrack,\n    timeOffset: number,\n  ): DemuxedMetadataTrack {\n    const id3Track = this.id3Track as DemuxedMetadataTrack;\n    if (videoTrack.samples.length) {\n      const emsgs = findBox(videoTrack.samples, ['emsg']);\n      if (emsgs) {\n        emsgs.forEach((data: Uint8Array) => {\n          const emsgInfo = parseEmsg(data);\n          if (emsgSchemePattern.test(emsgInfo.schemeIdUri)) {\n            const pts = Number.isFinite(emsgInfo.presentationTime)\n              ? emsgInfo.presentationTime! / emsgInfo.timeScale\n              : timeOffset +\n                emsgInfo.presentationTimeDelta! / emsgInfo.timeScale;\n            let duration =\n              emsgInfo.eventDuration === 0xffffffff\n                ? Number.POSITIVE_INFINITY\n                : emsgInfo.eventDuration / emsgInfo.timeScale;\n            // Safari takes anything <= 0.001 seconds and maps it to Infinity\n            if (duration <= 0.001) {\n              duration = Number.POSITIVE_INFINITY;\n            }\n            const payload = emsgInfo.payload;\n            id3Track.samples.push({\n              data: payload,\n              len: payload.byteLength,\n              dts: pts,\n              pts: pts,\n              type: MetadataSchema.emsg,\n              duration: duration,\n            });\n          }\n        });\n      }\n    }\n    return id3Track;\n  }\n\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult> {\n    return Promise.reject(\n      new Error('The MP4 demuxer does not support SAMPLE-AES decryption'),\n    );\n  }\n\n  destroy() {}\n}\n\nexport default MP4Demuxer;\n","export const getAudioBSID = (data: Uint8Array, offset: number): number => {\n  // check the bsid to confirm ac-3 | ec-3\n  let bsid = 0;\n  let numBits = 5;\n  offset += numBits;\n  const temp = new Uint32Array(1); // unsigned 32 bit for temporary storage\n  const mask = new Uint32Array(1); // unsigned 32 bit mask value\n  const byte = new Uint8Array(1); // unsigned 8 bit for temporary storage\n  while (numBits > 0) {\n    byte[0] = data[offset];\n    // read remaining bits, upto 8 bits at a time\n    const bits = Math.min(numBits, 8);\n    const shift = 8 - bits;\n    mask[0] = (0xff000000 >>> (24 + shift)) << shift;\n    temp[0] = (byte[0] & mask[0]) >> shift;\n    bsid = !bsid ? temp[0] : (bsid << bits) | temp[0];\n    offset += 1;\n    numBits -= bits;\n  }\n  return bsid;\n};\n","import BaseAudioDemuxer from './base-audio-demuxer';\nimport { getID3Data, getTimeStamp } from '../id3';\nimport { getAudioBSID } from './dolby';\nimport type { HlsEventEmitter } from '../../events';\nimport type { AudioFrame, DemuxedAudioTrack } from '../../types/demuxer';\n\nexport class AC3Demuxer extends BaseAudioDemuxer {\n  private readonly observer: HlsEventEmitter;\n\n  constructor(observer) {\n    super();\n    this.observer = observer;\n  }\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/ac-3',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'ac3',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  canParse(data: Uint8Array, offset: number): boolean {\n    return offset + 64 < data.length;\n  }\n\n  appendFrame(\n    track: DemuxedAudioTrack,\n    data: Uint8Array,\n    offset: number,\n  ): AudioFrame | void {\n    const frameLength = appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS as number,\n      this.frameIndex,\n    );\n    if (frameLength !== -1) {\n      const sample = track.samples[track.samples.length - 1];\n      return { sample, length: frameLength, missing: 0 };\n    }\n  }\n\n  static probe(data: Uint8Array | undefined): boolean {\n    if (!data) {\n      return false;\n    }\n\n    const id3Data = getID3Data(data, 0);\n    if (!id3Data) {\n      return false;\n    }\n\n    // look for the ac-3 sync bytes\n    const offset = id3Data.length;\n    if (\n      data[offset] === 0x0b &&\n      data[offset + 1] === 0x77 &&\n      getTimeStamp(id3Data) !== undefined &&\n      // check the bsid to confirm ac-3\n      getAudioBSID(data, offset) < 16\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  start: number,\n  pts: number,\n  frameIndex: number,\n): number {\n  if (start + 8 > data.length) {\n    return -1; // not enough bytes left\n  }\n\n  if (data[start] !== 0x0b || data[start + 1] !== 0x77) {\n    return -1; // invalid magic\n  }\n\n  // get sample rate\n  const samplingRateCode = data[start + 4] >> 6;\n  if (samplingRateCode >= 3) {\n    return -1; // invalid sampling rate\n  }\n\n  const samplingRateMap = [48000, 44100, 32000];\n  const sampleRate = samplingRateMap[samplingRateCode];\n\n  // get frame size\n  const frameSizeCode = data[start + 4] & 0x3f;\n  const frameSizeMap = [\n    64, 69, 96, 64, 70, 96, 80, 87, 120, 80, 88, 120, 96, 104, 144, 96, 105,\n    144, 112, 121, 168, 112, 122, 168, 128, 139, 192, 128, 140, 192, 160, 174,\n    240, 160, 175, 240, 192, 208, 288, 192, 209, 288, 224, 243, 336, 224, 244,\n    336, 256, 278, 384, 256, 279, 384, 320, 348, 480, 320, 349, 480, 384, 417,\n    576, 384, 418, 576, 448, 487, 672, 448, 488, 672, 512, 557, 768, 512, 558,\n    768, 640, 696, 960, 640, 697, 960, 768, 835, 1152, 768, 836, 1152, 896, 975,\n    1344, 896, 976, 1344, 1024, 1114, 1536, 1024, 1115, 1536, 1152, 1253, 1728,\n    1152, 1254, 1728, 1280, 1393, 1920, 1280, 1394, 1920,\n  ];\n\n  const frameLength = frameSizeMap[frameSizeCode * 3 + samplingRateCode] * 2;\n  if (start + frameLength > data.length) {\n    return -1;\n  }\n\n  // get channel count\n  const channelMode = data[start + 6] >> 5;\n  let skipCount = 0;\n  if (channelMode === 2) {\n    skipCount += 2;\n  } else {\n    if (channelMode & 1 && channelMode !== 1) {\n      skipCount += 2;\n    }\n    if (channelMode & 4) {\n      skipCount += 2;\n    }\n  }\n\n  const lfeon =\n    (((data[start + 6] << 8) | data[start + 7]) >> (12 - skipCount)) & 1;\n\n  const channelsMap = [2, 1, 2, 3, 3, 4, 4, 5];\n  const channelCount = channelsMap[channelMode] + lfeon;\n\n  // build dac3 box\n  const bsid = data[start + 5] >> 3;\n  const bsmod = data[start + 5] & 7;\n\n  const config = new Uint8Array([\n    (samplingRateCode << 6) | (bsid << 1) | (bsmod >> 2),\n    ((bsmod & 3) << 6) |\n      (channelMode << 3) |\n      (lfeon << 2) |\n      (frameSizeCode >> 4),\n    (frameSizeCode << 4) & 0xe0,\n  ]);\n\n  const frameDuration = (1536 / sampleRate) * 90000;\n  const stamp = pts + frameIndex * frameDuration;\n  const unit = data.subarray(start, start + frameLength);\n\n  track.config = config;\n  track.channelCount = channelCount;\n  track.samplerate = sampleRate;\n  track.samples.push({ unit, pts: stamp });\n\n  return frameLength;\n}\n","import type { ParsedVideoSample } from '../tsdemuxer';\nimport type {\n  DemuxedVideoTrack,\n  DemuxedUserdataTrack,\n  VideoSample,\n  VideoSampleUnit,\n} from '../../types/demuxer';\nimport type { PES } from '../tsdemuxer';\nimport { logger } from '../../utils/logger';\nimport { appendUint8Array } from '../../utils/mp4-tools';\n\nabstract class BaseVideoParser {\n  protected VideoSample: ParsedVideoSample | null = null;\n\n  protected createVideoSample(\n    key: boolean,\n    pts: number | undefined,\n    dts: number | undefined,\n    debug: string,\n  ): ParsedVideoSample {\n    return {\n      key,\n      frame: false,\n      pts,\n      dts,\n      units: [],\n      debug,\n      length: 0,\n    };\n  }\n\n  protected getLastNalUnit(\n    samples: VideoSample[],\n  ): VideoSampleUnit | undefined {\n    let VideoSample = this.VideoSample;\n    let lastUnit: VideoSampleUnit | undefined;\n    // try to fallback to previous sample if current one is empty\n    if (!VideoSample || VideoSample.units.length === 0) {\n      VideoSample = samples[samples.length - 1];\n    }\n    if (VideoSample?.units) {\n      const units = VideoSample.units;\n      lastUnit = units[units.length - 1];\n    }\n    return lastUnit;\n  }\n\n  protected pushAccessUnit(\n    VideoSample: ParsedVideoSample,\n    videoTrack: DemuxedVideoTrack,\n  ) {\n    if (VideoSample.units.length && VideoSample.frame) {\n      // if sample does not have PTS/DTS, patch with last sample PTS/DTS\n      if (VideoSample.pts === undefined) {\n        const samples = videoTrack.samples;\n        const nbSamples = samples.length;\n        if (nbSamples) {\n          const lastSample = samples[nbSamples - 1];\n          VideoSample.pts = lastSample.pts;\n          VideoSample.dts = lastSample.dts;\n        } else {\n          // dropping samples, no timestamp found\n          videoTrack.dropped++;\n          return;\n        }\n      }\n      videoTrack.samples.push(VideoSample as VideoSample);\n    }\n    if (VideoSample.debug.length) {\n      logger.log(\n        VideoSample.pts + '/' + VideoSample.dts + ':' + VideoSample.debug,\n      );\n    }\n  }\n\n  abstract parsePES(\n    track: DemuxedVideoTrack,\n    textTrack: DemuxedUserdataTrack,\n    pes: PES,\n    last: boolean,\n    duration: number,\n  );\n\n  protected abstract getNALuType(data: Uint8Array, offset: number): number;\n\n  protected parseNALu(\n    track: DemuxedVideoTrack,\n    array: Uint8Array,\n  ): Array<{\n    data: Uint8Array;\n    type: number;\n    state?: number;\n  }> {\n    const len = array.byteLength;\n    let state = track.naluState || 0;\n    const lastState = state;\n    const units: VideoSampleUnit[] = [];\n    let i = 0;\n    let value: number;\n    let overflow: number;\n    let unitType: number;\n    let lastUnitStart = -1;\n    let lastUnitType: number = 0;\n    // logger.log('PES:' + Hex.hexDump(array));\n\n    if (state === -1) {\n      // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n      lastUnitStart = 0;\n      // NALu type is value read from offset 0\n      lastUnitType = this.getNALuType(array, 0);\n      state = 0;\n      i = 1;\n    }\n\n    while (i < len) {\n      value = array[i++];\n      // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n      if (!state) {\n        state = value ? 0 : 1;\n        continue;\n      }\n      if (state === 1) {\n        state = value ? 0 : 2;\n        continue;\n      }\n      // here we have state either equal to 2 or 3\n      if (!value) {\n        state = 3;\n      } else if (value === 1) {\n        overflow = i - state - 1;\n        if (lastUnitStart >= 0) {\n          const unit: VideoSampleUnit = {\n            data: array.subarray(lastUnitStart, overflow),\n            type: lastUnitType,\n          };\n          // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n          units.push(unit);\n        } else {\n          // lastUnitStart is undefined => this is the first start code found in this PES packet\n          // first check if start code delimiter is overlapping between 2 PES packets,\n          // ie it started in last packet (lastState not zero)\n          // and ended at the beginning of this PES packet (i <= 4 - lastState)\n          const lastUnit = this.getLastNalUnit(track.samples);\n          if (lastUnit) {\n            if (lastState && i <= 4 - lastState) {\n              // start delimiter overlapping between PES packets\n              // strip start delimiter bytes from the end of last NAL unit\n              // check if lastUnit had a state different from zero\n              if (lastUnit.state) {\n                // strip last bytes\n                lastUnit.data = lastUnit.data.subarray(\n                  0,\n                  lastUnit.data.byteLength - lastState,\n                );\n              }\n            }\n            // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n\n            if (overflow > 0) {\n              // logger.log('first NALU found with overflow:' + overflow);\n              lastUnit.data = appendUint8Array(\n                lastUnit.data,\n                array.subarray(0, overflow),\n              );\n              lastUnit.state = 0;\n            }\n          }\n        }\n        // check if we can read unit type\n        if (i < len) {\n          unitType = this.getNALuType(array, i);\n          // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n          lastUnitStart = i;\n          lastUnitType = unitType;\n          state = 0;\n        } else {\n          // not enough byte to read unit type. let's read it on next PES parsing\n          state = -1;\n        }\n      } else {\n        state = 0;\n      }\n    }\n    if (lastUnitStart >= 0 && state >= 0) {\n      const unit: VideoSampleUnit = {\n        data: array.subarray(lastUnitStart, len),\n        type: lastUnitType,\n        state: state,\n      };\n      units.push(unit);\n      // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n    }\n    // no NALu found\n    if (units.length === 0) {\n      // append pes.data to previous NAL unit\n      const lastUnit = this.getLastNalUnit(track.samples);\n      if (lastUnit) {\n        lastUnit.data = appendUint8Array(lastUnit.data, array);\n      }\n    }\n    track.naluState = state;\n    return units;\n  }\n}\n\nexport default BaseVideoParser;\n","/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n */\n\nimport { logger } from '../../utils/logger';\n\nclass ExpGolomb {\n  private data: Uint8Array;\n  public bytesAvailable: number;\n  private word: number;\n  private bitsAvailable: number;\n\n  constructor(data: Uint8Array) {\n    this.data = data;\n    // the number of bytes left to examine in this.data\n    this.bytesAvailable = data.byteLength;\n    // the current word being examined\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n    this.bitsAvailable = 0; // :uint\n  }\n\n  // ():void\n  loadWord(): void {\n    const data = this.data;\n    const bytesAvailable = this.bytesAvailable;\n    const position = data.byteLength - bytesAvailable;\n    const workingBytes = new Uint8Array(4);\n    const availableBytes = Math.min(4, bytesAvailable);\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(data.subarray(position, position + availableBytes));\n    this.word = new DataView(workingBytes.buffer).getUint32(0);\n    // track the amount of this.data that has been processed\n    this.bitsAvailable = availableBytes * 8;\n    this.bytesAvailable -= availableBytes;\n  }\n\n  // (count:int):void\n  skipBits(count: number): void {\n    let skipBytes; // :int\n    count = Math.min(count, this.bytesAvailable * 8 + this.bitsAvailable);\n    if (this.bitsAvailable > count) {\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    } else {\n      count -= this.bitsAvailable;\n      skipBytes = count >> 3;\n      count -= skipBytes << 3;\n      this.bytesAvailable -= skipBytes;\n      this.loadWord();\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    }\n  }\n\n  // (size:int):uint\n  readBits(size: number): number {\n    let bits = Math.min(this.bitsAvailable, size); // :uint\n    const valu = this.word >>> (32 - bits); // :uint\n    if (size > 32) {\n      logger.error('Cannot read more than 32 bits at a time');\n    }\n\n    this.bitsAvailable -= bits;\n    if (this.bitsAvailable > 0) {\n      this.word <<= bits;\n    } else if (this.bytesAvailable > 0) {\n      this.loadWord();\n    } else {\n      throw new Error('no bits available');\n    }\n\n    bits = size - bits;\n    if (bits > 0 && this.bitsAvailable) {\n      return (valu << bits) | this.readBits(bits);\n    } else {\n      return valu;\n    }\n  }\n\n  // ():uint\n  skipLZ(): number {\n    let leadingZeroCount; // :uint\n    for (\n      leadingZeroCount = 0;\n      leadingZeroCount < this.bitsAvailable;\n      ++leadingZeroCount\n    ) {\n      if ((this.word & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        this.word <<= leadingZeroCount;\n        this.bitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n    // we exhausted word and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLZ();\n  }\n\n  // ():void\n  skipUEG(): void {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():void\n  skipEG(): void {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():uint\n  readUEG(): number {\n    const clz = this.skipLZ(); // :uint\n    return this.readBits(clz + 1) - 1;\n  }\n\n  // ():int\n  readEG(): number {\n    const valu = this.readUEG(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    } else {\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n  }\n\n  // Some convenience functions\n  // :Boolean\n  readBoolean(): boolean {\n    return this.readBits(1) === 1;\n  }\n\n  // ():int\n  readUByte(): number {\n    return this.readBits(8);\n  }\n\n  // ():int\n  readUShort(): number {\n    return this.readBits(16);\n  }\n\n  // ():int\n  readUInt(): number {\n    return this.readBits(32);\n  }\n}\n\nexport default ExpGolomb;\n","import BaseVideoParser from './base-video-parser';\nimport type {\n  DemuxedVideoTrack,\n  DemuxedUserdataTrack,\n} from '../../types/demuxer';\nimport { parseSEIMessageFromNALu } from '../../utils/mp4-tools';\n\nimport type { PES } from '../tsdemuxer';\n\nimport ExpGolomb from './exp-golomb';\n\nclass AvcVideoParser extends BaseVideoParser {\n  public parsePES(\n    track: DemuxedVideoTrack,\n    textTrack: DemuxedUserdataTrack,\n    pes: PES,\n    last: boolean,\n    duration: number,\n  ) {\n    const units = this.parseNALu(track, pes.data);\n    const debug = false;\n    let VideoSample = this.VideoSample;\n    let push: boolean;\n    let spsfound = false;\n    // free pes.data to save up some memory\n    (pes as any).data = null;\n\n    // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n    if (VideoSample && units.length && !track.audFound) {\n      this.pushAccessUnit(VideoSample, track);\n      VideoSample = this.VideoSample = this.createVideoSample(\n        false,\n        pes.pts,\n        pes.dts,\n        '',\n      );\n    }\n\n    units.forEach((unit) => {\n      switch (unit.type) {\n        // NDR\n        case 1: {\n          let iskey = false;\n          push = true;\n          const data = unit.data;\n          // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n          if (spsfound && data.length > 4) {\n            // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n            const sliceType = this.readSliceType(data);\n            // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n            // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n            // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n            // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n            // if (sliceType === 2 || sliceType === 7) {\n            if (\n              sliceType === 2 ||\n              sliceType === 4 ||\n              sliceType === 7 ||\n              sliceType === 9\n            ) {\n              iskey = true;\n            }\n          }\n\n          if (iskey) {\n            // if we have non-keyframe data already, that cannot belong to the same frame as a keyframe, so force a push\n            if (VideoSample?.frame && !VideoSample.key) {\n              this.pushAccessUnit(VideoSample, track);\n              VideoSample = this.VideoSample = null;\n            }\n          }\n\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n              '',\n            );\n          }\n\n          if (debug) {\n            VideoSample.debug += 'NDR ';\n          }\n\n          VideoSample.frame = true;\n          VideoSample.key = iskey;\n\n          break;\n          // IDR\n        }\n        case 5:\n          push = true;\n          // handle PES not starting with AUD\n          // if we have frame data already, that cannot belong to the same frame, so force a push\n          if (VideoSample?.frame && !VideoSample.key) {\n            this.pushAccessUnit(VideoSample, track);\n            VideoSample = this.VideoSample = null;\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n              '',\n            );\n          }\n\n          if (debug) {\n            VideoSample.debug += 'IDR ';\n          }\n\n          VideoSample.key = true;\n          VideoSample.frame = true;\n          break;\n        // SEI\n        case 6: {\n          push = true;\n          if (debug && VideoSample) {\n            VideoSample.debug += 'SEI ';\n          }\n          parseSEIMessageFromNALu(\n            unit.data,\n            1,\n            pes.pts as number,\n            textTrack.samples,\n          );\n          break;\n          // SPS\n        }\n        case 7: {\n          push = true;\n          spsfound = true;\n          if (debug && VideoSample) {\n            VideoSample.debug += 'SPS ';\n          }\n          const sps = unit.data;\n          const config = this.readSPS(sps);\n          if (\n            !track.sps ||\n            track.width !== config.width ||\n            track.height !== config.height ||\n            track.pixelRatio?.[0] !== config.pixelRatio[0] ||\n            track.pixelRatio?.[1] !== config.pixelRatio[1]\n          ) {\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelRatio;\n            track.sps = [sps];\n            track.duration = duration;\n            const codecarray = sps.subarray(1, 4);\n            let codecstring = 'avc1.';\n            for (let i = 0; i < 3; i++) {\n              let h = codecarray[i].toString(16);\n              if (h.length < 2) {\n                h = '0' + h;\n              }\n\n              codecstring += h;\n            }\n            track.codec = codecstring;\n          }\n          break;\n        }\n        // PPS\n        case 8:\n          push = true;\n          if (debug && VideoSample) {\n            VideoSample.debug += 'PPS ';\n          }\n\n          track.pps = [unit.data];\n\n          break;\n        // AUD\n        case 9:\n          push = true;\n          track.audFound = true;\n          if (VideoSample) {\n            this.pushAccessUnit(VideoSample, track);\n          }\n\n          VideoSample = this.VideoSample = this.createVideoSample(\n            false,\n            pes.pts,\n            pes.dts,\n            debug ? 'AUD ' : '',\n          );\n          break;\n        // Filler Data\n        case 12:\n          push = true;\n          break;\n        default:\n          push = false;\n          if (VideoSample) {\n            VideoSample.debug += 'unknown NAL ' + unit.type + ' ';\n          }\n\n          break;\n      }\n      if (VideoSample && push) {\n        const units = VideoSample.units;\n        units.push(unit);\n      }\n    });\n    // if last PES packet, push samples\n    if (last && VideoSample) {\n      this.pushAccessUnit(VideoSample, track);\n      this.VideoSample = null;\n    }\n  }\n\n  protected getNALuType(data: Uint8Array, offset: number): number {\n    return data[offset] & 0x1f;\n  }\n\n  readSliceType(data: Uint8Array) {\n    const eg = new ExpGolomb(data);\n    // skip NALu type\n    eg.readUByte();\n    // discard first_mb_in_slice\n    eg.readUEG();\n    // return slice_type\n    return eg.readUEG();\n  }\n\n  /**\n   * The scaling list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count the number of entries in this scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList(count: number, reader: ExpGolomb): void {\n    let lastScale = 8;\n    let nextScale = 8;\n    let deltaScale;\n    for (let j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = reader.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n      lastScale = nextScale === 0 ? lastScale : nextScale;\n    }\n  }\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @returns an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSPS(sps: Uint8Array): {\n    width: number;\n    height: number;\n    pixelRatio: [number, number];\n  } {\n    const eg = new ExpGolomb(sps);\n    let frameCropLeftOffset = 0;\n    let frameCropRightOffset = 0;\n    let frameCropTopOffset = 0;\n    let frameCropBottomOffset = 0;\n    let numRefFramesInPicOrderCntCycle;\n    let scalingListCount;\n    let i;\n    const readUByte = eg.readUByte.bind(eg);\n    const readBits = eg.readBits.bind(eg);\n    const readUEG = eg.readUEG.bind(eg);\n    const readBoolean = eg.readBoolean.bind(eg);\n    const skipBits = eg.skipBits.bind(eg);\n    const skipEG = eg.skipEG.bind(eg);\n    const skipUEG = eg.skipUEG.bind(eg);\n    const skipScalingList = this.skipScalingList.bind(this);\n\n    readUByte();\n    const profileIdc = readUByte(); // profile_idc\n    readBits(5); // profileCompat constraint_set[0-4]_flag, u(5)\n    skipBits(3); // reserved_zero_3bits u(3),\n    readUByte(); // level_idc u(8)\n    skipUEG(); // seq_parameter_set_id\n    // some profiles have more optional data we don't need\n    if (\n      profileIdc === 100 ||\n      profileIdc === 110 ||\n      profileIdc === 122 ||\n      profileIdc === 244 ||\n      profileIdc === 44 ||\n      profileIdc === 83 ||\n      profileIdc === 86 ||\n      profileIdc === 118 ||\n      profileIdc === 128\n    ) {\n      const chromaFormatIdc = readUEG();\n      if (chromaFormatIdc === 3) {\n        skipBits(1);\n      } // separate_colour_plane_flag\n\n      skipUEG(); // bit_depth_luma_minus8\n      skipUEG(); // bit_depth_chroma_minus8\n      skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (readBoolean()) {\n        // seq_scaling_matrix_present_flag\n        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (readBoolean()) {\n            // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, eg);\n            } else {\n              skipScalingList(64, eg);\n            }\n          }\n        }\n      }\n    }\n    skipUEG(); // log2_max_frame_num_minus4\n    const picOrderCntType = readUEG();\n    if (picOrderCntType === 0) {\n      readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      skipBits(1); // delta_pic_order_always_zero_flag\n      skipEG(); // offset_for_non_ref_pic\n      skipEG(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = readUEG();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        skipEG();\n      } // offset_for_ref_frame[ i ]\n    }\n    skipUEG(); // max_num_ref_frames\n    skipBits(1); // gaps_in_frame_num_value_allowed_flag\n    const picWidthInMbsMinus1 = readUEG();\n    const picHeightInMapUnitsMinus1 = readUEG();\n    const frameMbsOnlyFlag = readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      skipBits(1);\n    } // mb_adaptive_frame_field_flag\n\n    skipBits(1); // direct_8x8_inference_flag\n    if (readBoolean()) {\n      // frame_cropping_flag\n      frameCropLeftOffset = readUEG();\n      frameCropRightOffset = readUEG();\n      frameCropTopOffset = readUEG();\n      frameCropBottomOffset = readUEG();\n    }\n    let pixelRatio: [number, number] = [1, 1];\n    if (readBoolean()) {\n      // vui_parameters_present_flag\n      if (readBoolean()) {\n        // aspect_ratio_info_present_flag\n        const aspectRatioIdc = readUByte();\n        switch (aspectRatioIdc) {\n          case 1:\n            pixelRatio = [1, 1];\n            break;\n          case 2:\n            pixelRatio = [12, 11];\n            break;\n          case 3:\n            pixelRatio = [10, 11];\n            break;\n          case 4:\n            pixelRatio = [16, 11];\n            break;\n          case 5:\n            pixelRatio = [40, 33];\n            break;\n          case 6:\n            pixelRatio = [24, 11];\n            break;\n          case 7:\n            pixelRatio = [20, 11];\n            break;\n          case 8:\n            pixelRatio = [32, 11];\n            break;\n          case 9:\n            pixelRatio = [80, 33];\n            break;\n          case 10:\n            pixelRatio = [18, 11];\n            break;\n          case 11:\n            pixelRatio = [15, 11];\n            break;\n          case 12:\n            pixelRatio = [64, 33];\n            break;\n          case 13:\n            pixelRatio = [160, 99];\n            break;\n          case 14:\n            pixelRatio = [4, 3];\n            break;\n          case 15:\n            pixelRatio = [3, 2];\n            break;\n          case 16:\n            pixelRatio = [2, 1];\n            break;\n          case 255: {\n            pixelRatio = [\n              (readUByte() << 8) | readUByte(),\n              (readUByte() << 8) | readUByte(),\n            ];\n            break;\n          }\n        }\n      }\n    }\n    return {\n      width: Math.ceil(\n        (picWidthInMbsMinus1 + 1) * 16 -\n          frameCropLeftOffset * 2 -\n          frameCropRightOffset * 2,\n      ),\n      height:\n        (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 -\n        (frameMbsOnlyFlag ? 2 : 4) *\n          (frameCropTopOffset + frameCropBottomOffset),\n      pixelRatio: pixelRatio,\n    };\n  }\n}\n\nexport default AvcVideoParser;\n","import BaseVideoParser from './base-video-parser';\nimport { DemuxedVideoTrack, DemuxedUserdataTrack } from '../../types/demuxer';\nimport { parseSEIMessageFromNALu } from '../../utils/mp4-tools';\n\nimport type { PES } from '../tsdemuxer';\n\nimport ExpGolomb from './exp-golomb';\n\nclass HevcVideoParser extends BaseVideoParser {\n  protected initVPS: Uint8Array | null = null;\n\n  public parsePES(\n    track: DemuxedVideoTrack,\n    textTrack: DemuxedUserdataTrack,\n    pes: PES,\n    last: boolean,\n    duration: number,\n  ) {\n    const units = this.parseNALu(track, pes.data);\n    const debug = false;\n    let VideoSample = this.VideoSample;\n    let push: boolean;\n    let spsfound = false;\n    // free pes.data to save up some memory\n    (pes as any).data = null;\n\n    // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n    if (VideoSample && units.length && !track.audFound) {\n      this.pushAccessUnit(VideoSample, track);\n      VideoSample = this.VideoSample = this.createVideoSample(\n        false,\n        pes.pts,\n        pes.dts,\n        '',\n      );\n    }\n\n    units.forEach((unit) => {\n      switch (unit.type) {\n        // NON-IDR, NON RANDOM ACCESS SLICE\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              false,\n              pes.pts,\n              pes.dts,\n              '',\n            );\n          }\n          if (debug) {\n            VideoSample.debug += 'NDR ';\n          }\n          VideoSample.frame = true;\n          push = true;\n          break;\n\n        // CRA, BLA (random access picture)\n        case 16:\n        case 17:\n        case 18:\n        case 21:\n          push = true;\n          if (spsfound) {\n            // handle PES not starting with AUD\n            // if we have frame data already, that cannot belong to the same frame, so force a push\n            if (VideoSample?.frame && !VideoSample.key) {\n              this.pushAccessUnit(VideoSample, track);\n              VideoSample = this.VideoSample = null;\n            }\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n              '',\n            );\n          }\n\n          if (debug) {\n            VideoSample.debug += 'RAP ';\n          }\n\n          VideoSample.key = true;\n          VideoSample.frame = true;\n          break;\n\n        // IDR\n        case 19:\n        case 20:\n          push = true;\n          // handle PES not starting with AUD\n          // if we have frame data already, that cannot belong to the same frame, so force a push\n          if (VideoSample?.frame && !VideoSample.key) {\n            this.pushAccessUnit(VideoSample, track);\n            VideoSample = this.VideoSample = null;\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n              '',\n            );\n          }\n\n          if (debug) {\n            VideoSample.debug += 'IDR ';\n          }\n          VideoSample.key = true;\n          VideoSample.frame = true;\n          break;\n\n        // SEI\n        case 39:\n          push = true;\n          if (debug && VideoSample) {\n            VideoSample.debug += 'SEI ';\n          }\n          parseSEIMessageFromNALu(\n            unit.data,\n            2, // NALu header size\n            pes.pts as number,\n            textTrack.samples,\n          );\n          break;\n\n        // VPS\n        case 32:\n          push = true;\n          if (debug && VideoSample) {\n            VideoSample.debug += 'VPS ';\n          }\n          if (!track.vps) {\n            const config = this.readVPS(unit.data);\n            track.params = { ...config };\n            this.initVPS = unit.data;\n          }\n          track.vps = [unit.data];\n          break;\n\n        // SPS\n        case 33:\n          push = true;\n          spsfound = true;\n          if (debug && VideoSample) {\n            VideoSample.debug += 'SPS ';\n          }\n          if (typeof track.params === 'object') {\n            if (\n              track.vps !== undefined &&\n              track.vps[0] !== this.initVPS &&\n              track.sps !== undefined &&\n              !this.matchSPS(track.sps[0], unit.data)\n            ) {\n              this.initVPS = track.vps[0];\n              track.sps = track.pps = undefined;\n            }\n            if (!track.sps) {\n              const config = this.readSPS(unit.data);\n              track.width = config.width;\n              track.height = config.height;\n              track.pixelRatio = config.pixelRatio;\n              track.duration = duration;\n              track.codec = config.codecString;\n              track.sps = [];\n              for (const prop in config.params) {\n                track.params[prop] = config.params[prop];\n              }\n            }\n            if (track.vps !== undefined && track.vps[0] === this.initVPS) {\n              track.sps.push(unit.data);\n            }\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n              '',\n            );\n          }\n          VideoSample.key = true;\n          break;\n\n        // PPS\n        case 34:\n          push = true;\n          if (debug && VideoSample) {\n            VideoSample.debug += 'PPS ';\n          }\n          if (typeof track.params === 'object') {\n            if (!track.pps) {\n              track.pps = [];\n              const config = this.readPPS(unit.data);\n              for (const prop in config) {\n                track.params[prop] = config[prop];\n              }\n            }\n            if (this.initVPS !== null || track.pps.length === 0) {\n              track.pps.push(unit.data);\n            }\n          }\n          break;\n\n        // ACCESS UNIT DELIMITER\n        case 35:\n          push = true;\n          track.audFound = true;\n          if (VideoSample) {\n            this.pushAccessUnit(VideoSample, track);\n          }\n          VideoSample = this.VideoSample = this.createVideoSample(\n            false,\n            pes.pts,\n            pes.dts,\n            debug ? 'AUD ' : '',\n          );\n          break;\n\n        default:\n          push = false;\n          if (VideoSample) {\n            VideoSample.debug += 'unknown or irrelevant NAL ' + unit.type + ' ';\n          }\n          break;\n      }\n      if (VideoSample && push) {\n        const units = VideoSample.units;\n        units.push(unit);\n      }\n    });\n    // if last PES packet, push samples\n    if (last && VideoSample) {\n      this.pushAccessUnit(VideoSample, track);\n      this.VideoSample = null;\n    }\n  }\n\n  protected getNALuType(data: Uint8Array, offset: number): number {\n    return (data[offset] & 0x7e) >>> 1;\n  }\n\n  protected ebsp2rbsp(arr: Uint8Array): Uint8Array {\n    const dst = new Uint8Array(arr.byteLength);\n    let dstIdx = 0;\n    for (let i = 0; i < arr.byteLength; i++) {\n      if (i >= 2) {\n        // Unescape: Skip 0x03 after 00 00\n        if (arr[i] === 0x03 && arr[i - 1] === 0x00 && arr[i - 2] === 0x00) {\n          continue;\n        }\n      }\n      dst[dstIdx] = arr[i];\n      dstIdx++;\n    }\n    return new Uint8Array(dst.buffer, 0, dstIdx);\n  }\n\n  readVPS(vps: Uint8Array): {\n    numTemporalLayers: number;\n    temporalIdNested: boolean;\n  } {\n    const eg = new ExpGolomb(vps);\n    // remove header\n    eg.readUByte();\n    eg.readUByte();\n\n    eg.readBits(4); // video_parameter_set_id\n    eg.skipBits(2);\n    eg.readBits(6); // max_layers_minus1\n    const max_sub_layers_minus1 = eg.readBits(3);\n    const temporal_id_nesting_flag = eg.readBoolean();\n    // ...vui fps can be here, but empty fps value is not critical for metadata\n\n    return {\n      numTemporalLayers: max_sub_layers_minus1 + 1,\n      temporalIdNested: temporal_id_nesting_flag,\n    };\n  }\n\n  readSPS(sps: Uint8Array): {\n    codecString: string;\n    params: object;\n    width: number;\n    height: number;\n    pixelRatio: [number, number];\n  } {\n    const eg = new ExpGolomb(this.ebsp2rbsp(sps));\n    eg.readUByte();\n    eg.readUByte();\n\n    eg.readBits(4); //video_parameter_set_id\n    const max_sub_layers_minus1 = eg.readBits(3);\n    eg.readBoolean(); // temporal_id_nesting_flag\n\n    // profile_tier_level\n    const general_profile_space = eg.readBits(2);\n    const general_tier_flag = eg.readBoolean();\n    const general_profile_idc = eg.readBits(5);\n    const general_profile_compatibility_flags_1 = eg.readUByte();\n    const general_profile_compatibility_flags_2 = eg.readUByte();\n    const general_profile_compatibility_flags_3 = eg.readUByte();\n    const general_profile_compatibility_flags_4 = eg.readUByte();\n    const general_constraint_indicator_flags_1 = eg.readUByte();\n    const general_constraint_indicator_flags_2 = eg.readUByte();\n    const general_constraint_indicator_flags_3 = eg.readUByte();\n    const general_constraint_indicator_flags_4 = eg.readUByte();\n    const general_constraint_indicator_flags_5 = eg.readUByte();\n    const general_constraint_indicator_flags_6 = eg.readUByte();\n    const general_level_idc = eg.readUByte();\n    const sub_layer_profile_present_flags: boolean[] = [];\n    const sub_layer_level_present_flags: boolean[] = [];\n    for (let i = 0; i < max_sub_layers_minus1; i++) {\n      sub_layer_profile_present_flags.push(eg.readBoolean());\n      sub_layer_level_present_flags.push(eg.readBoolean());\n    }\n    if (max_sub_layers_minus1 > 0) {\n      for (let i = max_sub_layers_minus1; i < 8; i++) {\n        eg.readBits(2);\n      }\n    }\n    for (let i = 0; i < max_sub_layers_minus1; i++) {\n      if (sub_layer_profile_present_flags[i]) {\n        eg.readUByte(); // sub_layer_profile_space, sub_layer_tier_flag, sub_layer_profile_idc\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte(); // sub_layer_profile_compatibility_flag\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n      }\n      if (sub_layer_level_present_flags[i]) {\n        eg.readUByte();\n      }\n    }\n\n    eg.readUEG(); // seq_parameter_set_id\n    const chroma_format_idc = eg.readUEG();\n    if (chroma_format_idc == 3) {\n      eg.skipBits(1); //separate_colour_plane_flag\n    }\n    const pic_width_in_luma_samples = eg.readUEG();\n    const pic_height_in_luma_samples = eg.readUEG();\n    const conformance_window_flag = eg.readBoolean();\n    let pic_left_offset = 0,\n      pic_right_offset = 0,\n      pic_top_offset = 0,\n      pic_bottom_offset = 0;\n    if (conformance_window_flag) {\n      pic_left_offset += eg.readUEG();\n      pic_right_offset += eg.readUEG();\n      pic_top_offset += eg.readUEG();\n      pic_bottom_offset += eg.readUEG();\n    }\n    const bit_depth_luma_minus8 = eg.readUEG();\n    const bit_depth_chroma_minus8 = eg.readUEG();\n    const log2_max_pic_order_cnt_lsb_minus4 = eg.readUEG();\n    const sub_layer_ordering_info_present_flag = eg.readBoolean();\n    for (\n      let i = sub_layer_ordering_info_present_flag ? 0 : max_sub_layers_minus1;\n      i <= max_sub_layers_minus1;\n      i++\n    ) {\n      eg.skipUEG(); // max_dec_pic_buffering_minus1[i]\n      eg.skipUEG(); // max_num_reorder_pics[i]\n      eg.skipUEG(); // max_latency_increase_plus1[i]\n    }\n    eg.skipUEG(); // log2_min_luma_coding_block_size_minus3\n    eg.skipUEG(); // log2_diff_max_min_luma_coding_block_size\n    eg.skipUEG(); // log2_min_transform_block_size_minus2\n    eg.skipUEG(); // log2_diff_max_min_transform_block_size\n    eg.skipUEG(); // max_transform_hierarchy_depth_inter\n    eg.skipUEG(); // max_transform_hierarchy_depth_intra\n    const scaling_list_enabled_flag = eg.readBoolean();\n    if (scaling_list_enabled_flag) {\n      const sps_scaling_list_data_present_flag = eg.readBoolean();\n      if (sps_scaling_list_data_present_flag) {\n        for (let sizeId = 0; sizeId < 4; sizeId++) {\n          for (\n            let matrixId = 0;\n            matrixId < (sizeId === 3 ? 2 : 6);\n            matrixId++\n          ) {\n            const scaling_list_pred_mode_flag = eg.readBoolean();\n            if (!scaling_list_pred_mode_flag) {\n              eg.readUEG(); // scaling_list_pred_matrix_id_delta\n            } else {\n              const coefNum = Math.min(64, 1 << (4 + (sizeId << 1)));\n              if (sizeId > 1) {\n                eg.readEG();\n              }\n              for (let i = 0; i < coefNum; i++) {\n                eg.readEG();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    eg.readBoolean(); // amp_enabled_flag\n    eg.readBoolean(); // sample_adaptive_offset_enabled_flag\n    const pcm_enabled_flag = eg.readBoolean();\n    if (pcm_enabled_flag) {\n      eg.readUByte();\n      eg.skipUEG();\n      eg.skipUEG();\n      eg.readBoolean();\n    }\n    const num_short_term_ref_pic_sets = eg.readUEG();\n    let num_delta_pocs = 0;\n    for (let i = 0; i < num_short_term_ref_pic_sets; i++) {\n      let inter_ref_pic_set_prediction_flag = false;\n      if (i !== 0) {\n        inter_ref_pic_set_prediction_flag = eg.readBoolean();\n      }\n      if (inter_ref_pic_set_prediction_flag) {\n        if (i === num_short_term_ref_pic_sets) {\n          eg.readUEG();\n        }\n        eg.readBoolean();\n        eg.readUEG();\n        let next_num_delta_pocs = 0;\n        for (let j = 0; j <= num_delta_pocs; j++) {\n          const used_by_curr_pic_flag = eg.readBoolean();\n          let use_delta_flag = false;\n          if (!used_by_curr_pic_flag) {\n            use_delta_flag = eg.readBoolean();\n          }\n          if (used_by_curr_pic_flag || use_delta_flag) {\n            next_num_delta_pocs++;\n          }\n        }\n        num_delta_pocs = next_num_delta_pocs;\n      } else {\n        const num_negative_pics = eg.readUEG();\n        const num_positive_pics = eg.readUEG();\n        num_delta_pocs = num_negative_pics + num_positive_pics;\n        for (let j = 0; j < num_negative_pics; j++) {\n          eg.readUEG();\n          eg.readBoolean();\n        }\n        for (let j = 0; j < num_positive_pics; j++) {\n          eg.readUEG();\n          eg.readBoolean();\n        }\n      }\n    }\n\n    const long_term_ref_pics_present_flag = eg.readBoolean();\n    if (long_term_ref_pics_present_flag) {\n      const num_long_term_ref_pics_sps = eg.readUEG();\n      for (let i = 0; i < num_long_term_ref_pics_sps; i++) {\n        for (let j = 0; j < log2_max_pic_order_cnt_lsb_minus4 + 4; j++) {\n          eg.readBits(1);\n        }\n        eg.readBits(1);\n      }\n    }\n\n    let min_spatial_segmentation_idc = 0;\n    let sar_width = 1,\n      sar_height = 1;\n    let fps_fixed = true,\n      fps_den = 1,\n      fps_num = 0;\n    eg.readBoolean(); // sps_temporal_mvp_enabled_flag\n    eg.readBoolean(); // strong_intra_smoothing_enabled_flag\n    let default_display_window_flag = false;\n    const vui_parameters_present_flag = eg.readBoolean();\n    if (vui_parameters_present_flag) {\n      const aspect_ratio_info_present_flag = eg.readBoolean();\n      if (aspect_ratio_info_present_flag) {\n        const aspect_ratio_idc = eg.readUByte();\n        const sar_width_table = [\n          1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2,\n        ];\n        const sar_height_table = [\n          1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1,\n        ];\n        if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n          sar_width = sar_width_table[aspect_ratio_idc - 1];\n          sar_height = sar_height_table[aspect_ratio_idc - 1];\n        } else if (aspect_ratio_idc === 255) {\n          sar_width = eg.readBits(16);\n          sar_height = eg.readBits(16);\n        }\n      }\n      const overscan_info_present_flag = eg.readBoolean();\n      if (overscan_info_present_flag) {\n        eg.readBoolean();\n      }\n      const video_signal_type_present_flag = eg.readBoolean();\n      if (video_signal_type_present_flag) {\n        eg.readBits(3);\n        eg.readBoolean();\n        const colour_description_present_flag = eg.readBoolean();\n        if (colour_description_present_flag) {\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte();\n        }\n      }\n      const chroma_loc_info_present_flag = eg.readBoolean();\n      if (chroma_loc_info_present_flag) {\n        eg.readUEG();\n        eg.readUEG();\n      }\n      eg.readBoolean(); // neutral_chroma_indication_flag\n      eg.readBoolean(); // field_seq_flag\n      eg.readBoolean(); // frame_field_info_present_flag\n      default_display_window_flag = eg.readBoolean();\n      if (default_display_window_flag) {\n        pic_left_offset += eg.readUEG();\n        pic_right_offset += eg.readUEG();\n        pic_top_offset += eg.readUEG();\n        pic_bottom_offset += eg.readUEG();\n      }\n      const vui_timing_info_present_flag = eg.readBoolean();\n      if (vui_timing_info_present_flag) {\n        fps_den = eg.readBits(32);\n        fps_num = eg.readBits(32);\n        const vui_poc_proportional_to_timing_flag = eg.readBoolean();\n        if (vui_poc_proportional_to_timing_flag) {\n          eg.readUEG();\n        }\n        const vui_hrd_parameters_present_flag = eg.readBoolean();\n        if (vui_hrd_parameters_present_flag) {\n          //const commonInfPresentFlag = true;\n          //if (commonInfPresentFlag) {\n          const nal_hrd_parameters_present_flag = eg.readBoolean();\n          const vcl_hrd_parameters_present_flag = eg.readBoolean();\n          let sub_pic_hrd_params_present_flag = false;\n          if (\n            nal_hrd_parameters_present_flag ||\n            vcl_hrd_parameters_present_flag\n          ) {\n            sub_pic_hrd_params_present_flag = eg.readBoolean();\n            if (sub_pic_hrd_params_present_flag) {\n              eg.readUByte();\n              eg.readBits(5);\n              eg.readBoolean();\n              eg.readBits(5);\n            }\n            eg.readBits(4); // bit_rate_scale\n            eg.readBits(4); // cpb_size_scale\n            if (sub_pic_hrd_params_present_flag) {\n              eg.readBits(4);\n            }\n            eg.readBits(5);\n            eg.readBits(5);\n            eg.readBits(5);\n          }\n          //}\n          for (let i = 0; i <= max_sub_layers_minus1; i++) {\n            fps_fixed = eg.readBoolean(); // fixed_pic_rate_general_flag\n            const fixed_pic_rate_within_cvs_flag =\n              fps_fixed || eg.readBoolean();\n            let low_delay_hrd_flag = false;\n            if (fixed_pic_rate_within_cvs_flag) {\n              eg.readEG();\n            } else {\n              low_delay_hrd_flag = eg.readBoolean();\n            }\n            const cpb_cnt = low_delay_hrd_flag ? 1 : eg.readUEG() + 1;\n            if (nal_hrd_parameters_present_flag) {\n              for (let j = 0; j < cpb_cnt; j++) {\n                eg.readUEG();\n                eg.readUEG();\n                if (sub_pic_hrd_params_present_flag) {\n                  eg.readUEG();\n                  eg.readUEG();\n                }\n                eg.skipBits(1);\n              }\n            }\n            if (vcl_hrd_parameters_present_flag) {\n              for (let j = 0; j < cpb_cnt; j++) {\n                eg.readUEG();\n                eg.readUEG();\n                if (sub_pic_hrd_params_present_flag) {\n                  eg.readUEG();\n                  eg.readUEG();\n                }\n                eg.skipBits(1);\n              }\n            }\n          }\n        }\n      }\n      const bitstream_restriction_flag = eg.readBoolean();\n      if (bitstream_restriction_flag) {\n        eg.readBoolean(); // tiles_fixed_structure_flag\n        eg.readBoolean(); // motion_vectors_over_pic_boundaries_flag\n        eg.readBoolean(); // restricted_ref_pic_lists_flag\n        min_spatial_segmentation_idc = eg.readUEG();\n      }\n    }\n\n    let width = pic_width_in_luma_samples,\n      height = pic_height_in_luma_samples;\n    if (conformance_window_flag || default_display_window_flag) {\n      let chroma_scale_w = 1,\n        chroma_scale_h = 1;\n      if (chroma_format_idc === 1) {\n        // YUV 420\n        chroma_scale_w = chroma_scale_h = 2;\n      } else if (chroma_format_idc == 2) {\n        // YUV 422\n        chroma_scale_w = 2;\n      }\n      width =\n        pic_width_in_luma_samples -\n        chroma_scale_w * pic_right_offset -\n        chroma_scale_w * pic_left_offset;\n      height =\n        pic_height_in_luma_samples -\n        chroma_scale_h * pic_bottom_offset -\n        chroma_scale_h * pic_top_offset;\n    }\n\n    const profile_space_string = general_profile_space\n      ? ['A', 'B', 'C'][general_profile_space]\n      : '';\n    const profile_compatibility_buf =\n      (general_profile_compatibility_flags_1 << 24) |\n      (general_profile_compatibility_flags_2 << 16) |\n      (general_profile_compatibility_flags_3 << 8) |\n      general_profile_compatibility_flags_4;\n    let profile_compatibility_rev = 0;\n    for (let i = 0; i < 32; i++) {\n      profile_compatibility_rev =\n        (profile_compatibility_rev |\n          (((profile_compatibility_buf >> i) & 1) << (31 - i))) >>>\n        0; // reverse bit position (and cast as UInt32)\n    }\n    let profile_compatibility_flags_string =\n      profile_compatibility_rev.toString(16);\n    if (\n      general_profile_idc === 1 &&\n      profile_compatibility_flags_string === '2'\n    ) {\n      profile_compatibility_flags_string = '6';\n    }\n    const tier_flag_string = general_tier_flag ? 'H' : 'L';\n\n    return {\n      codecString: `hvc1.${profile_space_string}${general_profile_idc}.${profile_compatibility_flags_string}.${tier_flag_string}${general_level_idc}.B0`,\n      params: {\n        general_tier_flag,\n        general_profile_idc,\n        general_profile_space,\n        general_profile_compatibility_flags: [\n          general_profile_compatibility_flags_1,\n          general_profile_compatibility_flags_2,\n          general_profile_compatibility_flags_3,\n          general_profile_compatibility_flags_4,\n        ],\n        general_constraint_indicator_flags: [\n          general_constraint_indicator_flags_1,\n          general_constraint_indicator_flags_2,\n          general_constraint_indicator_flags_3,\n          general_constraint_indicator_flags_4,\n          general_constraint_indicator_flags_5,\n          general_constraint_indicator_flags_6,\n        ],\n        general_level_idc,\n        bit_depth: bit_depth_luma_minus8 + 8,\n        bit_depth_luma_minus8,\n        bit_depth_chroma_minus8,\n        min_spatial_segmentation_idc,\n        chroma_format_idc: chroma_format_idc,\n        frame_rate: {\n          fixed: fps_fixed,\n          fps: fps_num / fps_den,\n        },\n      },\n      width,\n      height,\n      pixelRatio: [sar_width, sar_height],\n    };\n  }\n\n  readPPS(pps: Uint8Array): {\n    parallelismType: number;\n  } {\n    const eg = new ExpGolomb(this.ebsp2rbsp(pps));\n    eg.readUByte();\n    eg.readUByte();\n    eg.skipUEG(); // pic_parameter_set_id\n    eg.skipUEG(); // seq_parameter_set_id\n    eg.skipBits(2); // dependent_slice_segments_enabled_flag, output_flag_present_flag\n    eg.skipBits(3); // num_extra_slice_header_bits\n    eg.skipBits(2); // sign_data_hiding_enabled_flag, cabac_init_present_flag\n    eg.skipUEG();\n    eg.skipUEG();\n    eg.skipEG(); // init_qp_minus26\n    eg.skipBits(2); // constrained_intra_pred_flag, transform_skip_enabled_flag\n    const cu_qp_delta_enabled_flag = eg.readBoolean();\n    if (cu_qp_delta_enabled_flag) {\n      eg.skipUEG();\n    }\n    eg.skipEG(); // cb_qp_offset\n    eg.skipEG(); // cr_qp_offset\n    eg.skipBits(4); // pps_slice_chroma_qp_offsets_present_flag, weighted_pred_flag, weighted_bipred_flag, transquant_bypass_enabled_flag\n    const tiles_enabled_flag = eg.readBoolean();\n    const entropy_coding_sync_enabled_flag = eg.readBoolean();\n    let parallelismType = 1; // slice-based parallel decoding\n    if (entropy_coding_sync_enabled_flag && tiles_enabled_flag) {\n      parallelismType = 0; // mixed-type parallel decoding\n    } else if (entropy_coding_sync_enabled_flag) {\n      parallelismType = 3; // wavefront-based parallel decoding\n    } else if (tiles_enabled_flag) {\n      parallelismType = 2; // tile-based parallel decoding\n    }\n\n    return {\n      parallelismType,\n    };\n  }\n\n  matchSPS(sps1: Uint8Array, sps2: Uint8Array): boolean {\n    // compare without headers and VPS related params\n    return (\n      String.fromCharCode.apply(null, sps1).substr(3) ===\n      String.fromCharCode.apply(null, sps2).substr(3)\n    );\n  }\n}\n\nexport default HevcVideoParser;\n","/**\n * SAMPLE-AES decrypter\n */\n\nimport { HlsConfig } from '../config';\nimport Decrypter from '../crypt/decrypter';\nimport { DecrypterAesMode } from '../crypt/decrypter-aes-mode';\nimport { HlsEventEmitter } from '../events';\nimport type {\n  AudioSample,\n  VideoSample,\n  VideoSampleUnit,\n  DemuxedVideoTrackBase,\n  KeyData,\n} from '../types/demuxer';\nimport { discardEPB } from '../utils/mp4-tools';\n\nclass SampleAesDecrypter {\n  private keyData: KeyData;\n  private decrypter: Decrypter;\n\n  constructor(observer: HlsEventEmitter, config: HlsConfig, keyData: KeyData) {\n    this.keyData = keyData;\n    this.decrypter = new Decrypter(config, {\n      removePKCS7Padding: false,\n    });\n  }\n\n  decryptBuffer(encryptedData: Uint8Array | ArrayBuffer): Promise<ArrayBuffer> {\n    return this.decrypter.decrypt(\n      encryptedData,\n      this.keyData.key.buffer,\n      this.keyData.iv.buffer,\n      DecrypterAesMode.cbc,\n    );\n  }\n\n  // AAC - encrypt all full 16 bytes blocks starting from offset 16\n  private decryptAacSample(\n    samples: AudioSample[],\n    sampleIndex: number,\n    callback: () => void,\n  ) {\n    const curUnit = samples[sampleIndex].unit;\n    if (curUnit.length <= 16) {\n      // No encrypted portion in this sample (first 16 bytes is not\n      // encrypted, see https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/HLS_Sample_Encryption/Encryption/Encryption.html),\n      return;\n    }\n    const encryptedData = curUnit.subarray(\n      16,\n      curUnit.length - (curUnit.length % 16),\n    );\n    const encryptedBuffer = encryptedData.buffer.slice(\n      encryptedData.byteOffset,\n      encryptedData.byteOffset + encryptedData.length,\n    );\n\n    this.decryptBuffer(encryptedBuffer).then((decryptedBuffer: ArrayBuffer) => {\n      const decryptedData = new Uint8Array(decryptedBuffer);\n      curUnit.set(decryptedData, 16);\n\n      if (!this.decrypter.isSync()) {\n        this.decryptAacSamples(samples, sampleIndex + 1, callback);\n      }\n    });\n  }\n\n  decryptAacSamples(\n    samples: AudioSample[],\n    sampleIndex: number,\n    callback: () => void,\n  ) {\n    for (; ; sampleIndex++) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      if (samples[sampleIndex].unit.length < 32) {\n        continue;\n      }\n\n      this.decryptAacSample(samples, sampleIndex, callback);\n\n      if (!this.decrypter.isSync()) {\n        return;\n      }\n    }\n  }\n\n  // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n  getAvcEncryptedData(decodedData: Uint8Array) {\n    const encryptedDataLen =\n      Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n    const encryptedData = new Int8Array(encryptedDataLen);\n    let outputPos = 0;\n    for (\n      let inputPos = 32;\n      inputPos < decodedData.length - 16;\n      inputPos += 160, outputPos += 16\n    ) {\n      encryptedData.set(\n        decodedData.subarray(inputPos, inputPos + 16),\n        outputPos,\n      );\n    }\n\n    return encryptedData;\n  }\n\n  getAvcDecryptedUnit(\n    decodedData: Uint8Array,\n    decryptedData: ArrayLike<number> | ArrayBuffer | SharedArrayBuffer,\n  ) {\n    const uint8DecryptedData = new Uint8Array(decryptedData);\n    let inputPos = 0;\n    for (\n      let outputPos = 32;\n      outputPos < decodedData.length - 16;\n      outputPos += 160, inputPos += 16\n    ) {\n      decodedData.set(\n        uint8DecryptedData.subarray(inputPos, inputPos + 16),\n        outputPos,\n      );\n    }\n\n    return decodedData;\n  }\n\n  decryptAvcSample(\n    samples: VideoSample[],\n    sampleIndex: number,\n    unitIndex: number,\n    callback: () => void,\n    curUnit: VideoSampleUnit,\n  ) {\n    const decodedData = discardEPB(curUnit.data);\n    const encryptedData = this.getAvcEncryptedData(decodedData);\n\n    this.decryptBuffer(encryptedData.buffer).then(\n      (decryptedBuffer: ArrayBuffer) => {\n        curUnit.data = this.getAvcDecryptedUnit(decodedData, decryptedBuffer);\n\n        if (!this.decrypter.isSync()) {\n          this.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n        }\n      },\n    );\n  }\n\n  decryptAvcSamples(\n    samples: DemuxedVideoTrackBase['samples'],\n    sampleIndex: number,\n    unitIndex: number,\n    callback: () => void,\n  ) {\n    if (samples instanceof Uint8Array) {\n      throw new Error('Cannot decrypt samples of type Uint8Array');\n    }\n\n    for (; ; sampleIndex++, unitIndex = 0) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      const curUnits = samples[sampleIndex].units;\n      for (; ; unitIndex++) {\n        if (unitIndex >= curUnits.length) {\n          break;\n        }\n\n        const curUnit = curUnits[unitIndex];\n        if (\n          curUnit.data.length <= 48 ||\n          (curUnit.type !== 1 && curUnit.type !== 5)\n        ) {\n          continue;\n        }\n\n        this.decryptAvcSample(\n          samples,\n          sampleIndex,\n          unitIndex,\n          callback,\n          curUnit,\n        );\n\n        if (!this.decrypter.isSync()) {\n          return;\n        }\n      }\n    }\n  }\n}\n\nexport default SampleAesDecrypter;\n","/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 (or HEVC/H265) NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n */\n\nimport * as ADTS from './audio/adts';\nimport * as MpegAudio from './audio/mpegaudio';\nimport * as AC3 from './audio/ac3-demuxer';\nimport BaseVideoParser from './video/base-video-parser';\nimport AvcVideoParser from './video/avc-video-parser';\nimport HevcVideoParser from './video/hevc-video-parser';\nimport SampleAesDecrypter from './sample-aes';\nimport { Events } from '../events';\nimport { appendUint8Array, RemuxerTrackIdConfig } from '../utils/mp4-tools';\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport type { TypeSupported } from '../utils/codecs';\nimport {\n  MetadataSchema,\n  type DemuxedVideoTrack,\n  type DemuxedAudioTrack,\n  type DemuxedTrack,\n  type Demuxer,\n  type DemuxerResult,\n  type VideoSample,\n  type DemuxedMetadataTrack,\n  type DemuxedUserdataTrack,\n  type ElementaryStreamData,\n  type KeyData,\n} from '../types/demuxer';\nimport type { AudioFrame } from '../types/demuxer';\n\nexport type ParsedTimestamp = {\n  pts?: number;\n  dts?: number;\n};\n\nexport type PES = ParsedTimestamp & {\n  data: Uint8Array;\n  len: number;\n};\n\nexport type ParsedVideoSample = ParsedTimestamp &\n  Omit<VideoSample, 'pts' | 'dts'>;\n\nconst PACKET_LENGTH = 188;\n\nclass TSDemuxer implements Demuxer {\n  private readonly observer: HlsEventEmitter;\n  private readonly config: HlsConfig;\n  private typeSupported: TypeSupported;\n\n  private sampleAes: SampleAesDecrypter | null = null;\n  private pmtParsed: boolean = false;\n  private audioCodec?: string;\n  private videoCodec?: string;\n  private _duration: number = 0;\n  private _pmtId: number = -1;\n\n  private _videoTrack?: DemuxedVideoTrack;\n  private _audioTrack?: DemuxedAudioTrack;\n  private _id3Track?: DemuxedMetadataTrack;\n  private _txtTrack?: DemuxedUserdataTrack;\n  private aacOverFlow: AudioFrame | null = null;\n  private remainderData: Uint8Array | null = null;\n  private videoParser: BaseVideoParser | null;\n\n  constructor(\n    observer: HlsEventEmitter,\n    config: HlsConfig,\n    typeSupported: TypeSupported,\n  ) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.videoParser = null;\n  }\n\n  static probe(data: Uint8Array) {\n    const syncOffset = TSDemuxer.syncOffset(data);\n    if (syncOffset > 0) {\n      logger.warn(\n        `MPEG2-TS detected but first sync word found @ offset ${syncOffset}`,\n      );\n    }\n    return syncOffset !== -1;\n  }\n\n  static syncOffset(data: Uint8Array): number {\n    const length = data.length;\n    let scanwindow = Math.min(PACKET_LENGTH * 5, length - PACKET_LENGTH) + 1;\n    let i = 0;\n    while (i < scanwindow) {\n      // a TS init segment should contain at least 2 TS packets: PAT and PMT, each starting with 0x47\n      let foundPat = false;\n      let packetStart = -1;\n      let tsPackets = 0;\n      for (let j = i; j < length; j += PACKET_LENGTH) {\n        if (\n          data[j] === 0x47 &&\n          (length - j === PACKET_LENGTH || data[j + PACKET_LENGTH] === 0x47)\n        ) {\n          tsPackets++;\n          if (packetStart === -1) {\n            packetStart = j;\n            // First sync word found at offset, increase scan length (#5251)\n            if (packetStart !== 0) {\n              scanwindow =\n                Math.min(\n                  packetStart + PACKET_LENGTH * 99,\n                  data.length - PACKET_LENGTH,\n                ) + 1;\n            }\n          }\n          if (!foundPat) {\n            foundPat = parsePID(data, j) === 0;\n          }\n          // Sync word found at 0 with 3 packets, or found at offset least 2 packets up to scanwindow (#5501)\n          if (\n            foundPat &&\n            tsPackets > 1 &&\n            ((packetStart === 0 && tsPackets > 2) ||\n              j + PACKET_LENGTH > scanwindow)\n          ) {\n            return packetStart;\n          }\n        } else if (tsPackets) {\n          // Exit if sync word found, but does not contain contiguous packets\n          return -1;\n        } else {\n          break;\n        }\n      }\n      i++;\n    }\n    return -1;\n  }\n\n  /**\n   * Creates a track model internal to demuxer used to drive remuxing input\n   */\n  static createTrack(\n    type: 'audio' | 'video' | 'id3' | 'text',\n    duration?: number,\n  ): DemuxedTrack {\n    return {\n      container:\n        type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n      type,\n      id: RemuxerTrackIdConfig[type],\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0,\n      duration: type === 'audio' ? duration : undefined,\n    };\n  }\n\n  /**\n   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n   * Resets all internal track instances of the demuxer.\n   */\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string,\n    videoCodec: string,\n    trackDuration: number,\n  ) {\n    this.pmtParsed = false;\n    this._pmtId = -1;\n\n    this._videoTrack = TSDemuxer.createTrack('video') as DemuxedVideoTrack;\n    this._audioTrack = TSDemuxer.createTrack(\n      'audio',\n      trackDuration,\n    ) as DemuxedAudioTrack;\n    this._id3Track = TSDemuxer.createTrack('id3') as DemuxedMetadataTrack;\n    this._txtTrack = TSDemuxer.createTrack('text') as DemuxedUserdataTrack;\n    this._audioTrack.segmentCodec = 'aac';\n\n    // flush any partial content\n    this.aacOverFlow = null;\n    this.remainderData = null;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this._duration = trackDuration;\n  }\n\n  public resetTimeStamp() {}\n\n  public resetContiguity(): void {\n    const { _audioTrack, _videoTrack, _id3Track } = this;\n    if (_audioTrack) {\n      _audioTrack.pesData = null;\n    }\n    if (_videoTrack) {\n      _videoTrack.pesData = null;\n    }\n    if (_id3Track) {\n      _id3Track.pesData = null;\n    }\n    this.aacOverFlow = null;\n    this.remainderData = null;\n  }\n\n  public demux(\n    data: Uint8Array,\n    timeOffset: number,\n    isSampleAes = false,\n    flush = false,\n  ): DemuxerResult {\n    if (!isSampleAes) {\n      this.sampleAes = null;\n    }\n\n    let pes: PES | null;\n\n    const videoTrack = this._videoTrack as DemuxedVideoTrack;\n    const audioTrack = this._audioTrack as DemuxedAudioTrack;\n    const id3Track = this._id3Track as DemuxedMetadataTrack;\n    const textTrack = this._txtTrack as DemuxedUserdataTrack;\n\n    let videoPid = videoTrack.pid;\n    let videoData = videoTrack.pesData;\n    let audioPid = audioTrack.pid;\n    let id3Pid = id3Track.pid;\n    let audioData = audioTrack.pesData;\n    let id3Data = id3Track.pesData;\n    let unknownPID: number | null = null;\n    let pmtParsed = this.pmtParsed;\n    let pmtId = this._pmtId;\n\n    let len = data.length;\n    if (this.remainderData) {\n      data = appendUint8Array(this.remainderData, data);\n      len = data.length;\n      this.remainderData = null;\n    }\n\n    if (len < PACKET_LENGTH && !flush) {\n      this.remainderData = data;\n      return {\n        audioTrack,\n        videoTrack,\n        id3Track,\n        textTrack,\n      };\n    }\n\n    const syncOffset = Math.max(0, TSDemuxer.syncOffset(data));\n    len -= (len - syncOffset) % PACKET_LENGTH;\n    if (len < data.byteLength && !flush) {\n      this.remainderData = new Uint8Array(\n        data.buffer,\n        len,\n        data.buffer.byteLength - len,\n      );\n    }\n\n    // loop through TS packets\n    let tsPacketErrors = 0;\n    for (let start = syncOffset; start < len; start += PACKET_LENGTH) {\n      if (data[start] === 0x47) {\n        const stt = !!(data[start + 1] & 0x40);\n        const pid = parsePID(data, start);\n        const atf = (data[start + 3] & 0x30) >> 4;\n\n        // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n        let offset: number;\n        if (atf > 1) {\n          offset = start + 5 + data[start + 4];\n          // continue if there is only adaptation field\n          if (offset === start + PACKET_LENGTH) {\n            continue;\n          }\n        } else {\n          offset = start + 4;\n        }\n        switch (pid) {\n          case videoPid:\n            if (stt) {\n              if (videoData && (pes = parsePES(videoData))) {\n                if (this.videoParser === null) {\n                  switch (videoTrack.segmentCodec) {\n                    case 'avc':\n                      this.videoParser = new AvcVideoParser();\n                      break;\n                    case 'hevc':\n                      this.videoParser = new HevcVideoParser();\n                      break;\n                  }\n                }\n                if (this.videoParser !== null) {\n                  this.videoParser.parsePES(\n                    videoTrack,\n                    textTrack,\n                    pes,\n                    false,\n                    this._duration,\n                  );\n                }\n              }\n\n              videoData = { data: [], size: 0 };\n            }\n            if (videoData) {\n              videoData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              videoData.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case audioPid:\n            if (stt) {\n              if (audioData && (pes = parsePES(audioData))) {\n                switch (audioTrack.segmentCodec) {\n                  case 'aac':\n                    this.parseAACPES(audioTrack, pes);\n                    break;\n                  case 'mp3':\n                    this.parseMPEGPES(audioTrack, pes);\n                    break;\n                  case 'ac3':\n                    if (__USE_M2TS_ADVANCED_CODECS__) {\n                      this.parseAC3PES(audioTrack, pes);\n                    }\n                    break;\n                }\n              }\n              audioData = { data: [], size: 0 };\n            }\n            if (audioData) {\n              audioData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              audioData.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case id3Pid:\n            if (stt) {\n              if (id3Data && (pes = parsePES(id3Data))) {\n                this.parseID3PES(id3Track, pes);\n              }\n\n              id3Data = { data: [], size: 0 };\n            }\n            if (id3Data) {\n              id3Data.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              id3Data.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case 0:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            pmtId = this._pmtId = parsePAT(data, offset);\n            // logger.log('PMT PID:'  + this._pmtId);\n            break;\n          case pmtId: {\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            const parsedPIDs = parsePMT(\n              data,\n              offset,\n              this.typeSupported,\n              isSampleAes,\n            );\n\n            // only update track id if track PID found while parsing PMT\n            // this is to avoid resetting the PID to -1 in case\n            // track PID transiently disappears from the stream\n            // this could happen in case of transient missing audio samples for example\n            // NOTE this is only the PID of the track as found in TS,\n            // but we are not using this for MP4 track IDs.\n            videoPid = parsedPIDs.videoPid;\n            if (videoPid > 0) {\n              videoTrack.pid = videoPid;\n              videoTrack.segmentCodec = parsedPIDs.segmentVideoCodec;\n            }\n\n            audioPid = parsedPIDs.audioPid;\n            if (audioPid > 0) {\n              audioTrack.pid = audioPid;\n              audioTrack.segmentCodec = parsedPIDs.segmentAudioCodec;\n            }\n            id3Pid = parsedPIDs.id3Pid;\n            if (id3Pid > 0) {\n              id3Track.pid = id3Pid;\n            }\n\n            if (unknownPID !== null && !pmtParsed) {\n              logger.warn(\n                `MPEG-TS PMT found at ${start} after unknown PID '${unknownPID}'. Backtracking to sync byte @${syncOffset} to parse all TS packets.`,\n              );\n              unknownPID = null;\n              // we set it to -188, the += 188 in the for loop will reset start to 0\n              start = syncOffset - 188;\n            }\n            pmtParsed = this.pmtParsed = true;\n            break;\n          }\n          case 0x11:\n          case 0x1fff:\n            break;\n          default:\n            unknownPID = pid;\n            break;\n        }\n      } else {\n        tsPacketErrors++;\n      }\n    }\n\n    if (tsPacketErrors > 0) {\n      const error = new Error(\n        `Found ${tsPacketErrors} TS packet/s that do not start with 0x47`,\n      );\n      this.observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.FRAG_PARSING_ERROR,\n        fatal: false,\n        error,\n        reason: error.message,\n      });\n    }\n\n    videoTrack.pesData = videoData;\n    audioTrack.pesData = audioData;\n    id3Track.pesData = id3Data;\n\n    const demuxResult: DemuxerResult = {\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n    };\n\n    if (flush) {\n      this.extractRemainingSamples(demuxResult);\n    }\n\n    return demuxResult;\n  }\n\n  public flush(): DemuxerResult | Promise<DemuxerResult> {\n    const { remainderData } = this;\n    this.remainderData = null;\n    let result: DemuxerResult;\n    if (remainderData) {\n      result = this.demux(remainderData, -1, false, true);\n    } else {\n      result = {\n        videoTrack: this._videoTrack as DemuxedVideoTrack,\n        audioTrack: this._audioTrack as DemuxedAudioTrack,\n        id3Track: this._id3Track as DemuxedMetadataTrack,\n        textTrack: this._txtTrack as DemuxedUserdataTrack,\n      };\n    }\n    this.extractRemainingSamples(result);\n    if (this.sampleAes) {\n      return this.decrypt(result, this.sampleAes);\n    }\n    return result;\n  }\n\n  private extractRemainingSamples(demuxResult: DemuxerResult) {\n    const { audioTrack, videoTrack, id3Track, textTrack } = demuxResult;\n    const videoData = videoTrack.pesData;\n    const audioData = audioTrack.pesData;\n    const id3Data = id3Track.pesData;\n    // try to parse last PES packets\n    let pes: PES | null;\n    if (videoData && (pes = parsePES(videoData))) {\n      if (this.videoParser === null) {\n        switch (videoTrack.segmentCodec) {\n          case 'avc':\n            this.videoParser = new AvcVideoParser();\n            break;\n          case 'hevc':\n            this.videoParser = new HevcVideoParser();\n            break;\n        }\n      }\n      if (this.videoParser !== null) {\n        this.videoParser.parsePES(\n          videoTrack as DemuxedVideoTrack,\n          textTrack as DemuxedUserdataTrack,\n          pes,\n          true,\n          this._duration,\n        );\n        videoTrack.pesData = null;\n      }\n    } else {\n      // either avcData null or PES truncated, keep it for next frag parsing\n      videoTrack.pesData = videoData;\n    }\n\n    if (audioData && (pes = parsePES(audioData))) {\n      switch (audioTrack.segmentCodec) {\n        case 'aac':\n          this.parseAACPES(audioTrack, pes);\n          break;\n        case 'mp3':\n          this.parseMPEGPES(audioTrack, pes);\n          break;\n        case 'ac3':\n          if (__USE_M2TS_ADVANCED_CODECS__) {\n            this.parseAC3PES(audioTrack, pes);\n          }\n          break;\n      }\n      audioTrack.pesData = null;\n    } else {\n      if (audioData?.size) {\n        logger.log(\n          'last AAC PES packet truncated,might overlap between fragments',\n        );\n      }\n\n      // either audioData null or PES truncated, keep it for next frag parsing\n      audioTrack.pesData = audioData;\n    }\n\n    if (id3Data && (pes = parsePES(id3Data))) {\n      this.parseID3PES(id3Track, pes);\n      id3Track.pesData = null;\n    } else {\n      // either id3Data null or PES truncated, keep it for next frag parsing\n      id3Track.pesData = id3Data;\n    }\n  }\n\n  public demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult> {\n    const demuxResult = this.demux(\n      data,\n      timeOffset,\n      true,\n      !this.config.progressive,\n    );\n    const sampleAes = (this.sampleAes = new SampleAesDecrypter(\n      this.observer,\n      this.config,\n      keyData,\n    ));\n    return this.decrypt(demuxResult, sampleAes);\n  }\n\n  private decrypt(\n    demuxResult: DemuxerResult,\n    sampleAes: SampleAesDecrypter,\n  ): Promise<DemuxerResult> {\n    return new Promise((resolve) => {\n      const { audioTrack, videoTrack } = demuxResult;\n      if (audioTrack.samples && audioTrack.segmentCodec === 'aac') {\n        sampleAes.decryptAacSamples(audioTrack.samples, 0, () => {\n          if (videoTrack.samples) {\n            sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {\n              resolve(demuxResult);\n            });\n          } else {\n            resolve(demuxResult);\n          }\n        });\n      } else if (videoTrack.samples) {\n        sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {\n          resolve(demuxResult);\n        });\n      }\n    });\n  }\n\n  public destroy() {\n    this._duration = 0;\n  }\n\n  private parseAACPES(track: DemuxedAudioTrack, pes: PES) {\n    let startOffset = 0;\n    const aacOverFlow = this.aacOverFlow;\n    let data = pes.data;\n    if (aacOverFlow) {\n      this.aacOverFlow = null;\n      const frameMissingBytes = aacOverFlow.missing;\n      const sampleLength = aacOverFlow.sample.unit.byteLength;\n      // logger.log(`AAC: append overflowing ${sampleLength} bytes to beginning of new PES`);\n      if (frameMissingBytes === -1) {\n        data = appendUint8Array(aacOverFlow.sample.unit, data);\n      } else {\n        const frameOverflowBytes = sampleLength - frameMissingBytes;\n        aacOverFlow.sample.unit.set(\n          data.subarray(0, frameMissingBytes),\n          frameOverflowBytes,\n        );\n        track.samples.push(aacOverFlow.sample);\n        startOffset = aacOverFlow.missing;\n      }\n    }\n    // look for ADTS header (0xFFFx)\n    let offset: number;\n    let len: number;\n    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n      if (ADTS.isHeader(data, offset)) {\n        break;\n      }\n    }\n    // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n    if (offset !== startOffset) {\n      let reason: string;\n      const recoverable = offset < len - 1;\n      if (recoverable) {\n        reason = `AAC PES did not start with ADTS header,offset:${offset}`;\n      } else {\n        reason = 'No ADTS header found in AAC PES';\n      }\n      const error = new Error(reason);\n      logger.warn(`parsing error: ${reason}`);\n      this.observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.FRAG_PARSING_ERROR,\n        fatal: false,\n        levelRetry: recoverable,\n        error,\n        reason,\n      });\n      if (!recoverable) {\n        return;\n      }\n    }\n\n    ADTS.initTrackConfig(\n      track,\n      this.observer,\n      data,\n      offset,\n      this.audioCodec as string,\n    );\n\n    let pts: number;\n    if (pes.pts !== undefined) {\n      pts = pes.pts;\n    } else if (aacOverFlow) {\n      // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n      // first sample PTS should be equal to last sample PTS + frameDuration\n      const frameDuration = ADTS.getFrameDuration(track.samplerate as number);\n      pts = aacOverFlow.sample.pts + frameDuration;\n    } else {\n      logger.warn('[tsdemuxer]: AAC PES unknown PTS');\n      return;\n    }\n\n    // scan for aac samples\n    let frameIndex = 0;\n    let frame;\n    while (offset < len) {\n      frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n      offset += frame.length;\n      if (!frame.missing) {\n        frameIndex++;\n        for (; offset < len - 1; offset++) {\n          if (ADTS.isHeader(data, offset)) {\n            break;\n          }\n        }\n      } else {\n        this.aacOverFlow = frame;\n        break;\n      }\n    }\n  }\n\n  private parseMPEGPES(track: DemuxedAudioTrack, pes: PES) {\n    const data = pes.data;\n    const length = data.length;\n    let frameIndex = 0;\n    let offset = 0;\n    const pts = pes.pts;\n    if (pts === undefined) {\n      logger.warn('[tsdemuxer]: MPEG PES unknown PTS');\n      return;\n    }\n\n    while (offset < length) {\n      if (MpegAudio.isHeader(data, offset)) {\n        const frame = MpegAudio.appendFrame(\n          track,\n          data,\n          offset,\n          pts,\n          frameIndex,\n        );\n        if (frame) {\n          offset += frame.length;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n  }\n\n  private parseAC3PES(track: DemuxedAudioTrack, pes: PES) {\n    if (__USE_M2TS_ADVANCED_CODECS__) {\n      const data = pes.data;\n      const pts = pes.pts;\n      if (pts === undefined) {\n        logger.warn('[tsdemuxer]: AC3 PES unknown PTS');\n        return;\n      }\n      const length = data.length;\n      let frameIndex = 0;\n      let offset = 0;\n      let parsed;\n\n      while (\n        offset < length &&\n        (parsed = AC3.appendFrame(track, data, offset, pts, frameIndex++)) > 0\n      ) {\n        offset += parsed;\n      }\n    }\n  }\n\n  private parseID3PES(id3Track: DemuxedMetadataTrack, pes: PES) {\n    if (pes.pts === undefined) {\n      logger.warn('[tsdemuxer]: ID3 PES unknown PTS');\n      return;\n    }\n    const id3Sample = Object.assign({}, pes as Required<PES>, {\n      type: this._videoTrack ? MetadataSchema.emsg : MetadataSchema.audioId3,\n      duration: Number.POSITIVE_INFINITY,\n    });\n    id3Track.samples.push(id3Sample);\n  }\n}\n\nfunction parsePID(data: Uint8Array, offset: number): number {\n  // pid is a 13-bit field starting at the last bit of TS[1]\n  return ((data[offset + 1] & 0x1f) << 8) + data[offset + 2];\n}\n\nfunction parsePAT(data: Uint8Array, offset: number): number {\n  // skip the PSI header and parse the first PMT entry\n  return ((data[offset + 10] & 0x1f) << 8) | data[offset + 11];\n}\n\nfunction parsePMT(\n  data: Uint8Array,\n  offset: number,\n  typeSupported: TypeSupported,\n  isSampleAes: boolean,\n) {\n  const result = {\n    audioPid: -1,\n    videoPid: -1,\n    id3Pid: -1,\n    segmentVideoCodec: 'avc',\n    segmentAudioCodec: 'aac',\n  };\n  const sectionLength = ((data[offset + 1] & 0x0f) << 8) | data[offset + 2];\n  const tableEnd = offset + 3 + sectionLength - 4;\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  const programInfoLength =\n    ((data[offset + 10] & 0x0f) << 8) | data[offset + 11];\n  // advance the offset to the first entry in the mapping table\n  offset += 12 + programInfoLength;\n  while (offset < tableEnd) {\n    const pid = parsePID(data, offset);\n    const esInfoLength = ((data[offset + 3] & 0x0f) << 8) | data[offset + 4];\n    switch (data[offset]) {\n      case 0xcf: // SAMPLE-AES AAC\n        if (!isSampleAes) {\n          logEncryptedSamplesFoundInUnencryptedStream('ADTS AAC');\n          break;\n        }\n      /* falls through */\n      case 0x0f: // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n        // logger.log('AAC PID:'  + pid);\n        if (result.audioPid === -1) {\n          result.audioPid = pid;\n        }\n\n        break;\n\n      // Packetized metadata (ID3)\n      case 0x15:\n        // logger.log('ID3 PID:'  + pid);\n        if (result.id3Pid === -1) {\n          result.id3Pid = pid;\n        }\n\n        break;\n\n      case 0xdb: // SAMPLE-AES AVC\n        if (!isSampleAes) {\n          logEncryptedSamplesFoundInUnencryptedStream('H.264');\n          break;\n        }\n      /* falls through */\n      case 0x1b: // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n        // logger.log('AVC PID:'  + pid);\n        if (result.videoPid === -1) {\n          result.videoPid = pid;\n          result.segmentVideoCodec = 'avc';\n        }\n\n        break;\n\n      // ISO/IEC 11172-3 (MPEG-1 audio)\n      // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n      case 0x03:\n      case 0x04:\n        // logger.log('MPEG PID:'  + pid);\n        if (!typeSupported.mpeg && !typeSupported.mp3) {\n          logger.log('MPEG audio found, not supported in this browser');\n        } else if (result.audioPid === -1) {\n          result.audioPid = pid;\n          result.segmentAudioCodec = 'mp3';\n        }\n        break;\n\n      case 0xc1: // SAMPLE-AES AC3\n        if (!isSampleAes) {\n          logEncryptedSamplesFoundInUnencryptedStream('AC-3');\n          break;\n        }\n      /* falls through */\n      case 0x81:\n        if (__USE_M2TS_ADVANCED_CODECS__) {\n          if (!typeSupported.ac3) {\n            logger.log('AC-3 audio found, not supported in this browser');\n          } else if (result.audioPid === -1) {\n            result.audioPid = pid;\n            result.segmentAudioCodec = 'ac3';\n          }\n        } else {\n          logger.warn('AC-3 in M2TS support not included in build');\n        }\n        break;\n\n      case 0x06:\n        // stream_type 6 can mean a lot of different things in case of DVB.\n        // We need to look at the descriptors. Right now, we're only interested\n        // in AC-3 audio, so we do the descriptor parsing only when we don't have\n        // an audio PID yet.\n        if (result.audioPid === -1 && esInfoLength > 0) {\n          let parsePos = offset + 5;\n          let remaining = esInfoLength;\n\n          while (remaining > 2) {\n            const descriptorId = data[parsePos];\n\n            switch (descriptorId) {\n              case 0x6a: // DVB Descriptor for AC-3\n                if (__USE_M2TS_ADVANCED_CODECS__) {\n                  if (typeSupported.ac3 !== true) {\n                    logger.log(\n                      'AC-3 audio found, not supported in this browser for now',\n                    );\n                  } else {\n                    result.audioPid = pid;\n                    result.segmentAudioCodec = 'ac3';\n                  }\n                } else {\n                  logger.warn('AC-3 in M2TS support not included in build');\n                }\n                break;\n            }\n\n            const descriptorLen = data[parsePos + 1] + 2;\n            parsePos += descriptorLen;\n            remaining -= descriptorLen;\n          }\n        }\n        break;\n\n      case 0xc2: // SAMPLE-AES EC3\n      /* falls through */\n      case 0x87:\n        logger.warn('Unsupported EC-3 in M2TS found');\n        break;\n\n      case 0x24: // ITU-T Rec. H.265 and ISO/IEC 23008-2 (HEVC)\n        if (result.videoPid === -1) {\n          result.videoPid = pid;\n          result.segmentVideoCodec = 'hevc';\n          logger.log('HEVC in M2TS found');\n        }\n        break;\n\n      default:\n        // logger.log('unknown stream type:' + data[offset]);\n        break;\n    }\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += esInfoLength + 5;\n  }\n  return result;\n}\n\nfunction logEncryptedSamplesFoundInUnencryptedStream(type: string) {\n  logger.log(`${type} with AES-128-CBC encryption found in unencrypted stream`);\n}\n\nfunction parsePES(stream: ElementaryStreamData): PES | null {\n  let i = 0;\n  let frag: Uint8Array;\n  let pesLen: number;\n  let pesHdrLen: number;\n  let pesPts: number | undefined;\n  let pesDts: number | undefined;\n  const data = stream.data;\n  // safety check\n  if (!stream || stream.size === 0) {\n    return null;\n  }\n\n  // we might need up to 19 bytes to read PES header\n  // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n  // usually only one merge is needed (and this is rare ...)\n  while (data[0].length < 19 && data.length > 1) {\n    data[0] = appendUint8Array(data[0], data[1]);\n    data.splice(1, 1);\n  }\n  // retrieve PTS/DTS from first fragment\n  frag = data[0];\n  const pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n  if (pesPrefix === 1) {\n    pesLen = (frag[4] << 8) + frag[5];\n    // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n    // minus 6 : PES header size\n    if (pesLen && pesLen > stream.size - 6) {\n      return null;\n    }\n\n    const pesFlags = frag[7];\n    if (pesFlags & 0xc0) {\n      /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n          as Bitwise operators treat their operands as a sequence of 32 bits */\n      pesPts =\n        (frag[9] & 0x0e) * 536870912 + // 1 << 29\n        (frag[10] & 0xff) * 4194304 + // 1 << 22\n        (frag[11] & 0xfe) * 16384 + // 1 << 14\n        (frag[12] & 0xff) * 128 + // 1 << 7\n        (frag[13] & 0xfe) / 2;\n\n      if (pesFlags & 0x40) {\n        pesDts =\n          (frag[14] & 0x0e) * 536870912 + // 1 << 29\n          (frag[15] & 0xff) * 4194304 + // 1 << 22\n          (frag[16] & 0xfe) * 16384 + // 1 << 14\n          (frag[17] & 0xff) * 128 + // 1 << 7\n          (frag[18] & 0xfe) / 2;\n\n        if (pesPts - pesDts > 60 * 90000) {\n          logger.warn(\n            `${Math.round(\n              (pesPts - pesDts) / 90000,\n            )}s delta between PTS and DTS, align them`,\n          );\n          pesPts = pesDts;\n        }\n      } else {\n        pesDts = pesPts;\n      }\n    }\n    pesHdrLen = frag[8];\n    // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n    let payloadStartOffset = pesHdrLen + 9;\n    if (stream.size <= payloadStartOffset) {\n      return null;\n    }\n    stream.size -= payloadStartOffset;\n    // reassemble PES packet\n    const pesData = new Uint8Array(stream.size);\n    for (let j = 0, dataLen = data.length; j < dataLen; j++) {\n      frag = data[j];\n      let len = frag.byteLength;\n      if (payloadStartOffset) {\n        if (payloadStartOffset > len) {\n          // trim full frag if PES header bigger than frag\n          payloadStartOffset -= len;\n          continue;\n        } else {\n          // trim partial frag if PES header smaller than frag\n          frag = frag.subarray(payloadStartOffset);\n          len -= payloadStartOffset;\n          payloadStartOffset = 0;\n        }\n      }\n      pesData.set(frag, i);\n      i += len;\n    }\n    if (pesLen) {\n      // payload size : remove PES header + PES extension\n      pesLen -= pesHdrLen + 3;\n    }\n    return { data: pesData, pts: pesPts, dts: pesDts, len: pesLen };\n  }\n  return null;\n}\n\nexport default TSDemuxer;\n","/**\n * MP3 demuxer\n */\nimport BaseAudioDemuxer from './base-audio-demuxer';\nimport { getID3Data, getTimeStamp } from '../id3';\nimport { getAudioBSID } from './dolby';\nimport { logger } from '../../utils/logger';\nimport * as MpegAudio from './mpegaudio';\n\nclass MP3Demuxer extends BaseAudioDemuxer {\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/mpeg',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'mp3',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  static probe(data: Uint8Array | undefined): boolean {\n    if (!data) {\n      return false;\n    }\n\n    // check if data contains ID3 timestamp and MPEG sync word\n    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n    // More info http://www.mp3-tech.org/programmer/frame_header.html\n    const id3Data = getID3Data(data, 0);\n    let offset = id3Data?.length || 0;\n\n    // Check for ac-3|ec-3 sync bytes and return false if present\n    if (\n      id3Data &&\n      data[offset] === 0x0b &&\n      data[offset + 1] === 0x77 &&\n      getTimeStamp(id3Data) !== undefined &&\n      // check the bsid to confirm ac-3 or ec-3 (not mp3)\n      getAudioBSID(data, offset) <= 16\n    ) {\n      return false;\n    }\n\n    for (let length = data.length; offset < length; offset++) {\n      if (MpegAudio.probe(data, offset)) {\n        logger.log('MPEG Audio sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  canParse(data, offset) {\n    return MpegAudio.canParse(data, offset);\n  }\n\n  appendFrame(track, data, offset) {\n    if (this.basePTS === null) {\n      return;\n    }\n    return MpegAudio.appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS,\n      this.frameIndex,\n    );\n  }\n}\n\nexport default MP3Demuxer;\n","/**\n *  AAC helper\n */\n\nclass AAC {\n  static getSilentFrame(\n    codec?: string,\n    channelCount?: number,\n  ): Uint8Array | undefined {\n    switch (codec) {\n      case 'mp4a.40.2':\n        if (channelCount === 1) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n          return new Uint8Array([\n            0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80,\n          ]);\n        } else if (channelCount === 3) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x8e,\n          ]);\n        } else if (channelCount === 4) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38,\n          ]);\n        } else if (channelCount === 5) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38,\n          ]);\n        } else if (channelCount === 6) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2,\n            0x00, 0x20, 0x08, 0xe0,\n          ]);\n        }\n\n        break;\n      // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n      default:\n        if (channelCount === 1) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        } else if (channelCount === 2) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        } else if (channelCount === 3) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        }\n        break;\n    }\n    return undefined;\n  }\n}\n\nexport default AAC;\n","/**\n * Generate MP4 Box\n */\n\nimport { appendUint8Array } from '../utils/mp4-tools';\n\ntype HdlrTypes = {\n  video: Uint8Array;\n  audio: Uint8Array;\n};\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\n\nclass MP4 {\n  public static types: Record<string, number[]>;\n  private static HDLR_TYPES: HdlrTypes;\n  private static STTS: Uint8Array;\n  private static STSC: Uint8Array;\n  private static STCO: Uint8Array;\n  private static STSZ: Uint8Array;\n  private static VMHD: Uint8Array;\n  private static SMHD: Uint8Array;\n  private static STSD: Uint8Array;\n  private static FTYP: Uint8Array;\n  private static DINF: Uint8Array;\n\n  static init() {\n    MP4.types = {\n      avc1: [], // codingname\n      avcC: [],\n      hvc1: [],\n      hvcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      '.mp3': [],\n      dac3: [],\n      'ac-3': [],\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: [],\n    };\n\n    let i: string;\n    for (i in MP4.types) {\n      if (MP4.types.hasOwnProperty(i)) {\n        MP4.types[i] = [\n          i.charCodeAt(0),\n          i.charCodeAt(1),\n          i.charCodeAt(2),\n          i.charCodeAt(3),\n        ];\n      }\n    }\n\n    const videoHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x76,\n      0x69,\n      0x64,\n      0x65, // handler_type: 'vide'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x56,\n      0x69,\n      0x64,\n      0x65,\n      0x6f,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'VideoHandler'\n    ]);\n\n    const audioHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x73,\n      0x6f,\n      0x75,\n      0x6e, // handler_type: 'soun'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x53,\n      0x6f,\n      0x75,\n      0x6e,\n      0x64,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'SoundHandler'\n    ]);\n\n    MP4.HDLR_TYPES = {\n      video: videoHdlr,\n      audio: audioHdlr,\n    };\n\n    const dref = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01, // entry_count\n      0x00,\n      0x00,\n      0x00,\n      0x0c, // entry_size\n      0x75,\n      0x72,\n      0x6c,\n      0x20, // 'url' type\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x01, // entry_flags\n    ]);\n\n    const stco = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // entry_count\n    ]);\n\n    MP4.STTS = MP4.STSC = MP4.STCO = stco;\n\n    MP4.STSZ = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // sample_size\n      0x00,\n      0x00,\n      0x00,\n      0x00, // sample_count\n    ]);\n    MP4.VMHD = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x01, // flags\n      0x00,\n      0x00, // graphicsmode\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // opcolor\n    ]);\n    MP4.SMHD = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00, // balance\n      0x00,\n      0x00, // reserved\n    ]);\n\n    MP4.STSD = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01,\n    ]); // entry_count\n\n    const majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n    const avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n    const minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n    MP4.FTYP = MP4.box(\n      MP4.types.ftyp,\n      majorBrand,\n      minorVersion,\n      majorBrand,\n      avc1Brand,\n    );\n    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n  }\n\n  static box(type, ...payload: Uint8Array[]) {\n    let size = 8;\n    let i = payload.length;\n    const len = i;\n    // calculate the total size we need to allocate\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n\n    const result = new Uint8Array(size);\n    result[0] = (size >> 24) & 0xff;\n    result[1] = (size >> 16) & 0xff;\n    result[2] = (size >> 8) & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4);\n    // copy the payload into the result\n    for (i = 0, size = 8; i < len; i++) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  }\n\n  static hdlr(type) {\n    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n  }\n\n  static mdat(data) {\n    return MP4.box(MP4.types.mdat, data);\n  }\n\n  static mdhd(timescale, duration) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(\n      MP4.types.mdhd,\n      new Uint8Array([\n        0x01, // version 1\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x02, // creation_time\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x03, // modification_time\n        (timescale >> 24) & 0xff,\n        (timescale >> 16) & 0xff,\n        (timescale >> 8) & 0xff,\n        timescale & 0xff, // timescale\n        upperWordDuration >> 24,\n        (upperWordDuration >> 16) & 0xff,\n        (upperWordDuration >> 8) & 0xff,\n        upperWordDuration & 0xff,\n        lowerWordDuration >> 24,\n        (lowerWordDuration >> 16) & 0xff,\n        (lowerWordDuration >> 8) & 0xff,\n        lowerWordDuration & 0xff,\n        0x55,\n        0xc4, // 'und' language (undetermined)\n        0x00,\n        0x00,\n      ]),\n    );\n  }\n\n  static mdia(track) {\n    return MP4.box(\n      MP4.types.mdia,\n      MP4.mdhd(track.timescale, track.duration),\n      MP4.hdlr(track.type),\n      MP4.minf(track),\n    );\n  }\n\n  static mfhd(sequenceNumber) {\n    return MP4.box(\n      MP4.types.mfhd,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00,\n        0x00, // flags\n        sequenceNumber >> 24,\n        (sequenceNumber >> 16) & 0xff,\n        (sequenceNumber >> 8) & 0xff,\n        sequenceNumber & 0xff, // sequence_number\n      ]),\n    );\n  }\n\n  static minf(track) {\n    if (track.type === 'audio') {\n      return MP4.box(\n        MP4.types.minf,\n        MP4.box(MP4.types.smhd, MP4.SMHD),\n        MP4.DINF,\n        MP4.stbl(track),\n      );\n    } else {\n      return MP4.box(\n        MP4.types.minf,\n        MP4.box(MP4.types.vmhd, MP4.VMHD),\n        MP4.DINF,\n        MP4.stbl(track),\n      );\n    }\n  }\n\n  static moof(sn, baseMediaDecodeTime, track) {\n    return MP4.box(\n      MP4.types.moof,\n      MP4.mfhd(sn),\n      MP4.traf(track, baseMediaDecodeTime),\n    );\n  }\n\n  static moov(tracks) {\n    let i = tracks.length;\n    const boxes: Uint8Array[] = [];\n\n    while (i--) {\n      boxes[i] = MP4.trak(tracks[i]);\n    }\n\n    return MP4.box.apply(\n      null,\n      [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)]\n        .concat(boxes)\n        .concat(MP4.mvex(tracks)),\n    );\n  }\n\n  static mvex(tracks) {\n    let i = tracks.length;\n    const boxes: Uint8Array[] = [];\n\n    while (i--) {\n      boxes[i] = MP4.trex(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.mvex, ...boxes]);\n  }\n\n  static mvhd(timescale, duration) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    const bytes = new Uint8Array([\n      0x01, // version 1\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x02, // creation_time\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x03, // modification_time\n      (timescale >> 24) & 0xff,\n      (timescale >> 16) & 0xff,\n      (timescale >> 8) & 0xff,\n      timescale & 0xff, // timescale\n      upperWordDuration >> 24,\n      (upperWordDuration >> 16) & 0xff,\n      (upperWordDuration >> 8) & 0xff,\n      upperWordDuration & 0xff,\n      lowerWordDuration >> 24,\n      (lowerWordDuration >> 16) & 0xff,\n      (lowerWordDuration >> 8) & 0xff,\n      lowerWordDuration & 0xff,\n      0x00,\n      0x01,\n      0x00,\n      0x00, // 1.0 rate\n      0x01,\n      0x00, // 1.0 volume\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x40,\n      0x00,\n      0x00,\n      0x00, // transformation: unity matrix\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0xff,\n      0xff,\n      0xff,\n      0xff, // next_track_ID\n    ]);\n    return MP4.box(MP4.types.mvhd, bytes);\n  }\n\n  static sdtp(track) {\n    const samples = track.samples || [];\n    const bytes = new Uint8Array(4 + samples.length);\n    let i;\n    let flags;\n    // leave the full box header (4 bytes) all zero\n    // write the sample table\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] =\n        (flags.dependsOn << 4) |\n        (flags.isDependedOn << 2) |\n        flags.hasRedundancy;\n    }\n\n    return MP4.box(MP4.types.sdtp, bytes);\n  }\n\n  static stbl(track) {\n    return MP4.box(\n      MP4.types.stbl,\n      MP4.stsd(track),\n      MP4.box(MP4.types.stts, MP4.STTS),\n      MP4.box(MP4.types.stsc, MP4.STSC),\n      MP4.box(MP4.types.stsz, MP4.STSZ),\n      MP4.box(MP4.types.stco, MP4.STCO),\n    );\n  }\n\n  static avc1(track) {\n    let sps: number[] = [];\n    let pps: number[] = [];\n    let i;\n    let data;\n    let len;\n    // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push((len >>> 8) & 0xff);\n      sps.push(len & 0xff);\n\n      // SPS\n      sps = sps.concat(Array.prototype.slice.call(data));\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push((len >>> 8) & 0xff);\n      pps.push(len & 0xff);\n\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    const avcc = MP4.box(\n      MP4.types.avcC,\n      new Uint8Array(\n        [\n          0x01, // version\n          sps[3], // profile\n          sps[4], // profile compat\n          sps[5], // level\n          0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n          0xe0 | track.sps.length, // 3bit reserved (111) + numOfSequenceParameterSets\n        ]\n          .concat(sps)\n          .concat([\n            track.pps.length, // numOfPictureParameterSets\n          ])\n          .concat(pps),\n      ),\n    ); // \"PPS\"\n    const width = track.width;\n    const height = track.height;\n    const hSpacing = track.pixelRatio[0];\n    const vSpacing = track.pixelRatio[1];\n\n    return MP4.box(\n      MP4.types.avc1,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        (width >> 8) & 0xff,\n        width & 0xff, // width\n        (height >> 8) & 0xff,\n        height & 0xff, // height\n        0x00,\n        0x48,\n        0x00,\n        0x00, // horizresolution\n        0x00,\n        0x48,\n        0x00,\n        0x00, // vertresolution\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // frame_count\n        0x12,\n        0x64,\n        0x61,\n        0x69,\n        0x6c, // dailymotion/hls.js\n        0x79,\n        0x6d,\n        0x6f,\n        0x74,\n        0x69,\n        0x6f,\n        0x6e,\n        0x2f,\n        0x68,\n        0x6c,\n        0x73,\n        0x2e,\n        0x6a,\n        0x73,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // compressorname\n        0x00,\n        0x18, // depth = 24\n        0x11,\n        0x11,\n      ]), // pre_defined = -1\n      avcc,\n      MP4.box(\n        MP4.types.btrt,\n        new Uint8Array([\n          0x00,\n          0x1c,\n          0x9c,\n          0x80, // bufferSizeDB\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0, // maxBitrate\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0,\n        ]),\n      ), // avgBitrate\n      MP4.box(\n        MP4.types.pasp,\n        new Uint8Array([\n          hSpacing >> 24, // hSpacing\n          (hSpacing >> 16) & 0xff,\n          (hSpacing >> 8) & 0xff,\n          hSpacing & 0xff,\n          vSpacing >> 24, // vSpacing\n          (vSpacing >> 16) & 0xff,\n          (vSpacing >> 8) & 0xff,\n          vSpacing & 0xff,\n        ]),\n      ),\n    );\n  }\n\n  static esds(track) {\n    const configlen = track.config.length;\n    return new Uint8Array(\n      [\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n\n        0x03, // descriptor_type\n        0x17 + configlen, // length\n        0x00,\n        0x01, // es_id\n        0x00, // stream_priority\n\n        0x04, // descriptor_type\n        0x0f + configlen, // length\n        0x40, // codec : mpeg4_audio\n        0x15, // stream_type\n        0x00,\n        0x00,\n        0x00, // buffer_size\n        0x00,\n        0x00,\n        0x00,\n        0x00, // maxBitrate\n        0x00,\n        0x00,\n        0x00,\n        0x00, // avgBitrate\n\n        0x05, // descriptor_type\n      ]\n        .concat([configlen])\n        .concat(track.config)\n        .concat([0x06, 0x01, 0x02]),\n    ); // GASpecificConfig)); // length + audio config descriptor\n  }\n\n  static audioStsd(track) {\n    const samplerate = track.samplerate;\n    return new Uint8Array([\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01, // data_reference_index\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      track.channelCount, // channelcount\n      0x00,\n      0x10, // sampleSize:16bits\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved2\n      (samplerate >> 8) & 0xff,\n      samplerate & 0xff, //\n      0x00,\n      0x00,\n    ]);\n  }\n\n  static mp4a(track) {\n    return MP4.box(\n      MP4.types.mp4a,\n      MP4.audioStsd(track),\n      MP4.box(MP4.types.esds, MP4.esds(track)),\n    );\n  }\n\n  static mp3(track) {\n    return MP4.box(MP4.types['.mp3'], MP4.audioStsd(track));\n  }\n\n  static ac3(track) {\n    return MP4.box(\n      MP4.types['ac-3'],\n      MP4.audioStsd(track),\n      MP4.box(MP4.types.dac3, track.config),\n    );\n  }\n\n  static stsd(track) {\n    if (track.type === 'audio') {\n      if (track.segmentCodec === 'mp3' && track.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n      }\n      if (track.segmentCodec === 'ac3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.ac3(track));\n      }\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n    } else if (track.segmentCodec === 'avc') {\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n    } else {\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.hvc1(track));\n    }\n  }\n\n  static tkhd(track) {\n    const id = track.id;\n    const duration = track.duration * track.timescale;\n    const width = track.width;\n    const height = track.height;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(\n      MP4.types.tkhd,\n      new Uint8Array([\n        0x01, // version 1\n        0x00,\n        0x00,\n        0x07, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x02, // creation_time\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x03, // modification_time\n        (id >> 24) & 0xff,\n        (id >> 16) & 0xff,\n        (id >> 8) & 0xff,\n        id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        upperWordDuration >> 24,\n        (upperWordDuration >> 16) & 0xff,\n        (upperWordDuration >> 8) & 0xff,\n        upperWordDuration & 0xff,\n        lowerWordDuration >> 24,\n        (lowerWordDuration >> 16) & 0xff,\n        (lowerWordDuration >> 8) & 0xff,\n        lowerWordDuration & 0xff,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00, // layer\n        0x00,\n        0x00, // alternate_group\n        0x00,\n        0x00, // non-audio track volume\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x40,\n        0x00,\n        0x00,\n        0x00, // transformation: unity matrix\n        (width >> 8) & 0xff,\n        width & 0xff,\n        0x00,\n        0x00, // width\n        (height >> 8) & 0xff,\n        height & 0xff,\n        0x00,\n        0x00, // height\n      ]),\n    );\n  }\n\n  static traf(track, baseMediaDecodeTime) {\n    const sampleDependencyTable = MP4.sdtp(track);\n    const id = track.id;\n    const upperWordBaseMediaDecodeTime = Math.floor(\n      baseMediaDecodeTime / (UINT32_MAX + 1),\n    );\n    const lowerWordBaseMediaDecodeTime = Math.floor(\n      baseMediaDecodeTime % (UINT32_MAX + 1),\n    );\n    return MP4.box(\n      MP4.types.traf,\n      MP4.box(\n        MP4.types.tfhd,\n        new Uint8Array([\n          0x00, // version 0\n          0x00,\n          0x00,\n          0x00, // flags\n          id >> 24,\n          (id >> 16) & 0xff,\n          (id >> 8) & 0xff,\n          id & 0xff, // track_ID\n        ]),\n      ),\n      MP4.box(\n        MP4.types.tfdt,\n        new Uint8Array([\n          0x01, // version 1\n          0x00,\n          0x00,\n          0x00, // flags\n          upperWordBaseMediaDecodeTime >> 24,\n          (upperWordBaseMediaDecodeTime >> 16) & 0xff,\n          (upperWordBaseMediaDecodeTime >> 8) & 0xff,\n          upperWordBaseMediaDecodeTime & 0xff,\n          lowerWordBaseMediaDecodeTime >> 24,\n          (lowerWordBaseMediaDecodeTime >> 16) & 0xff,\n          (lowerWordBaseMediaDecodeTime >> 8) & 0xff,\n          lowerWordBaseMediaDecodeTime & 0xff,\n        ]),\n      ),\n      MP4.trun(\n        track,\n        sampleDependencyTable.length +\n          16 + // tfhd\n          20 + // tfdt\n          8 + // traf header\n          16 + // mfhd\n          8 + // moof header\n          8,\n      ), // mdat header\n      sampleDependencyTable,\n    );\n  }\n\n  /**\n   * Generate a track box.\n   * @param track a track definition\n   */\n  static trak(track) {\n    track.duration = track.duration || 0xffffffff;\n    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n  }\n\n  static trex(track) {\n    const id = track.id;\n    return MP4.box(\n      MP4.types.trex,\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        id >> 24,\n        (id >> 16) & 0xff,\n        (id >> 8) & 0xff,\n        id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x01, // default_sample_description_index\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_duration\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_size\n        0x00,\n        0x01,\n        0x00,\n        0x01, // default_sample_flags\n      ]),\n    );\n  }\n\n  static trun(track, offset) {\n    const samples = track.samples || [];\n    const len = samples.length;\n    const arraylen = 12 + 16 * len;\n    const array = new Uint8Array(arraylen);\n    let i;\n    let sample;\n    let duration;\n    let size;\n    let flags;\n    let cts;\n    offset += 8 + arraylen;\n    array.set(\n      [\n        track.type === 'video' ? 0x01 : 0x00, // version 1 for video with signed-int sample_composition_time_offset\n        0x00,\n        0x0f,\n        0x01, // flags\n        (len >>> 24) & 0xff,\n        (len >>> 16) & 0xff,\n        (len >>> 8) & 0xff,\n        len & 0xff, // sample_count\n        (offset >>> 24) & 0xff,\n        (offset >>> 16) & 0xff,\n        (offset >>> 8) & 0xff,\n        offset & 0xff, // data_offset\n      ],\n      0,\n    );\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set(\n        [\n          (duration >>> 24) & 0xff,\n          (duration >>> 16) & 0xff,\n          (duration >>> 8) & 0xff,\n          duration & 0xff, // sample_duration\n          (size >>> 24) & 0xff,\n          (size >>> 16) & 0xff,\n          (size >>> 8) & 0xff,\n          size & 0xff, // sample_size\n          (flags.isLeading << 2) | flags.dependsOn,\n          (flags.isDependedOn << 6) |\n            (flags.hasRedundancy << 4) |\n            (flags.paddingValue << 1) |\n            flags.isNonSync,\n          flags.degradPrio & (0xf0 << 8),\n          flags.degradPrio & 0x0f, // sample_flags\n          (cts >>> 24) & 0xff,\n          (cts >>> 16) & 0xff,\n          (cts >>> 8) & 0xff,\n          cts & 0xff, // sample_composition_time_offset\n        ],\n        12 + 16 * i,\n      );\n    }\n    return MP4.box(MP4.types.trun, array);\n  }\n\n  static initSegment(tracks) {\n    if (!MP4.types) {\n      MP4.init();\n    }\n\n    const movie = MP4.moov(tracks);\n    const result = appendUint8Array(MP4.FTYP, movie);\n    return result;\n  }\n\n  static hvc1(track) {\n    const ps = track.params;\n    const units = [track.vps, track.sps, track.pps];\n    const NALuLengthSize = 4;\n    const config = new Uint8Array([\n      0x01,\n      (ps.general_profile_space << 6) |\n        (ps.general_tier_flag ? 32 : 0) |\n        ps.general_profile_idc,\n      ps.general_profile_compatibility_flags[0],\n      ps.general_profile_compatibility_flags[1],\n      ps.general_profile_compatibility_flags[2],\n      ps.general_profile_compatibility_flags[3],\n      ps.general_constraint_indicator_flags[0],\n      ps.general_constraint_indicator_flags[1],\n      ps.general_constraint_indicator_flags[2],\n      ps.general_constraint_indicator_flags[3],\n      ps.general_constraint_indicator_flags[4],\n      ps.general_constraint_indicator_flags[5],\n      ps.general_level_idc,\n      240 | (ps.min_spatial_segmentation_idc >> 8),\n      255 & ps.min_spatial_segmentation_idc,\n      252 | ps.parallelismType,\n      252 | ps.chroma_format_idc,\n      248 | ps.bit_depth_luma_minus8,\n      248 | ps.bit_depth_chroma_minus8,\n      0x00,\n      parseInt(ps.frame_rate.fps),\n      (NALuLengthSize - 1) |\n        (ps.temporal_id_nested << 2) |\n        (ps.num_temporal_layers << 3) |\n        (ps.frame_rate.fixed ? 64 : 0),\n      units.length,\n    ]);\n\n    // compute hvcC size in bytes\n    let length = config.length;\n    for (let i = 0; i < units.length; i += 1) {\n      length += 3;\n      for (let j = 0; j < units[i].length; j += 1) {\n        length += 2 + units[i][j].length;\n      }\n    }\n\n    const hvcC = new Uint8Array(length);\n    hvcC.set(config, 0);\n    length = config.length;\n    // append parameter set units: one vps, one or more sps and pps\n    const iMax = units.length - 1;\n    for (let i = 0; i < units.length; i += 1) {\n      hvcC.set(\n        new Uint8Array([\n          (32 + i) | (i === iMax ? 128 : 0),\n          0x00,\n          units[i].length,\n        ]),\n        length,\n      );\n      length += 3;\n      for (let j = 0; j < units[i].length; j += 1) {\n        hvcC.set(\n          new Uint8Array([units[i][j].length >> 8, units[i][j].length & 255]),\n          length,\n        );\n        length += 2;\n        hvcC.set(units[i][j], length);\n        length += units[i][j].length;\n      }\n    }\n    const hvcc = MP4.box(MP4.types.hvcC, hvcC);\n    const width = track.width;\n    const height = track.height;\n    const hSpacing = track.pixelRatio[0];\n    const vSpacing = track.pixelRatio[1];\n\n    return MP4.box(\n      MP4.types.hvc1,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        (width >> 8) & 0xff,\n        width & 0xff, // width\n        (height >> 8) & 0xff,\n        height & 0xff, // height\n        0x00,\n        0x48,\n        0x00,\n        0x00, // horizresolution\n        0x00,\n        0x48,\n        0x00,\n        0x00, // vertresolution\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // frame_count\n        0x12,\n        0x64,\n        0x61,\n        0x69,\n        0x6c, // dailymotion/hls.js\n        0x79,\n        0x6d,\n        0x6f,\n        0x74,\n        0x69,\n        0x6f,\n        0x6e,\n        0x2f,\n        0x68,\n        0x6c,\n        0x73,\n        0x2e,\n        0x6a,\n        0x73,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // compressorname\n        0x00,\n        0x18, // depth = 24\n        0x11,\n        0x11,\n      ]), // pre_defined = -1\n      hvcc,\n      MP4.box(\n        MP4.types.btrt,\n        new Uint8Array([\n          0x00,\n          0x1c,\n          0x9c,\n          0x80, // bufferSizeDB\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0, // maxBitrate\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0,\n        ]),\n      ), // avgBitrate\n      MP4.box(\n        MP4.types.pasp,\n        new Uint8Array([\n          hSpacing >> 24, // hSpacing\n          (hSpacing >> 16) & 0xff,\n          (hSpacing >> 8) & 0xff,\n          hSpacing & 0xff,\n          vSpacing >> 24, // vSpacing\n          (vSpacing >> 16) & 0xff,\n          (vSpacing >> 8) & 0xff,\n          vSpacing & 0xff,\n        ]),\n      ),\n    );\n  }\n}\n\nexport default MP4;\n","import type { LoaderConfig } from '../config';\nimport type { Fragment } from '../loader/fragment';\nimport type { Part } from '../loader/fragment';\nimport type { KeyLoaderInfo } from '../loader/key-loader';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { HlsUrlParameters } from './level';\n\nexport interface LoaderContext {\n  // target URL\n  url: string;\n  // loader response type (arraybuffer or default response type for playlist)\n  responseType: string;\n  // headers\n  headers?: Record<string, string>;\n  // start byte range offset\n  rangeStart?: number;\n  // end byte range offset\n  rangeEnd?: number;\n  // true if onProgress should report partial chunk of loaded content\n  progressData?: boolean;\n}\n\nexport interface FragmentLoaderContext extends LoaderContext {\n  frag: Fragment;\n  part: Part | null;\n  resetIV?: boolean;\n}\n\nexport interface KeyLoaderContext extends LoaderContext {\n  keyInfo: KeyLoaderInfo;\n  frag: Fragment;\n}\n\nexport interface LoaderConfiguration {\n  // LoaderConfig policy that overrides required settings\n  loadPolicy: LoaderConfig;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry maxNumRetry\n   */\n  // Max number of load retries\n  maxRetry: number;\n  /**\n   * @deprecated use LoaderConfig maxTimeToFirstByteMs and maxLoadTimeMs\n   */\n  // Timeout after which `onTimeOut` callback will be triggered\n  //  when loading has not finished after that delay\n  timeout: number;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry retryDelayMs\n   */\n  // Delay between an I/O error and following connection retry (ms).\n  // This to avoid spamming the server\n  retryDelay: number;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry maxRetryDelayMs\n   */\n  // max connection retry delay (ms)\n  maxRetryDelay: number;\n  // When streaming progressively, this is the minimum chunk size required to emit a PROGRESS event\n  highWaterMark?: number;\n}\n\nexport interface LoaderResponse {\n  url: string;\n  data?: string | ArrayBuffer | Object;\n  // Errors can include HTTP status code and error message\n  // Successful responses should include status code 200\n  code?: number;\n  text?: string;\n}\n\nexport interface LoaderStats {\n  aborted: boolean;\n  loaded: number;\n  retry: number;\n  total: number;\n  chunkCount: number;\n  bwEstimate: number;\n  loading: HlsProgressivePerformanceTiming;\n  parsing: HlsPerformanceTiming;\n  buffering: HlsProgressivePerformanceTiming;\n}\n\nexport interface HlsPerformanceTiming {\n  start: number;\n  end: number;\n}\n\nexport interface HlsChunkPerformanceTiming extends HlsPerformanceTiming {\n  executeStart: number;\n  executeEnd: number;\n}\n\nexport interface HlsProgressivePerformanceTiming extends HlsPerformanceTiming {\n  first: number;\n}\n\nexport type LoaderOnSuccess<T extends LoaderContext> = (\n  response: LoaderResponse,\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any,\n) => void;\n\nexport type LoaderOnProgress<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  data: string | ArrayBuffer,\n  networkDetails: any,\n) => void;\n\nexport type LoaderOnError<T extends LoaderContext> = (\n  error: {\n    // error status code\n    code: number;\n    // error description\n    text: string;\n  },\n  context: T,\n  networkDetails: any,\n  stats: LoaderStats,\n) => void;\n\nexport type LoaderOnTimeout<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any,\n) => void;\n\nexport type LoaderOnAbort<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any,\n) => void;\n\nexport interface LoaderCallbacks<T extends LoaderContext> {\n  onSuccess: LoaderOnSuccess<T>;\n  onError: LoaderOnError<T>;\n  onTimeout: LoaderOnTimeout<T>;\n  onAbort?: LoaderOnAbort<T>;\n  onProgress?: LoaderOnProgress<T>;\n}\n\nexport interface Loader<T extends LoaderContext> {\n  destroy(): void;\n  abort(): void;\n  load(\n    context: T,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<T>,\n  ): void;\n  /**\n   * `getCacheAge()` is called by hls.js to get the duration that a given object\n   * has been sitting in a cache proxy when playing live.  If implemented,\n   * this should return a value in seconds.\n   *\n   * For HTTP based loaders, this should return the contents of the \"age\" header.\n   *\n   * @returns time object being lodaded\n   */\n  getCacheAge?: () => number | null;\n  getResponseHeader?: (name: string) => string | null;\n  context: T | null;\n  stats: LoaderStats;\n}\n\nexport const enum PlaylistContextType {\n  MANIFEST = 'manifest',\n  LEVEL = 'level',\n  AUDIO_TRACK = 'audioTrack',\n  SUBTITLE_TRACK = 'subtitleTrack',\n}\n\nexport const enum PlaylistLevelType {\n  MAIN = 'main',\n  AUDIO = 'audio',\n  SUBTITLE = 'subtitle',\n}\n\nexport interface PlaylistLoaderContext extends LoaderContext {\n  type: PlaylistContextType;\n  // the level index to load\n  level: number | null;\n  // level or track id from LevelLoadingData / TrackLoadingData\n  id: number | null;\n  // Media Playlist Group ID\n  groupId?: string;\n  // Content Steering Pathway ID (or undefined for default Pathway \".\")\n  pathwayId?: string;\n  // internal representation of a parsed m3u8 level playlist\n  levelDetails?: LevelDetails;\n  // Blocking playlist request delivery directives (or null id none were added to playlist url\n  deliveryDirectives: HlsUrlParameters | null;\n}\n","const MPEG_TS_CLOCK_FREQ_HZ = 90000;\n\nexport type RationalTimestamp = {\n  baseTime: number; // ticks\n  timescale: number; // ticks per second\n};\n\nexport function toTimescaleFromBase(\n  baseTime: number,\n  destScale: number,\n  srcBase: number = 1,\n  round: boolean = false,\n): number {\n  const result = baseTime * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`\n  return round ? Math.round(result) : result;\n}\n\nexport function toTimescaleFromScale(\n  baseTime: number,\n  destScale: number,\n  srcScale: number = 1,\n  round: boolean = false,\n): number {\n  return toTimescaleFromBase(baseTime, destScale, 1 / srcScale, round);\n}\n\nexport function toMsFromMpegTsClock(\n  baseTime: number,\n  round: boolean = false,\n): number {\n  return toTimescaleFromBase(baseTime, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);\n}\n\nexport function toMpegTsClockFromTimescale(\n  baseTime: number,\n  srcScale: number = 1,\n): number {\n  return toTimescaleFromBase(baseTime, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);\n}\n","import AAC from './aac-helper';\nimport MP4 from './mp4-generator';\nimport type { HlsEventEmitter } from '../events';\nimport { Events } from '../events';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport { logger } from '../utils/logger';\nimport {\n  InitSegmentData,\n  Remuxer,\n  RemuxerResult,\n  RemuxedMetadata,\n  RemuxedTrack,\n  RemuxedUserdata,\n} from '../types/remuxer';\nimport { PlaylistLevelType } from '../types/loader';\nimport {\n  RationalTimestamp,\n  toMsFromMpegTsClock,\n} from '../utils/timescale-conversion';\nimport type {\n  AudioSample,\n  VideoSample,\n  DemuxedAudioTrack,\n  DemuxedVideoTrack,\n  DemuxedMetadataTrack,\n  DemuxedUserdataTrack,\n} from '../types/demuxer';\nimport type { TrackSet } from '../types/track';\nimport type { SourceBufferName } from '../types/buffer';\nimport type { Fragment } from '../loader/fragment';\nimport type { HlsConfig } from '../config';\nimport type { TypeSupported } from '../utils/codecs';\n\nconst MAX_SILENT_FRAME_DURATION = 10 * 1000; // 10 seconds\nconst AAC_SAMPLES_PER_FRAME = 1024;\nconst MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;\nconst AC3_SAMPLES_PER_FRAME = 1536;\n\nlet chromeVersion: number | null = null;\nlet safariWebkitVersion: number | null = null;\n\nexport default class MP4Remuxer implements Remuxer {\n  private observer: HlsEventEmitter;\n  private config: HlsConfig;\n  private typeSupported: TypeSupported;\n  private ISGenerated: boolean = false;\n  private _initPTS: RationalTimestamp | null = null;\n  private _initDTS: RationalTimestamp | null = null;\n  private nextAvcDts: number | null = null;\n  private nextAudioPts: number | null = null;\n  private videoSampleDuration: number | null = null;\n  private isAudioContiguous: boolean = false;\n  private isVideoContiguous: boolean = false;\n  private videoTrackConfig?: {\n    width?: number;\n    height?: number;\n    pixelRatio?: [number, number];\n  };\n\n  constructor(\n    observer: HlsEventEmitter,\n    config: HlsConfig,\n    typeSupported,\n    vendor = '',\n  ) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.ISGenerated = false;\n\n    if (chromeVersion === null) {\n      const userAgent = navigator.userAgent || '';\n      const result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n    if (safariWebkitVersion === null) {\n      const result = navigator.userAgent.match(/Safari\\/(\\d+)/i);\n      safariWebkitVersion = result ? parseInt(result[1]) : 0;\n    }\n  }\n\n  destroy() {\n    // @ts-ignore\n    this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null;\n  }\n\n  resetTimeStamp(defaultTimeStamp: RationalTimestamp | null) {\n    logger.log('[mp4-remuxer]: initPTS & initDTS reset');\n    this._initPTS = this._initDTS = defaultTimeStamp;\n  }\n\n  resetNextTimestamp() {\n    logger.log('[mp4-remuxer]: reset next timestamp');\n    this.isVideoContiguous = false;\n    this.isAudioContiguous = false;\n  }\n\n  resetInitSegment() {\n    logger.log('[mp4-remuxer]: ISGenerated flag reset');\n    this.ISGenerated = false;\n    this.videoTrackConfig = undefined;\n  }\n\n  getVideoStartPts(videoSamples) {\n    let rolloverDetected = false;\n    const startPTS = videoSamples.reduce((minPTS, sample) => {\n      const delta = sample.pts - minPTS;\n      if (delta < -4294967296) {\n        // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation\n        rolloverDetected = true;\n        return normalizePts(minPTS, sample.pts);\n      } else if (delta > 0) {\n        return minPTS;\n      } else {\n        return sample.pts;\n      }\n    }, videoSamples[0].pts);\n    if (rolloverDetected) {\n      logger.debug('PTS rollover detected');\n    }\n    return startPTS;\n  }\n\n  remux(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: DemuxedVideoTrack,\n    id3Track: DemuxedMetadataTrack,\n    textTrack: DemuxedUserdataTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    flush: boolean,\n    playlistType: PlaylistLevelType,\n  ): RemuxerResult {\n    let video: RemuxedTrack | undefined;\n    let audio: RemuxedTrack | undefined;\n    let initSegment: InitSegmentData | undefined;\n    let text: RemuxedUserdata | undefined;\n    let id3: RemuxedMetadata | undefined;\n    let independent: boolean | undefined;\n    let audioTimeOffset = timeOffset;\n    let videoTimeOffset = timeOffset;\n\n    // If we're remuxing audio and video progressively, wait until we've received enough samples for each track before proceeding.\n    // This is done to synchronize the audio and video streams. We know if the current segment will have samples if the \"pid\"\n    // parameter is greater than -1. The pid is set when the PMT is parsed, which contains the tracks list.\n    // However, if the initSegment has already been generated, or we've reached the end of a segment (flush),\n    // then we can remux one track without waiting for the other.\n    const hasAudio = audioTrack.pid > -1;\n    const hasVideo = videoTrack.pid > -1;\n    const length = videoTrack.samples.length;\n    const enoughAudioSamples = audioTrack.samples.length > 0;\n    const enoughVideoSamples = (flush && length > 0) || length > 1;\n    const canRemuxAvc =\n      ((!hasAudio || enoughAudioSamples) &&\n        (!hasVideo || enoughVideoSamples)) ||\n      this.ISGenerated ||\n      flush;\n\n    if (canRemuxAvc) {\n      if (this.ISGenerated) {\n        const config = this.videoTrackConfig;\n        if (\n          config &&\n          (videoTrack.width !== config.width ||\n            videoTrack.height !== config.height ||\n            videoTrack.pixelRatio?.[0] !== config.pixelRatio?.[0] ||\n            videoTrack.pixelRatio?.[1] !== config.pixelRatio?.[1])\n        ) {\n          this.resetInitSegment();\n        }\n      } else {\n        initSegment = this.generateIS(\n          audioTrack,\n          videoTrack,\n          timeOffset,\n          accurateTimeOffset,\n        );\n      }\n\n      const isVideoContiguous = this.isVideoContiguous;\n      let firstKeyFrameIndex = -1;\n      let firstKeyFramePTS;\n\n      if (enoughVideoSamples) {\n        firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);\n        if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {\n          independent = true;\n          if (firstKeyFrameIndex > 0) {\n            logger.warn(\n              `[mp4-remuxer]: Dropped ${firstKeyFrameIndex} out of ${length} video samples due to a missing keyframe`,\n            );\n            const startPTS = this.getVideoStartPts(videoTrack.samples);\n            videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);\n            videoTrack.dropped += firstKeyFrameIndex;\n            videoTimeOffset +=\n              (videoTrack.samples[0].pts - startPTS) /\n              videoTrack.inputTimeScale;\n            firstKeyFramePTS = videoTimeOffset;\n          } else if (firstKeyFrameIndex === -1) {\n            logger.warn(\n              `[mp4-remuxer]: No keyframe found out of ${length} video samples`,\n            );\n            independent = false;\n          }\n        }\n      }\n\n      if (this.ISGenerated) {\n        if (enoughAudioSamples && enoughVideoSamples) {\n          // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n          // if first audio DTS is not aligned with first video DTS then we need to take that into account\n          // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n          // drift between audio and video streams\n          const startPTS = this.getVideoStartPts(videoTrack.samples);\n          const tsDelta =\n            normalizePts(audioTrack.samples[0].pts, startPTS) - startPTS;\n          const audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;\n          audioTimeOffset += Math.max(0, audiovideoTimestampDelta);\n          videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);\n        }\n\n        // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is calculated in remuxAudio.\n        if (enoughAudioSamples) {\n          // if initSegment was generated without audio samples, regenerate it again\n          if (!audioTrack.samplerate) {\n            logger.warn(\n              '[mp4-remuxer]: regenerate InitSegment as audio detected',\n            );\n            initSegment = this.generateIS(\n              audioTrack,\n              videoTrack,\n              timeOffset,\n              accurateTimeOffset,\n            );\n          }\n          audio = this.remuxAudio(\n            audioTrack,\n            audioTimeOffset,\n            this.isAudioContiguous,\n            accurateTimeOffset,\n            hasVideo ||\n              enoughVideoSamples ||\n              playlistType === PlaylistLevelType.AUDIO\n              ? videoTimeOffset\n              : undefined,\n          );\n          if (enoughVideoSamples) {\n            const audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0;\n            // if initSegment was generated without video samples, regenerate it again\n            if (!videoTrack.inputTimeScale) {\n              logger.warn(\n                '[mp4-remuxer]: regenerate InitSegment as video detected',\n              );\n              initSegment = this.generateIS(\n                audioTrack,\n                videoTrack,\n                timeOffset,\n                accurateTimeOffset,\n              );\n            }\n            video = this.remuxVideo(\n              videoTrack,\n              videoTimeOffset,\n              isVideoContiguous,\n              audioTrackLength,\n            );\n          }\n        } else if (enoughVideoSamples) {\n          video = this.remuxVideo(\n            videoTrack,\n            videoTimeOffset,\n            isVideoContiguous,\n            0,\n          );\n        }\n        if (video) {\n          video.firstKeyFrame = firstKeyFrameIndex;\n          video.independent = firstKeyFrameIndex !== -1;\n          video.firstKeyFramePTS = firstKeyFramePTS;\n        }\n      }\n    }\n\n    // Allow ID3 and text to remux, even if more audio/video samples are required\n    if (this.ISGenerated && this._initPTS && this._initDTS) {\n      if (id3Track.samples.length) {\n        id3 = flushTextTrackMetadataCueSamples(\n          id3Track,\n          timeOffset,\n          this._initPTS,\n          this._initDTS,\n        );\n      }\n\n      if (textTrack.samples.length) {\n        text = flushTextTrackUserdataCueSamples(\n          textTrack,\n          timeOffset,\n          this._initPTS,\n        );\n      }\n    }\n\n    return {\n      audio,\n      video,\n      initSegment,\n      independent,\n      text,\n      id3,\n    };\n  }\n\n  generateIS(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: DemuxedVideoTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n  ): InitSegmentData | undefined {\n    const audioSamples = audioTrack.samples;\n    const videoSamples = videoTrack.samples;\n    const typeSupported = this.typeSupported;\n    const tracks: TrackSet = {};\n    const _initPTS = this._initPTS;\n    let computePTSDTS = !_initPTS || accurateTimeOffset;\n    let container = 'audio/mp4';\n    let initPTS: number | undefined;\n    let initDTS: number | undefined;\n    let timescale: number | undefined;\n\n    if (computePTSDTS) {\n      initPTS = initDTS = Infinity;\n    }\n\n    if (audioTrack.config && audioSamples.length) {\n      // let's use audio sampling rate as MP4 time scale.\n      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n      // using audio sampling rate here helps having an integer MP4 frame duration\n      // this avoids potential rounding issue and AV sync issue\n      audioTrack.timescale = audioTrack.samplerate;\n      switch (audioTrack.segmentCodec) {\n        case 'mp3':\n          if (typeSupported.mpeg) {\n            // Chrome and Safari\n            container = 'audio/mpeg';\n            audioTrack.codec = '';\n          } else if (typeSupported.mp3) {\n            // Firefox\n            audioTrack.codec = 'mp3';\n          }\n          break;\n\n        case 'ac3':\n          audioTrack.codec = 'ac-3';\n          break;\n      }\n      tracks.audio = {\n        id: 'audio',\n        container: container,\n        codec: audioTrack.codec,\n        initSegment:\n          audioTrack.segmentCodec === 'mp3' && typeSupported.mpeg\n            ? new Uint8Array(0)\n            : MP4.initSegment([audioTrack]),\n        metadata: {\n          channelCount: audioTrack.channelCount,\n        },\n      };\n      if (computePTSDTS) {\n        timescale = audioTrack.inputTimeScale;\n        if (!_initPTS || timescale !== _initPTS.timescale) {\n          // remember first PTS of this demuxing context. for audio, PTS = DTS\n          initPTS = initDTS =\n            audioSamples[0].pts - Math.round(timescale * timeOffset);\n        } else {\n          computePTSDTS = false;\n        }\n      }\n    }\n\n    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n      // let's use input time scale as MP4 video timescale\n      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n      videoTrack.timescale = videoTrack.inputTimeScale;\n      tracks.video = {\n        id: 'main',\n        container: 'video/mp4',\n        codec: videoTrack.codec,\n        initSegment: MP4.initSegment([videoTrack]),\n        metadata: {\n          width: videoTrack.width,\n          height: videoTrack.height,\n        },\n      };\n      if (computePTSDTS) {\n        timescale = videoTrack.inputTimeScale;\n        if (!_initPTS || timescale !== _initPTS.timescale) {\n          const startPTS = this.getVideoStartPts(videoSamples);\n          const startOffset = Math.round(timescale * timeOffset);\n          initDTS = Math.min(\n            initDTS as number,\n            normalizePts(videoSamples[0].dts, startPTS) - startOffset,\n          );\n          initPTS = Math.min(initPTS as number, startPTS - startOffset);\n        } else {\n          computePTSDTS = false;\n        }\n      }\n      this.videoTrackConfig = {\n        width: videoTrack.width,\n        height: videoTrack.height,\n        pixelRatio: videoTrack.pixelRatio,\n      };\n    }\n\n    if (Object.keys(tracks).length) {\n      this.ISGenerated = true;\n      if (computePTSDTS) {\n        this._initPTS = {\n          baseTime: initPTS as number,\n          timescale: timescale as number,\n        };\n        this._initDTS = {\n          baseTime: initDTS as number,\n          timescale: timescale as number,\n        };\n      } else {\n        initPTS = timescale = undefined;\n      }\n\n      return {\n        tracks,\n        initPTS,\n        timescale,\n      };\n    }\n  }\n\n  remuxVideo(\n    track: DemuxedVideoTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    audioTrackLength: number,\n  ): RemuxedTrack | undefined {\n    const timeScale: number = track.inputTimeScale;\n    const inputSamples: Array<VideoSample> = track.samples;\n    const outputSamples: Array<Mp4Sample> = [];\n    const nbSamples = inputSamples.length;\n    const initPTS = this._initPTS as RationalTimestamp;\n    let nextAvcDts = this.nextAvcDts;\n    let offset = 8;\n    let mp4SampleDuration = this.videoSampleDuration;\n    let firstDTS;\n    let lastDTS;\n    let minPTS: number = Number.POSITIVE_INFINITY;\n    let maxPTS: number = Number.NEGATIVE_INFINITY;\n    let sortSamples = false;\n\n    // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n    if (!contiguous || nextAvcDts === null) {\n      const pts = timeOffset * timeScale;\n      const cts =\n        inputSamples[0].pts -\n        normalizePts(inputSamples[0].dts, inputSamples[0].pts);\n      if (\n        chromeVersion &&\n        nextAvcDts !== null &&\n        Math.abs(pts - cts - nextAvcDts) < 15000\n      ) {\n        // treat as contigous to adjust samples that would otherwise produce video buffer gaps in Chrome\n        contiguous = true;\n      } else {\n        // if not contiguous, let's use target timeOffset\n        nextAvcDts = pts - cts;\n      }\n    }\n\n    // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n    // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n    const initTime = (initPTS.baseTime * timeScale) / initPTS.timescale;\n    for (let i = 0; i < nbSamples; i++) {\n      const sample = inputSamples[i];\n      sample.pts = normalizePts(sample.pts - initTime, nextAvcDts);\n      sample.dts = normalizePts(sample.dts - initTime, nextAvcDts);\n      if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {\n        sortSamples = true;\n      }\n    }\n\n    // sort video samples by DTS then PTS then demux id order\n    if (sortSamples) {\n      inputSamples.sort(function (a, b) {\n        const deltadts = a.dts - b.dts;\n        const deltapts = a.pts - b.pts;\n        return deltadts || deltapts;\n      });\n    }\n\n    // Get first/last DTS\n    firstDTS = inputSamples[0].dts;\n    lastDTS = inputSamples[inputSamples.length - 1].dts;\n\n    // Sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n    // set this constant duration as being the avg delta between consecutive DTS.\n    const inputDuration = lastDTS - firstDTS;\n    const averageSampleDuration = inputDuration\n      ? Math.round(inputDuration / (nbSamples - 1))\n      : mp4SampleDuration || track.inputTimeScale / 30;\n\n    // if fragment are contiguous, detect hole/overlapping between fragments\n    if (contiguous) {\n      // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)\n      const delta = firstDTS - nextAvcDts;\n      const foundHole = delta > averageSampleDuration;\n      const foundOverlap = delta < -1;\n      if (foundHole || foundOverlap) {\n        if (foundHole) {\n          logger.warn(\n            `${(track.segmentCodec || '').toUpperCase()}: ${toMsFromMpegTsClock(\n              delta,\n              true,\n            )} ms (${delta}dts) hole between fragments detected at ${timeOffset.toFixed(\n              3,\n            )}`,\n          );\n        } else {\n          logger.warn(\n            `${(track.segmentCodec || '').toUpperCase()}: ${toMsFromMpegTsClock(\n              -delta,\n              true,\n            )} ms (${delta}dts) overlapping between fragments detected at ${timeOffset.toFixed(\n              3,\n            )}`,\n          );\n        }\n        if (\n          !foundOverlap ||\n          nextAvcDts >= inputSamples[0].pts ||\n          chromeVersion\n        ) {\n          firstDTS = nextAvcDts;\n          const firstPTS = inputSamples[0].pts - delta;\n          if (foundHole) {\n            inputSamples[0].dts = firstDTS;\n            inputSamples[0].pts = firstPTS;\n          } else {\n            let isPTSOrderRetained = true;\n            for (let i = 0; i < inputSamples.length; i++) {\n              if (inputSamples[i].dts > firstPTS && isPTSOrderRetained) {\n                break;\n              }\n\n              const prevPTS = inputSamples[i].pts;\n              inputSamples[i].dts -= delta;\n              inputSamples[i].pts -= delta;\n\n              // check to see if this sample's PTS order has changed\n              // relative to the next one\n              if (i < inputSamples.length - 1) {\n                const nextSamplePTS = inputSamples[i + 1].pts;\n                const currentSamplePTS = inputSamples[i].pts;\n\n                const currentOrder = nextSamplePTS <= currentSamplePTS;\n                const prevOrder = nextSamplePTS <= prevPTS;\n\n                isPTSOrderRetained = currentOrder == prevOrder;\n              }\n            }\n          }\n          logger.log(\n            `Video: Initial PTS/DTS adjusted: ${toMsFromMpegTsClock(\n              firstPTS,\n              true,\n            )}/${toMsFromMpegTsClock(\n              firstDTS,\n              true,\n            )}, delta: ${toMsFromMpegTsClock(delta, true)} ms`,\n          );\n        }\n      }\n    }\n\n    firstDTS = Math.max(0, firstDTS);\n\n    let nbNalu = 0;\n    let naluLen = 0;\n    let dtsStep = firstDTS;\n    for (let i = 0; i < nbSamples; i++) {\n      // compute total/avc sample length and nb of NAL units\n      const sample = inputSamples[i];\n      const units = sample.units;\n      const nbUnits = units.length;\n      let sampleLen = 0;\n      for (let j = 0; j < nbUnits; j++) {\n        sampleLen += units[j].data.length;\n      }\n\n      naluLen += sampleLen;\n      nbNalu += nbUnits;\n      sample.length = sampleLen;\n\n      // ensure sample monotonic DTS\n      if (sample.dts < dtsStep) {\n        sample.dts = dtsStep;\n        dtsStep += (averageSampleDuration / 4) | 0 || 1;\n      } else {\n        dtsStep = sample.dts;\n      }\n\n      minPTS = Math.min(sample.pts, minPTS);\n      maxPTS = Math.max(sample.pts, maxPTS);\n    }\n    lastDTS = inputSamples[nbSamples - 1].dts;\n\n    /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n    const mdatSize = naluLen + 4 * nbNalu + 8;\n    let mdat;\n    try {\n      mdat = new Uint8Array(mdatSize);\n    } catch (err) {\n      this.observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MUX_ERROR,\n        details: ErrorDetails.REMUX_ALLOC_ERROR,\n        fatal: false,\n        error: err,\n        bytes: mdatSize,\n        reason: `fail allocating video mdat ${mdatSize}`,\n      });\n      return;\n    }\n    const view = new DataView(mdat.buffer);\n    view.setUint32(0, mdatSize);\n    mdat.set(MP4.types.mdat, 4);\n\n    let stretchedLastFrame = false;\n    let minDtsDelta = Number.POSITIVE_INFINITY;\n    let minPtsDelta = Number.POSITIVE_INFINITY;\n    let maxDtsDelta = Number.NEGATIVE_INFINITY;\n    let maxPtsDelta = Number.NEGATIVE_INFINITY;\n    for (let i = 0; i < nbSamples; i++) {\n      const VideoSample = inputSamples[i];\n      const VideoSampleUnits = VideoSample.units;\n      let mp4SampleLength = 0;\n      // convert NALU bitstream to MP4 format (prepend NALU with size field)\n      for (let j = 0, nbUnits = VideoSampleUnits.length; j < nbUnits; j++) {\n        const unit = VideoSampleUnits[j];\n        const unitData = unit.data;\n        const unitDataLen = unit.data.byteLength;\n        view.setUint32(offset, unitDataLen);\n        offset += 4;\n        mdat.set(unitData, offset);\n        offset += unitDataLen;\n        mp4SampleLength += 4 + unitDataLen;\n      }\n\n      // expected sample duration is the Decoding Timestamp diff of consecutive samples\n      let ptsDelta;\n      if (i < nbSamples - 1) {\n        mp4SampleDuration = inputSamples[i + 1].dts - VideoSample.dts;\n        ptsDelta = inputSamples[i + 1].pts - VideoSample.pts;\n      } else {\n        const config = this.config;\n        const lastFrameDuration =\n          i > 0\n            ? VideoSample.dts - inputSamples[i - 1].dts\n            : averageSampleDuration;\n        ptsDelta =\n          i > 0\n            ? VideoSample.pts - inputSamples[i - 1].pts\n            : averageSampleDuration;\n        if (config.stretchShortVideoTrack && this.nextAudioPts !== null) {\n          // In some cases, a segment's audio track duration may exceed the video track duration.\n          // Since we've already remuxed audio, and we know how long the audio track is, we look to\n          // see if the delta to the next segment is longer than maxBufferHole.\n          // If so, playback would potentially get stuck, so we artificially inflate\n          // the duration of the last frame to minimize any potential gap between segments.\n          const gapTolerance = Math.floor(config.maxBufferHole * timeScale);\n          const deltaToFrameEnd =\n            (audioTrackLength\n              ? minPTS + audioTrackLength * timeScale\n              : this.nextAudioPts) - VideoSample.pts;\n          if (deltaToFrameEnd > gapTolerance) {\n            // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n            // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n            mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n            if (mp4SampleDuration < 0) {\n              mp4SampleDuration = lastFrameDuration;\n            } else {\n              stretchedLastFrame = true;\n            }\n            logger.log(\n              `[mp4-remuxer]: It is approximately ${\n                deltaToFrameEnd / 90\n              } ms to the next segment; using duration ${\n                mp4SampleDuration / 90\n              } ms for the last video frame.`,\n            );\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        } else {\n          mp4SampleDuration = lastFrameDuration;\n        }\n      }\n      const compositionTimeOffset = Math.round(\n        VideoSample.pts - VideoSample.dts,\n      );\n      minDtsDelta = Math.min(minDtsDelta, mp4SampleDuration);\n      maxDtsDelta = Math.max(maxDtsDelta, mp4SampleDuration);\n      minPtsDelta = Math.min(minPtsDelta, ptsDelta);\n      maxPtsDelta = Math.max(maxPtsDelta, ptsDelta);\n\n      outputSamples.push(\n        new Mp4Sample(\n          VideoSample.key,\n          mp4SampleDuration,\n          mp4SampleLength,\n          compositionTimeOffset,\n        ),\n      );\n    }\n\n    if (outputSamples.length) {\n      if (chromeVersion) {\n        if (chromeVersion < 70) {\n          // Chrome workaround, mark first sample as being a Random Access Point (keyframe) to avoid sourcebuffer append issue\n          // https://code.google.com/p/chromium/issues/detail?id=229412\n          const flags = outputSamples[0].flags;\n          flags.dependsOn = 2;\n          flags.isNonSync = 0;\n        }\n      } else if (safariWebkitVersion) {\n        // Fix for \"CNN special report, with CC\" in test-streams (Safari browser only)\n        // Ignore DTS when frame durations are irregular. Safari MSE does not handle this leading to gaps.\n        if (\n          maxPtsDelta - minPtsDelta < maxDtsDelta - minDtsDelta &&\n          averageSampleDuration / maxDtsDelta < 0.025 &&\n          outputSamples[0].cts === 0\n        ) {\n          logger.warn(\n            'Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.',\n          );\n          let dts = firstDTS;\n          for (let i = 0, len = outputSamples.length; i < len; i++) {\n            const nextDts = dts + outputSamples[i].duration;\n            const pts = dts + outputSamples[i].cts;\n            if (i < len - 1) {\n              const nextPts = nextDts + outputSamples[i + 1].cts;\n              outputSamples[i].duration = nextPts - pts;\n            } else {\n              outputSamples[i].duration = i\n                ? outputSamples[i - 1].duration\n                : averageSampleDuration;\n            }\n            outputSamples[i].cts = 0;\n            dts = nextDts;\n          }\n        }\n      }\n    }\n    // next AVC/HEVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n    mp4SampleDuration =\n      stretchedLastFrame || !mp4SampleDuration\n        ? averageSampleDuration\n        : mp4SampleDuration;\n    this.nextAvcDts = nextAvcDts = lastDTS + mp4SampleDuration;\n    this.videoSampleDuration = mp4SampleDuration;\n    this.isVideoContiguous = true;\n    const moof = MP4.moof(\n      track.sequenceNumber++,\n      firstDTS,\n      Object.assign({}, track, {\n        samples: outputSamples,\n      }),\n    );\n    const type: SourceBufferName = 'video';\n    const data = {\n      data1: moof,\n      data2: mdat,\n      startPTS: minPTS / timeScale,\n      endPTS: (maxPTS + mp4SampleDuration) / timeScale,\n      startDTS: firstDTS / timeScale,\n      endDTS: (nextAvcDts as number) / timeScale,\n      type,\n      hasAudio: false,\n      hasVideo: true,\n      nb: outputSamples.length,\n      dropped: track.dropped,\n    };\n    track.samples = [];\n    track.dropped = 0;\n    return data;\n  }\n\n  getSamplesPerFrame(track: DemuxedAudioTrack) {\n    switch (track.segmentCodec) {\n      case 'mp3':\n        return MPEG_AUDIO_SAMPLE_PER_FRAME;\n      case 'ac3':\n        return AC3_SAMPLES_PER_FRAME;\n      default:\n        return AAC_SAMPLES_PER_FRAME;\n    }\n  }\n\n  remuxAudio(\n    track: DemuxedAudioTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    accurateTimeOffset: boolean,\n    videoTimeOffset?: number,\n  ): RemuxedTrack | undefined {\n    const inputTimeScale: number = track.inputTimeScale;\n    const mp4timeScale: number = track.samplerate\n      ? track.samplerate\n      : inputTimeScale;\n    const scaleFactor: number = inputTimeScale / mp4timeScale;\n    const mp4SampleDuration: number = this.getSamplesPerFrame(track);\n    const inputSampleDuration: number = mp4SampleDuration * scaleFactor;\n    const initPTS = this._initPTS as RationalTimestamp;\n    const rawMPEG: boolean =\n      track.segmentCodec === 'mp3' && this.typeSupported.mpeg;\n    const outputSamples: Array<Mp4Sample> = [];\n    const alignedWithVideo = videoTimeOffset !== undefined;\n\n    let inputSamples: Array<AudioSample> = track.samples;\n    let offset: number = rawMPEG ? 0 : 8;\n    let nextAudioPts: number = this.nextAudioPts || -1;\n\n    // window.audioSamples ? window.audioSamples.push(inputSamples.map(s => s.pts)) : (window.audioSamples = [inputSamples.map(s => s.pts)]);\n\n    // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n    // for sake of clarity:\n    // consecutive fragments are frags with\n    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n    //  - less than 20 audio frames distance\n    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n    // this helps ensuring audio continuity\n    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n    const timeOffsetMpegTS = timeOffset * inputTimeScale;\n    const initTime = (initPTS.baseTime * inputTimeScale) / initPTS.timescale;\n    this.isAudioContiguous = contiguous =\n      contiguous ||\n      ((inputSamples.length &&\n        nextAudioPts > 0 &&\n        ((accurateTimeOffset &&\n          Math.abs(timeOffsetMpegTS - nextAudioPts) < 9000) ||\n          Math.abs(\n            normalizePts(inputSamples[0].pts - initTime, timeOffsetMpegTS) -\n              nextAudioPts,\n          ) <\n            20 * inputSampleDuration)) as boolean);\n\n    // compute normalized PTS\n    inputSamples.forEach(function (sample) {\n      sample.pts = normalizePts(sample.pts - initTime, timeOffsetMpegTS);\n    });\n\n    if (!contiguous || nextAudioPts < 0) {\n      // filter out sample with negative PTS that are not playable anyway\n      // if we don't remove these negative samples, they will shift all audio samples forward.\n      // leading to audio overlap between current / next fragment\n      inputSamples = inputSamples.filter((sample) => sample.pts >= 0);\n\n      // in case all samples have negative PTS, and have been filtered out, return now\n      if (!inputSamples.length) {\n        return;\n      }\n\n      if (videoTimeOffset === 0) {\n        // Set the start to 0 to match video so that start gaps larger than inputSampleDuration are filled with silence\n        nextAudioPts = 0;\n      } else if (accurateTimeOffset && !alignedWithVideo) {\n        // When not seeking, not live, and LevelDetails.PTSKnown, use fragment start as predicted next audio PTS\n        nextAudioPts = Math.max(0, timeOffsetMpegTS);\n      } else {\n        // if frags are not contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n        nextAudioPts = inputSamples[0].pts;\n      }\n    }\n\n    // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n    // In an effort to prevent this from happening, we inject frames here where there are gaps.\n    // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n    // frame.\n\n    if (track.segmentCodec === 'aac') {\n      const maxAudioFramesDrift = this.config.maxAudioFramesDrift;\n      for (let i = 0, nextPts = nextAudioPts; i < inputSamples.length; i++) {\n        // First, let's see how far off this frame is from where we expect it to be\n        const sample = inputSamples[i];\n        const pts = sample.pts;\n        const delta = pts - nextPts;\n        const duration = Math.abs((1000 * delta) / inputTimeScale);\n\n        // When remuxing with video, if we're overlapping by more than a duration, drop this sample to stay in sync\n        if (\n          delta <= -maxAudioFramesDrift * inputSampleDuration &&\n          alignedWithVideo\n        ) {\n          if (i === 0) {\n            logger.warn(\n              `Audio frame @ ${(pts / inputTimeScale).toFixed(\n                3,\n              )}s overlaps nextAudioPts by ${Math.round(\n                (1000 * delta) / inputTimeScale,\n              )} ms.`,\n            );\n            this.nextAudioPts = nextAudioPts = nextPts = pts;\n          }\n        } // eslint-disable-line brace-style\n\n        // Insert missing frames if:\n        // 1: We're more than maxAudioFramesDrift frame away\n        // 2: Not more than MAX_SILENT_FRAME_DURATION away\n        // 3: currentTime (aka nextPtsNorm) is not 0\n        // 4: remuxing with video (videoTimeOffset !== undefined)\n        else if (\n          delta >= maxAudioFramesDrift * inputSampleDuration &&\n          duration < MAX_SILENT_FRAME_DURATION &&\n          alignedWithVideo\n        ) {\n          let missing = Math.round(delta / inputSampleDuration);\n          // Adjust nextPts so that silent samples are aligned with media pts. This will prevent media samples from\n          // later being shifted if nextPts is based on timeOffset and delta is not a multiple of inputSampleDuration.\n          nextPts = pts - missing * inputSampleDuration;\n          if (nextPts < 0) {\n            missing--;\n            nextPts += inputSampleDuration;\n          }\n          if (i === 0) {\n            this.nextAudioPts = nextAudioPts = nextPts;\n          }\n          logger.warn(\n            `[mp4-remuxer]: Injecting ${missing} audio frame @ ${(\n              nextPts / inputTimeScale\n            ).toFixed(3)}s due to ${Math.round(\n              (1000 * delta) / inputTimeScale,\n            )} ms gap.`,\n          );\n          for (let j = 0; j < missing; j++) {\n            const newStamp = Math.max(nextPts as number, 0);\n            let fillFrame = AAC.getSilentFrame(\n              track.parsedCodec || track.manifestCodec || track.codec,\n              track.channelCount,\n            );\n            if (!fillFrame) {\n              logger.log(\n                '[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead.',\n              );\n              fillFrame = sample.unit.subarray();\n            }\n            inputSamples.splice(i, 0, {\n              unit: fillFrame,\n              pts: newStamp,\n            });\n            nextPts += inputSampleDuration;\n            i++;\n          }\n        }\n        sample.pts = nextPts;\n        nextPts += inputSampleDuration;\n      }\n    }\n    let firstPTS: number | null = null;\n    let lastPTS: number | null = null;\n    let mdat: any;\n    let mdatSize: number = 0;\n    let sampleLength: number = inputSamples.length;\n    while (sampleLength--) {\n      mdatSize += inputSamples[sampleLength].unit.byteLength;\n    }\n    for (let j = 0, nbSamples = inputSamples.length; j < nbSamples; j++) {\n      const audioSample = inputSamples[j];\n      const unit = audioSample.unit;\n      let pts = audioSample.pts;\n      if (lastPTS !== null) {\n        // If we have more than one sample, set the duration of the sample to the \"real\" duration; the PTS diff with\n        // the previous sample\n        const prevSample = outputSamples[j - 1];\n        prevSample.duration = Math.round((pts - lastPTS) / scaleFactor);\n      } else {\n        if (contiguous && track.segmentCodec === 'aac') {\n          // set PTS/DTS to expected PTS/DTS\n          pts = nextAudioPts;\n        }\n        // remember first PTS of our audioSamples\n        firstPTS = pts;\n        if (mdatSize > 0) {\n          /* concatenate the audio data and construct the mdat in place\n            (need 8 more bytes to fill length and mdat type) */\n          mdatSize += offset;\n          try {\n            mdat = new Uint8Array(mdatSize);\n          } catch (err) {\n            this.observer.emit(Events.ERROR, Events.ERROR, {\n              type: ErrorTypes.MUX_ERROR,\n              details: ErrorDetails.REMUX_ALLOC_ERROR,\n              fatal: false,\n              error: err,\n              bytes: mdatSize,\n              reason: `fail allocating audio mdat ${mdatSize}`,\n            });\n            return;\n          }\n          if (!rawMPEG) {\n            const view = new DataView(mdat.buffer);\n            view.setUint32(0, mdatSize);\n            mdat.set(MP4.types.mdat, 4);\n          }\n        } else {\n          // no audio samples\n          return;\n        }\n      }\n      mdat.set(unit, offset);\n      const unitLen = unit.byteLength;\n      offset += unitLen;\n      // Default the sample's duration to the computed mp4SampleDuration, which will either be 1024 for AAC or 1152 for MPEG\n      // In the case that we have 1 sample, this will be the duration. If we have more than one sample, the duration\n      // becomes the PTS diff with the previous sample\n      outputSamples.push(new Mp4Sample(true, mp4SampleDuration, unitLen, 0));\n      lastPTS = pts;\n    }\n\n    // We could end up with no audio samples if all input samples were overlapping with the previously remuxed ones\n    const nbSamples = outputSamples.length;\n    if (!nbSamples) {\n      return;\n    }\n\n    // The next audio sample PTS should be equal to last sample PTS + duration\n    const lastSample = outputSamples[outputSamples.length - 1];\n    this.nextAudioPts = nextAudioPts =\n      lastPTS! + scaleFactor * lastSample.duration;\n\n    // Set the track samples from inputSamples to outputSamples before remuxing\n    const moof = rawMPEG\n      ? new Uint8Array(0)\n      : MP4.moof(\n          track.sequenceNumber++,\n          firstPTS! / scaleFactor,\n          Object.assign({}, track, { samples: outputSamples }),\n        );\n\n    // Clear the track samples. This also clears the samples array in the demuxer, since the reference is shared\n    track.samples = [];\n    const start = firstPTS! / inputTimeScale;\n    const end = nextAudioPts / inputTimeScale;\n    const type: SourceBufferName = 'audio';\n    const audioData = {\n      data1: moof,\n      data2: mdat,\n      startPTS: start,\n      endPTS: end,\n      startDTS: start,\n      endDTS: end,\n      type,\n      hasAudio: true,\n      hasVideo: false,\n      nb: nbSamples,\n    };\n\n    this.isAudioContiguous = true;\n    return audioData;\n  }\n\n  remuxEmptyAudio(\n    track: DemuxedAudioTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    videoData: Fragment,\n  ): RemuxedTrack | undefined {\n    const inputTimeScale: number = track.inputTimeScale;\n    const mp4timeScale: number = track.samplerate\n      ? track.samplerate\n      : inputTimeScale;\n    const scaleFactor: number = inputTimeScale / mp4timeScale;\n    const nextAudioPts: number | null = this.nextAudioPts;\n    // sync with video's timestamp\n    const initDTS = this._initDTS as RationalTimestamp;\n    const init90kHz = (initDTS.baseTime * 90000) / initDTS.timescale;\n    const startDTS: number =\n      (nextAudioPts !== null\n        ? nextAudioPts\n        : videoData.startDTS * inputTimeScale) + init90kHz;\n    const endDTS: number = videoData.endDTS * inputTimeScale + init90kHz;\n    // one sample's duration value\n    const frameDuration: number = scaleFactor * AAC_SAMPLES_PER_FRAME;\n    // samples count of this segment's duration\n    const nbSamples: number = Math.ceil((endDTS - startDTS) / frameDuration);\n    // silent frame\n    const silentFrame: Uint8Array | undefined = AAC.getSilentFrame(\n      track.parsedCodec || track.manifestCodec || track.codec,\n      track.channelCount,\n    );\n\n    logger.warn('[mp4-remuxer]: remux empty Audio');\n    // Can't remux if we can't generate a silent frame...\n    if (!silentFrame) {\n      logger.trace(\n        '[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec',\n      );\n      return;\n    }\n\n    const samples: Array<any> = [];\n    for (let i = 0; i < nbSamples; i++) {\n      const stamp = startDTS + i * frameDuration;\n      samples.push({ unit: silentFrame, pts: stamp, dts: stamp });\n    }\n    track.samples = samples;\n\n    return this.remuxAudio(track, timeOffset, contiguous, false);\n  }\n}\n\nexport function normalizePts(value: number, reference: number | null): number {\n  let offset;\n  if (reference === null) {\n    return value;\n  }\n\n  if (reference < value) {\n    // - 2^33\n    offset = -8589934592;\n  } else {\n    // + 2^33\n    offset = 8589934592;\n  }\n  /* PTS is 33bit (from 0 to 2^33 -1)\n    if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n    PTS looping occured. fill the gap */\n  while (Math.abs(value - reference) > 4294967296) {\n    value += offset;\n  }\n\n  return value;\n}\n\nfunction findKeyframeIndex(samples: Array<VideoSample>): number {\n  for (let i = 0; i < samples.length; i++) {\n    if (samples[i].key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function flushTextTrackMetadataCueSamples(\n  track: DemuxedMetadataTrack,\n  timeOffset: number,\n  initPTS: RationalTimestamp,\n  initDTS: RationalTimestamp,\n): RemuxedMetadata | undefined {\n  const length = track.samples.length;\n  if (!length) {\n    return;\n  }\n  const inputTimeScale = track.inputTimeScale;\n  for (let index = 0; index < length; index++) {\n    const sample = track.samples[index];\n    // setting id3 pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n    sample.pts =\n      normalizePts(\n        sample.pts - (initPTS.baseTime * inputTimeScale) / initPTS.timescale,\n        timeOffset * inputTimeScale,\n      ) / inputTimeScale;\n    sample.dts =\n      normalizePts(\n        sample.dts - (initDTS.baseTime * inputTimeScale) / initDTS.timescale,\n        timeOffset * inputTimeScale,\n      ) / inputTimeScale;\n  }\n  const samples = track.samples;\n  track.samples = [];\n  return {\n    samples,\n  };\n}\n\nexport function flushTextTrackUserdataCueSamples(\n  track: DemuxedUserdataTrack,\n  timeOffset: number,\n  initPTS: RationalTimestamp,\n): RemuxedUserdata | undefined {\n  const length = track.samples.length;\n  if (!length) {\n    return;\n  }\n\n  const inputTimeScale = track.inputTimeScale;\n  for (let index = 0; index < length; index++) {\n    const sample = track.samples[index];\n    // setting text pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n    sample.pts =\n      normalizePts(\n        sample.pts - (initPTS.baseTime * inputTimeScale) / initPTS.timescale,\n        timeOffset * inputTimeScale,\n      ) / inputTimeScale;\n  }\n  track.samples.sort((a, b) => a.pts - b.pts);\n  const samples = track.samples;\n  track.samples = [];\n  return {\n    samples,\n  };\n}\n\ntype Mp4SampleFlags = {\n  isLeading: 0;\n  isDependedOn: 0;\n  hasRedundancy: 0;\n  degradPrio: 0;\n  dependsOn: 1 | 2;\n  isNonSync: 0 | 1;\n};\n\nclass Mp4Sample {\n  public size: number;\n  public duration: number;\n  public cts: number;\n  public flags: Mp4SampleFlags;\n\n  constructor(\n    isKeyframe: boolean,\n    duration: number,\n    size: number,\n    cts: number,\n  ) {\n    this.duration = duration;\n    this.size = size;\n    this.cts = cts;\n    this.flags = {\n      isLeading: 0,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradPrio: 0,\n      dependsOn: isKeyframe ? 2 : 1,\n      isNonSync: isKeyframe ? 0 : 1,\n    };\n  }\n}\n","/**\n * MediaSource helper\n */\n\nexport function getMediaSource(\n  preferManagedMediaSource = true,\n): typeof MediaSource | undefined {\n  if (typeof self === 'undefined') return undefined;\n  const mms =\n    (preferManagedMediaSource || !self.MediaSource) &&\n    ((self as any).ManagedMediaSource as undefined | typeof MediaSource);\n  return (\n    mms ||\n    self.MediaSource ||\n    ((self as any).WebKitMediaSource as typeof MediaSource)\n  );\n}\n","import { getMediaSource } from './mediasource-helper';\n\n// from http://mp4ra.org/codecs.html\n// values indicate codec selection preference (lower is higher priority)\nconst sampleEntryCodesISO = {\n  audio: {\n    a3ds: 1,\n    'ac-3': 0.95,\n    'ac-4': 1,\n    alac: 0.9,\n    alaw: 1,\n    dra1: 1,\n    'dts+': 1,\n    'dts-': 1,\n    dtsc: 1,\n    dtse: 1,\n    dtsh: 1,\n    'ec-3': 0.9,\n    enca: 1,\n    fLaC: 0.9, // MP4-RA listed codec entry for FLAC\n    flac: 0.9, // legacy browser codec name for FLAC\n    FLAC: 0.9, // some manifests may list \"FLAC\" with Apple's tools\n    g719: 1,\n    g726: 1,\n    m4ae: 1,\n    mha1: 1,\n    mha2: 1,\n    mhm1: 1,\n    mhm2: 1,\n    mlpa: 1,\n    mp4a: 1,\n    'raw ': 1,\n    Opus: 1,\n    opus: 1, // browsers expect this to be lowercase despite MP4RA says 'Opus'\n    samr: 1,\n    sawb: 1,\n    sawp: 1,\n    sevc: 1,\n    sqcp: 1,\n    ssmv: 1,\n    twos: 1,\n    ulaw: 1,\n  },\n  video: {\n    avc1: 1,\n    avc2: 1,\n    avc3: 1,\n    avc4: 1,\n    avcp: 1,\n    av01: 0.8,\n    drac: 1,\n    dva1: 1,\n    dvav: 1,\n    dvh1: 0.7,\n    dvhe: 0.7,\n    encv: 1,\n    hev1: 0.75,\n    hvc1: 0.75,\n    mjp2: 1,\n    mp4v: 1,\n    mvc1: 1,\n    mvc2: 1,\n    mvc3: 1,\n    mvc4: 1,\n    resv: 1,\n    rv60: 1,\n    s263: 1,\n    svc1: 1,\n    svc2: 1,\n    'vc-1': 1,\n    vp08: 1,\n    vp09: 0.9,\n  },\n  text: {\n    stpp: 1,\n    wvtt: 1,\n  },\n} as const;\n\nexport type CodecType = 'audio' | 'video';\n\nexport function isCodecType(codec: string, type: CodecType): boolean {\n  const typeCodes = sampleEntryCodesISO[type];\n  return !!typeCodes && !!typeCodes[codec.slice(0, 4)];\n}\n\nexport function areCodecsMediaSourceSupported(\n  codecs: string,\n  type: CodecType,\n  preferManagedMediaSource = true,\n): boolean {\n  return !codecs\n    .split(',')\n    .some(\n      (codec) =>\n        !isCodecMediaSourceSupported(codec, type, preferManagedMediaSource),\n    );\n}\n\nfunction isCodecMediaSourceSupported(\n  codec: string,\n  type: CodecType,\n  preferManagedMediaSource = true,\n): boolean {\n  const MediaSource = getMediaSource(preferManagedMediaSource);\n  return MediaSource?.isTypeSupported(mimeTypeForCodec(codec, type)) ?? false;\n}\n\nexport function mimeTypeForCodec(codec: string, type: CodecType): string {\n  return `${type}/mp4;codecs=\"${codec}\"`;\n}\n\nexport function videoCodecPreferenceValue(\n  videoCodec: string | undefined,\n): number {\n  if (videoCodec) {\n    const fourCC = videoCodec.substring(0, 4);\n    return sampleEntryCodesISO.video[fourCC];\n  }\n  return 2;\n}\n\nexport function codecsSetSelectionPreferenceValue(codecSet: string): number {\n  return codecSet.split(',').reduce((num, fourCC) => {\n    const preferenceValue = sampleEntryCodesISO.video[fourCC];\n    if (preferenceValue) {\n      return (preferenceValue * 2 + num) / (num ? 3 : 2);\n    }\n    return (sampleEntryCodesISO.audio[fourCC] + num) / (num ? 2 : 1);\n  }, 0);\n}\n\ninterface CodecNameCache {\n  flac?: string;\n  opus?: string;\n}\n\nconst CODEC_COMPATIBLE_NAMES: CodecNameCache = {};\n\ntype LowerCaseCodecType = 'flac' | 'opus';\n\nfunction getCodecCompatibleNameLower(\n  lowerCaseCodec: LowerCaseCodecType,\n  preferManagedMediaSource = true,\n): string {\n  if (CODEC_COMPATIBLE_NAMES[lowerCaseCodec]) {\n    return CODEC_COMPATIBLE_NAMES[lowerCaseCodec]!;\n  }\n\n  const codecsToCheck = {\n    // Idealy fLaC and Opus would be first (spec-compliant) but\n    // some browsers will report that fLaC is supported then fail.\n    // see: https://bugs.chromium.org/p/chromium/issues/detail?id=1422728\n    flac: ['flac', 'fLaC', 'FLAC'],\n    opus: ['opus', 'Opus'],\n    // Replace audio codec info if browser does not support mp4a.40.34,\n    // and demuxer can fallback to 'audio/mpeg' or 'audio/mp4;codecs=\"mp3\"'\n    'mp4a.40.34': ['mp3'],\n  }[lowerCaseCodec];\n\n  for (let i = 0; i < codecsToCheck.length; i++) {\n    if (\n      isCodecMediaSourceSupported(\n        codecsToCheck[i],\n        'audio',\n        preferManagedMediaSource,\n      )\n    ) {\n      CODEC_COMPATIBLE_NAMES[lowerCaseCodec] = codecsToCheck[i];\n      return codecsToCheck[i];\n    } else if (\n      codecsToCheck[i] === 'mp3' &&\n      getMediaSource(preferManagedMediaSource)?.isTypeSupported('audio/mpeg')\n    ) {\n      return '';\n    }\n  }\n\n  return lowerCaseCodec;\n}\n\nconst AUDIO_CODEC_REGEXP = /flac|opus|mp4a\\.40\\.34/i;\nexport function getCodecCompatibleName(\n  codec: string,\n  preferManagedMediaSource = true,\n): string {\n  return codec.replace(AUDIO_CODEC_REGEXP, (m) =>\n    getCodecCompatibleNameLower(\n      m.toLowerCase() as LowerCaseCodecType,\n      preferManagedMediaSource,\n    ),\n  );\n}\n\nexport function pickMostCompleteCodecName(\n  parsedCodec: string,\n  levelCodec: string | undefined,\n): string | undefined {\n  // Parsing of mp4a codecs strings in mp4-tools from media is incomplete as of d8c6c7a\n  // so use level codec is parsed codec is unavailable or incomplete\n  if (parsedCodec && parsedCodec !== 'mp4a') {\n    return parsedCodec;\n  }\n  return levelCodec;\n}\n\nexport function convertAVC1ToAVCOTI(codec: string) {\n  // Convert avc1 codec string from RFC-4281 to RFC-6381 for MediaSource.isTypeSupported\n  const avcdata = codec.split('.');\n  if (avcdata.length > 2) {\n    let result = avcdata.shift() + '.';\n    result += parseInt(avcdata.shift() as string).toString(16);\n    result += ('000' + parseInt(avcdata.shift() as string).toString(16)).slice(\n      -4,\n    );\n    return result;\n  }\n  return codec;\n}\n\nexport interface TypeSupported {\n  mpeg: boolean;\n  mp3: boolean;\n  ac3: boolean;\n}\n\nexport function getM2TSSupportedAudioTypes(\n  preferManagedMediaSource: boolean,\n): TypeSupported {\n  const MediaSource = getMediaSource(preferManagedMediaSource) || {\n    isTypeSupported: () => false,\n  };\n  return {\n    mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n    mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"'),\n    ac3: __USE_M2TS_ADVANCED_CODECS__\n      ? MediaSource.isTypeSupported('audio/mp4; codecs=\"ac-3\"')\n      : false,\n  };\n}\n","import {\n  flushTextTrackMetadataCueSamples,\n  flushTextTrackUserdataCueSamples,\n} from './mp4-remuxer';\nimport {\n  InitData,\n  InitDataTrack,\n  patchEncyptionData,\n} from '../utils/mp4-tools';\nimport {\n  getDuration,\n  getStartDTS,\n  offsetStartDTS,\n  parseInitSegment,\n} from '../utils/mp4-tools';\nimport { ElementaryStreamTypes } from '../loader/fragment';\nimport { logger } from '../utils/logger';\nimport { getCodecCompatibleName } from '../utils/codecs';\nimport type { TrackSet } from '../types/track';\nimport type {\n  InitSegmentData,\n  RemuxedTrack,\n  Remuxer,\n  RemuxerResult,\n} from '../types/remuxer';\nimport type {\n  DemuxedAudioTrack,\n  DemuxedMetadataTrack,\n  DemuxedUserdataTrack,\n  PassthroughTrack,\n} from '../types/demuxer';\nimport type { DecryptData } from '../loader/level-key';\nimport type { RationalTimestamp } from '../utils/timescale-conversion';\n\nclass PassThroughRemuxer implements Remuxer {\n  private emitInitSegment: boolean = false;\n  private audioCodec?: string;\n  private videoCodec?: string;\n  private initData?: InitData;\n  private initPTS: RationalTimestamp | null = null;\n  private initTracks?: TrackSet;\n  private lastEndTime: number | null = null;\n\n  public destroy() {}\n\n  public resetTimeStamp(defaultInitPTS: RationalTimestamp | null) {\n    this.initPTS = defaultInitPTS;\n    this.lastEndTime = null;\n  }\n\n  public resetNextTimestamp() {\n    this.lastEndTime = null;\n  }\n\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    decryptdata: DecryptData | null,\n  ) {\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.generateInitSegment(patchEncyptionData(initSegment, decryptdata));\n    this.emitInitSegment = true;\n  }\n\n  private generateInitSegment(initSegment: Uint8Array | undefined): void {\n    let { audioCodec, videoCodec } = this;\n    if (!initSegment?.byteLength) {\n      this.initTracks = undefined;\n      this.initData = undefined;\n      return;\n    }\n    const initData = (this.initData = parseInitSegment(initSegment));\n\n    // Get codec from initSegment or fallback to default\n    if (initData.audio) {\n      audioCodec = getParsedTrackCodec(\n        initData.audio,\n        ElementaryStreamTypes.AUDIO,\n      );\n    }\n\n    if (initData.video) {\n      videoCodec = getParsedTrackCodec(\n        initData.video,\n        ElementaryStreamTypes.VIDEO,\n      );\n    }\n\n    const tracks: TrackSet = {};\n    if (initData.audio && initData.video) {\n      tracks.audiovideo = {\n        container: 'video/mp4',\n        codec: audioCodec + ',' + videoCodec,\n        initSegment,\n        id: 'main',\n      };\n    } else if (initData.audio) {\n      tracks.audio = {\n        container: 'audio/mp4',\n        codec: audioCodec,\n        initSegment,\n        id: 'audio',\n      };\n    } else if (initData.video) {\n      tracks.video = {\n        container: 'video/mp4',\n        codec: videoCodec,\n        initSegment,\n        id: 'main',\n      };\n    } else {\n      logger.warn(\n        '[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes.',\n      );\n    }\n    this.initTracks = tracks;\n  }\n\n  public remux(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: PassthroughTrack,\n    id3Track: DemuxedMetadataTrack,\n    textTrack: DemuxedUserdataTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n  ): RemuxerResult {\n    let { initPTS, lastEndTime } = this;\n    const result: RemuxerResult = {\n      audio: undefined,\n      video: undefined,\n      text: textTrack,\n      id3: id3Track,\n      initSegment: undefined,\n    };\n\n    // If we haven't yet set a lastEndDTS, or it was reset, set it to the provided timeOffset. We want to use the\n    // lastEndDTS over timeOffset whenever possible; during progressive playback, the media source will not update\n    // the media duration (which is what timeOffset is provided as) before we need to process the next chunk.\n    if (!Number.isFinite(lastEndTime!)) {\n      lastEndTime = this.lastEndTime = timeOffset || 0;\n    }\n\n    // The binary segment data is added to the videoTrack in the mp4demuxer. We don't check to see if the data is only\n    // audio or video (or both); adding it to video was an arbitrary choice.\n    const data = videoTrack.samples;\n    if (!data?.length) {\n      return result;\n    }\n\n    const initSegment: InitSegmentData = {\n      initPTS: undefined,\n      timescale: 1,\n    };\n    let initData = this.initData;\n    if (!initData?.length) {\n      this.generateInitSegment(data);\n      initData = this.initData;\n    }\n    if (!initData?.length) {\n      // We can't remux if the initSegment could not be generated\n      logger.warn('[passthrough-remuxer.ts]: Failed to generate initSegment.');\n      return result;\n    }\n    if (this.emitInitSegment) {\n      initSegment.tracks = this.initTracks as TrackSet;\n      this.emitInitSegment = false;\n    }\n\n    const duration = getDuration(data, initData);\n    const startDTS = getStartDTS(initData, data);\n    const decodeTime = startDTS === null ? timeOffset : startDTS;\n    if (\n      isInvalidInitPts(initPTS, decodeTime, timeOffset, duration) ||\n      (initSegment.timescale !== initPTS.timescale && accurateTimeOffset)\n    ) {\n      initSegment.initPTS = decodeTime - timeOffset;\n      if (initPTS && initPTS.timescale === 1) {\n        logger.warn(\n          `Adjusting initPTS by ${initSegment.initPTS - initPTS.baseTime}`,\n        );\n      }\n      this.initPTS = initPTS = {\n        baseTime: initSegment.initPTS,\n        timescale: 1,\n      };\n    }\n\n    const startTime = audioTrack\n      ? decodeTime - initPTS.baseTime / initPTS.timescale\n      : (lastEndTime as number);\n    const endTime = startTime + duration;\n    offsetStartDTS(initData, data, initPTS.baseTime / initPTS.timescale);\n\n    if (duration > 0) {\n      this.lastEndTime = endTime;\n    } else {\n      logger.warn('Duration parsed from mp4 should be greater than zero');\n      this.resetNextTimestamp();\n    }\n\n    const hasAudio = !!initData.audio;\n    const hasVideo = !!initData.video;\n\n    let type: any = '';\n    if (hasAudio) {\n      type += 'audio';\n    }\n\n    if (hasVideo) {\n      type += 'video';\n    }\n\n    const track: RemuxedTrack = {\n      data1: data,\n      startPTS: startTime,\n      startDTS: startTime,\n      endPTS: endTime,\n      endDTS: endTime,\n      type,\n      hasAudio,\n      hasVideo,\n      nb: 1,\n      dropped: 0,\n    };\n\n    result.audio = track.type === 'audio' ? track : undefined;\n    result.video = track.type !== 'audio' ? track : undefined;\n    result.initSegment = initSegment;\n    result.id3 = flushTextTrackMetadataCueSamples(\n      id3Track,\n      timeOffset,\n      initPTS,\n      initPTS,\n    );\n\n    if (textTrack.samples.length) {\n      result.text = flushTextTrackUserdataCueSamples(\n        textTrack,\n        timeOffset,\n        initPTS,\n      );\n    }\n\n    return result;\n  }\n}\n\nfunction isInvalidInitPts(\n  initPTS: RationalTimestamp | null,\n  startDTS: number,\n  timeOffset: number,\n  duration: number,\n): initPTS is null {\n  if (initPTS === null) {\n    return true;\n  }\n  // InitPTS is invalid when distance from program would be more than segment duration or a minimum of one second\n  const minDuration = Math.max(duration, 1);\n  const startTime = startDTS - initPTS.baseTime / initPTS.timescale;\n  return Math.abs(startTime - timeOffset) > minDuration;\n}\n\nfunction getParsedTrackCodec(\n  track: InitDataTrack,\n  type: ElementaryStreamTypes.AUDIO | ElementaryStreamTypes.VIDEO,\n): string {\n  const parsedCodec = track?.codec;\n  if (parsedCodec && parsedCodec.length > 4) {\n    return parsedCodec;\n  }\n  if (type === ElementaryStreamTypes.AUDIO) {\n    if (\n      parsedCodec === 'ec-3' ||\n      parsedCodec === 'ac-3' ||\n      parsedCodec === 'alac'\n    ) {\n      return parsedCodec;\n    }\n    if (parsedCodec === 'fLaC' || parsedCodec === 'Opus') {\n      // Opting not to get `preferManagedMediaSource` from player config for isSupported() check for simplicity\n      const preferManagedMediaSource = false;\n      return getCodecCompatibleName(parsedCodec, preferManagedMediaSource);\n    }\n    const result = 'mp4a.40.5';\n    logger.info(\n      `Parsed audio codec \"${parsedCodec}\" or audio object type not handled. Using \"${result}\"`,\n    );\n    return result;\n  }\n  // Provide defaults based on codec type\n  // This allows for some playback of some fmp4 playlists without CODECS defined in manifest\n  logger.warn(`Unhandled video codec \"${parsedCodec}\"`);\n  if (parsedCodec === 'hvc1' || parsedCodec === 'hev1') {\n    return 'hvc1.1.6.L120.90';\n  }\n  if (parsedCodec === 'av01') {\n    return 'av01.0.04M.08';\n  }\n  return 'avc1.42e01e';\n}\nexport default PassThroughRemuxer;\n","/** returns `undefined` is `self` is missing, e.g. in node */\nexport const optionalSelf = typeof self !== 'undefined' ? self : undefined;\n","import type { HlsEventEmitter } from '../events';\nimport { Events } from '../events';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport Decrypter from '../crypt/decrypter';\nimport AACDemuxer from './audio/aacdemuxer';\nimport MP4Demuxer from '../demux/mp4demuxer';\nimport TSDemuxer from '../demux/tsdemuxer';\nimport MP3Demuxer from './audio/mp3demuxer';\nimport { AC3Demuxer } from './audio/ac3-demuxer';\nimport MP4Remuxer from '../remux/mp4-remuxer';\nimport PassThroughRemuxer from '../remux/passthrough-remuxer';\nimport { logger } from '../utils/logger';\nimport {\n  isFullSegmentEncryption,\n  getAesModeFromFullSegmentMethod,\n} from '../utils/encryption-methods-util';\nimport type { Demuxer, DemuxerResult, KeyData } from '../types/demuxer';\nimport type { Remuxer } from '../types/remuxer';\nimport type { TransmuxerResult, ChunkMetadata } from '../types/transmuxer';\nimport type { HlsConfig } from '../config';\nimport type { DecryptData } from '../loader/level-key';\nimport type { PlaylistLevelType } from '../types/loader';\nimport type { TypeSupported } from '../utils/codecs';\nimport type { RationalTimestamp } from '../utils/timescale-conversion';\nimport { optionalSelf } from '../utils/global';\n\nlet now;\n// performance.now() not available on WebWorker, at least on Safari Desktop\ntry {\n  now = self.performance.now.bind(self.performance);\n} catch (err) {\n  logger.debug('Unable to use Performance API on this environment');\n  now = optionalSelf?.Date.now;\n}\n\ntype MuxConfig =\n  | { demux: typeof MP4Demuxer; remux: typeof PassThroughRemuxer }\n  | { demux: typeof TSDemuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof AC3Demuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof AACDemuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof MP3Demuxer; remux: typeof MP4Remuxer };\n\nconst muxConfig: MuxConfig[] = [\n  { demux: MP4Demuxer, remux: PassThroughRemuxer },\n  { demux: TSDemuxer, remux: MP4Remuxer },\n  { demux: AACDemuxer, remux: MP4Remuxer },\n  { demux: MP3Demuxer, remux: MP4Remuxer },\n];\n\nif (__USE_M2TS_ADVANCED_CODECS__) {\n  muxConfig.splice(2, 0, { demux: AC3Demuxer, remux: MP4Remuxer });\n}\n\nexport default class Transmuxer {\n  public async: boolean = false;\n  private observer: HlsEventEmitter;\n  private typeSupported: TypeSupported;\n  private config: HlsConfig;\n  private vendor: string;\n  private id: PlaylistLevelType;\n  private demuxer?: Demuxer;\n  private remuxer?: Remuxer;\n  private decrypter?: Decrypter;\n  private probe!: Function;\n  private decryptionPromise: Promise<TransmuxerResult> | null = null;\n  private transmuxConfig!: TransmuxConfig;\n  private currentTransmuxState!: TransmuxState;\n\n  constructor(\n    observer: HlsEventEmitter,\n    typeSupported: TypeSupported,\n    config: HlsConfig,\n    vendor: string,\n    id: PlaylistLevelType,\n  ) {\n    this.observer = observer;\n    this.typeSupported = typeSupported;\n    this.config = config;\n    this.vendor = vendor;\n    this.id = id;\n  }\n\n  configure(transmuxConfig: TransmuxConfig) {\n    this.transmuxConfig = transmuxConfig;\n    if (this.decrypter) {\n      this.decrypter.reset();\n    }\n  }\n\n  push(\n    data: ArrayBuffer,\n    decryptdata: DecryptData | null,\n    chunkMeta: ChunkMetadata,\n    state?: TransmuxState,\n  ): TransmuxerResult | Promise<TransmuxerResult> {\n    const stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n\n    let uintData: Uint8Array = new Uint8Array(data);\n    const { currentTransmuxState, transmuxConfig } = this;\n    if (state) {\n      this.currentTransmuxState = state;\n    }\n\n    const {\n      contiguous,\n      discontinuity,\n      trackSwitch,\n      accurateTimeOffset,\n      timeOffset,\n      initSegmentChange,\n    } = state || currentTransmuxState;\n    const {\n      audioCodec,\n      videoCodec,\n      defaultInitPts,\n      duration,\n      initSegmentData,\n    } = transmuxConfig;\n\n    const keyData = getEncryptionType(uintData, decryptdata);\n    if (keyData && isFullSegmentEncryption(keyData.method)) {\n      const decrypter = this.getDecrypter();\n      const aesMode = getAesModeFromFullSegmentMethod(keyData.method);\n\n      // Software decryption is synchronous; webCrypto is not\n      if (decrypter.isSync()) {\n        // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n        // data is handled in the flush() call\n        let decryptedData = decrypter.softwareDecrypt(\n          uintData,\n          keyData.key.buffer,\n          keyData.iv.buffer,\n          aesMode,\n        );\n        // For Low-Latency HLS Parts, decrypt in place, since part parsing is expected on push progress\n        const loadingParts = chunkMeta.part > -1;\n        if (loadingParts) {\n          decryptedData = decrypter.flush();\n        }\n        if (!decryptedData) {\n          stats.executeEnd = now();\n          return emptyResult(chunkMeta);\n        }\n        uintData = new Uint8Array(decryptedData);\n      } else {\n        this.decryptionPromise = decrypter\n          .webCryptoDecrypt(\n            uintData,\n            keyData.key.buffer,\n            keyData.iv.buffer,\n            aesMode,\n          )\n          .then((decryptedData): TransmuxerResult => {\n            // Calling push here is important; if flush() is called while this is still resolving, this ensures that\n            // the decrypted data has been transmuxed\n            const result = this.push(\n              decryptedData,\n              null,\n              chunkMeta,\n            ) as TransmuxerResult;\n            this.decryptionPromise = null;\n            return result;\n          });\n        return this.decryptionPromise!;\n      }\n    }\n\n    const resetMuxers = this.needsProbing(discontinuity, trackSwitch);\n    if (resetMuxers) {\n      const error = this.configureTransmuxer(uintData);\n      if (error) {\n        logger.warn(`[transmuxer] ${error.message}`);\n        this.observer.emit(Events.ERROR, Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.FRAG_PARSING_ERROR,\n          fatal: false,\n          error,\n          reason: error.message,\n        });\n        stats.executeEnd = now();\n        return emptyResult(chunkMeta);\n      }\n    }\n\n    if (discontinuity || trackSwitch || initSegmentChange || resetMuxers) {\n      this.resetInitSegment(\n        initSegmentData,\n        audioCodec,\n        videoCodec,\n        duration,\n        decryptdata,\n      );\n    }\n\n    if (discontinuity || initSegmentChange || resetMuxers) {\n      this.resetInitialTimestamp(defaultInitPts);\n    }\n\n    if (!contiguous) {\n      this.resetContiguity();\n    }\n\n    const result = this.transmux(\n      uintData,\n      keyData,\n      timeOffset,\n      accurateTimeOffset,\n      chunkMeta,\n    );\n    const currentState = this.currentTransmuxState;\n\n    currentState.contiguous = true;\n    currentState.discontinuity = false;\n    currentState.trackSwitch = false;\n\n    stats.executeEnd = now();\n    return result;\n  }\n\n  // Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)\n  flush(\n    chunkMeta: ChunkMetadata,\n  ): TransmuxerResult[] | Promise<TransmuxerResult[]> {\n    const stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n\n    const { decrypter, currentTransmuxState, decryptionPromise } = this;\n\n    if (decryptionPromise) {\n      // Upon resolution, the decryption promise calls push() and returns its TransmuxerResult up the stack. Therefore\n      // only flushing is required for async decryption\n      return decryptionPromise.then(() => {\n        return this.flush(chunkMeta);\n      });\n    }\n\n    const transmuxResults: TransmuxerResult[] = [];\n    const { timeOffset } = currentTransmuxState;\n    if (decrypter) {\n      // The decrypter may have data cached, which needs to be demuxed. In this case we'll have two TransmuxResults\n      // This happens in the case that we receive only 1 push call for a segment (either for non-progressive downloads,\n      // or for progressive downloads with small segments)\n      const decryptedData = decrypter.flush();\n      if (decryptedData) {\n        // Push always returns a TransmuxerResult if decryptdata is null\n        transmuxResults.push(\n          this.push(decryptedData, null, chunkMeta) as TransmuxerResult,\n        );\n      }\n    }\n\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      // If probing failed, then Hls.js has been given content its not able to handle\n      stats.executeEnd = now();\n      return [emptyResult(chunkMeta)];\n    }\n\n    const demuxResultOrPromise = demuxer.flush(timeOffset);\n    if (isPromise(demuxResultOrPromise)) {\n      // Decrypt final SAMPLE-AES samples\n      return demuxResultOrPromise.then((demuxResult) => {\n        this.flushRemux(transmuxResults, demuxResult, chunkMeta);\n        return transmuxResults;\n      });\n    }\n\n    this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);\n    return transmuxResults;\n  }\n\n  private flushRemux(\n    transmuxResults: TransmuxerResult[],\n    demuxResult: DemuxerResult,\n    chunkMeta: ChunkMetadata,\n  ) {\n    const { audioTrack, videoTrack, id3Track, textTrack } = demuxResult;\n    const { accurateTimeOffset, timeOffset } = this.currentTransmuxState;\n    logger.log(\n      `[transmuxer.ts]: Flushed fragment ${chunkMeta.sn}${\n        chunkMeta.part > -1 ? ' p: ' + chunkMeta.part : ''\n      } of level ${chunkMeta.level}`,\n    );\n    const remuxResult = this.remuxer!.remux(\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n      timeOffset,\n      accurateTimeOffset,\n      true,\n      this.id,\n    );\n    transmuxResults.push({\n      remuxResult,\n      chunkMeta,\n    });\n\n    chunkMeta.transmuxing.executeEnd = now();\n  }\n\n  resetInitialTimestamp(defaultInitPts: RationalTimestamp | null) {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetTimeStamp(defaultInitPts);\n    remuxer.resetTimeStamp(defaultInitPts);\n  }\n\n  resetContiguity() {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetContiguity();\n    remuxer.resetNextTimestamp();\n  }\n\n  resetInitSegment(\n    initSegmentData: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n    decryptdata: DecryptData | null,\n  ) {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetInitSegment(\n      initSegmentData,\n      audioCodec,\n      videoCodec,\n      trackDuration,\n    );\n    remuxer.resetInitSegment(\n      initSegmentData,\n      audioCodec,\n      videoCodec,\n      decryptdata,\n    );\n  }\n\n  destroy(): void {\n    if (this.demuxer) {\n      this.demuxer.destroy();\n      this.demuxer = undefined;\n    }\n    if (this.remuxer) {\n      this.remuxer.destroy();\n      this.remuxer = undefined;\n    }\n  }\n\n  private transmux(\n    data: Uint8Array,\n    keyData: KeyData | null,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata,\n  ): TransmuxerResult | Promise<TransmuxerResult> {\n    let result: TransmuxerResult | Promise<TransmuxerResult>;\n    if (keyData && keyData.method === 'SAMPLE-AES') {\n      result = this.transmuxSampleAes(\n        data,\n        keyData,\n        timeOffset,\n        accurateTimeOffset,\n        chunkMeta,\n      );\n    } else {\n      result = this.transmuxUnencrypted(\n        data,\n        timeOffset,\n        accurateTimeOffset,\n        chunkMeta,\n      );\n    }\n    return result;\n  }\n\n  private transmuxUnencrypted(\n    data: Uint8Array,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata,\n  ): TransmuxerResult {\n    const { audioTrack, videoTrack, id3Track, textTrack } = (\n      this.demuxer as Demuxer\n    ).demux(data, timeOffset, false, !this.config.progressive);\n    const remuxResult = this.remuxer!.remux(\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n      timeOffset,\n      accurateTimeOffset,\n      false,\n      this.id,\n    );\n    return {\n      remuxResult,\n      chunkMeta,\n    };\n  }\n\n  private transmuxSampleAes(\n    data: Uint8Array,\n    decryptData: KeyData,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata,\n  ): Promise<TransmuxerResult> {\n    return (this.demuxer as Demuxer)\n      .demuxSampleAes(data, decryptData, timeOffset)\n      .then((demuxResult) => {\n        const remuxResult = this.remuxer!.remux(\n          demuxResult.audioTrack,\n          demuxResult.videoTrack,\n          demuxResult.id3Track,\n          demuxResult.textTrack,\n          timeOffset,\n          accurateTimeOffset,\n          false,\n          this.id,\n        );\n        return {\n          remuxResult,\n          chunkMeta,\n        };\n      });\n  }\n\n  private configureTransmuxer(data: Uint8Array): void | Error {\n    const { config, observer, typeSupported, vendor } = this;\n    // probe for content type\n    let mux;\n    for (let i = 0, len = muxConfig.length; i < len; i++) {\n      if (muxConfig[i].demux?.probe(data)) {\n        mux = muxConfig[i];\n        break;\n      }\n    }\n    if (!mux) {\n      return new Error('Failed to find demuxer by probing fragment data');\n    }\n    // so let's check that current remuxer and demuxer are still valid\n    const demuxer = this.demuxer;\n    const remuxer = this.remuxer;\n    const Remuxer: MuxConfig['remux'] = mux.remux;\n    const Demuxer: MuxConfig['demux'] = mux.demux;\n    if (!remuxer || !(remuxer instanceof Remuxer)) {\n      this.remuxer = new Remuxer(observer, config, typeSupported, vendor);\n    }\n    if (!demuxer || !(demuxer instanceof Demuxer)) {\n      this.demuxer = new Demuxer(observer, config, typeSupported);\n      this.probe = Demuxer.probe;\n    }\n  }\n\n  private needsProbing(discontinuity: boolean, trackSwitch: boolean): boolean {\n    // in case of continuity change, or track switch\n    // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)\n    return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;\n  }\n\n  private getDecrypter(): Decrypter {\n    let decrypter = this.decrypter;\n    if (!decrypter) {\n      decrypter = this.decrypter = new Decrypter(this.config);\n    }\n    return decrypter;\n  }\n}\n\nfunction getEncryptionType(\n  data: Uint8Array,\n  decryptData: DecryptData | null,\n): KeyData | null {\n  let encryptionType: KeyData | null = null;\n  if (\n    data.byteLength > 0 &&\n    decryptData?.key != null &&\n    decryptData.iv !== null &&\n    decryptData.method != null\n  ) {\n    encryptionType = decryptData as KeyData;\n  }\n  return encryptionType;\n}\n\nconst emptyResult = (chunkMeta): TransmuxerResult => ({\n  remuxResult: {},\n  chunkMeta,\n});\n\nexport function isPromise<T>(p: Promise<T> | any): p is Promise<T> {\n  return 'then' in p && p.then instanceof Function;\n}\n\nexport class TransmuxConfig {\n  public audioCodec?: string;\n  public videoCodec?: string;\n  public initSegmentData?: Uint8Array;\n  public duration: number;\n  public defaultInitPts: RationalTimestamp | null;\n\n  constructor(\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    initSegmentData: Uint8Array | undefined,\n    duration: number,\n    defaultInitPts?: RationalTimestamp,\n  ) {\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.initSegmentData = initSegmentData;\n    this.duration = duration;\n    this.defaultInitPts = defaultInitPts || null;\n  }\n}\n\nexport class TransmuxState {\n  public discontinuity: boolean;\n  public contiguous: boolean;\n  public accurateTimeOffset: boolean;\n  public trackSwitch: boolean;\n  public timeOffset: number;\n  public initSegmentChange: boolean;\n\n  constructor(\n    discontinuity: boolean,\n    contiguous: boolean,\n    accurateTimeOffset: boolean,\n    trackSwitch: boolean,\n    timeOffset: number,\n    initSegmentChange: boolean,\n  ) {\n    this.discontinuity = discontinuity;\n    this.contiguous = contiguous;\n    this.accurateTimeOffset = accurateTimeOffset;\n    this.trackSwitch = trackSwitch;\n    this.timeOffset = timeOffset;\n    this.initSegmentChange = initSegmentChange;\n  }\n}\n","import { DecrypterAesMode } from '../crypt/decrypter-aes-mode';\n\nexport function isFullSegmentEncryption(method: string): boolean {\n  return (\n    method === 'AES-128' || method === 'AES-256' || method === 'AES-256-CTR'\n  );\n}\n\nexport function getAesModeFromFullSegmentMethod(\n  method: string,\n): DecrypterAesMode {\n  switch (method) {\n    case 'AES-128':\n    case 'AES-256':\n      return DecrypterAesMode.cbc;\n    case 'AES-256-CTR':\n      return DecrypterAesMode.ctr;\n    default:\n      throw new Error(`invalid full segment method ${method}`);\n  }\n}\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import Transmuxer, { isPromise } from '../demux/transmuxer';\nimport { Events } from '../events';\nimport { enableLogs, type ILogFunction, type ILogger } from '../utils/logger';\nimport { EventEmitter } from 'eventemitter3';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport type { RemuxedTrack, RemuxerResult } from '../types/remuxer';\nimport type { TransmuxerResult, ChunkMetadata } from '../types/transmuxer';\n\nif (typeof __IN_WORKER__ !== 'undefined' && __IN_WORKER__) {\n  startWorker(self);\n}\n\nfunction startWorker(self) {\n  const observer = new EventEmitter();\n  const forwardMessage = (ev, data) => {\n    self.postMessage({ event: ev, data: data });\n  };\n\n  // forward events to main thread\n  observer.on(Events.FRAG_DECRYPTED, forwardMessage);\n  observer.on(Events.ERROR, forwardMessage);\n\n  // forward logger events to main thread\n  const forwardWorkerLogs = (logger: ILogger) => {\n    for (const logFn in logger) {\n      const func: ILogFunction = (message?) => {\n        forwardMessage('workerLog', {\n          logType: logFn,\n          message,\n        });\n      };\n\n      logger[logFn] = func;\n    }\n  };\n\n  self.addEventListener('message', (ev) => {\n    const data = ev.data;\n    switch (data.cmd) {\n      case 'init': {\n        const config = JSON.parse(data.config);\n        self.transmuxer = new Transmuxer(\n          observer,\n          data.typeSupported,\n          config,\n          data.vendor,\n          data.id,\n        );\n        const logger = enableLogs(config.debug, data.id);\n        forwardWorkerLogs(logger);\n        forwardMessage('init', null);\n        break;\n      }\n      case 'configure': {\n        self.transmuxer.configure(data.config);\n        break;\n      }\n      case 'demux': {\n        const transmuxResult: TransmuxerResult | Promise<TransmuxerResult> =\n          self.transmuxer.push(\n            data.data,\n            data.decryptdata,\n            data.chunkMeta,\n            data.state,\n          );\n        if (isPromise(transmuxResult)) {\n          self.transmuxer.async = true;\n          transmuxResult\n            .then((data) => {\n              emitTransmuxComplete(self, data);\n            })\n            .catch((error) => {\n              forwardMessage(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.FRAG_PARSING_ERROR,\n                chunkMeta: data.chunkMeta,\n                fatal: false,\n                error,\n                err: error,\n                reason: `transmuxer-worker push error`,\n              });\n            });\n        } else {\n          self.transmuxer.async = false;\n          emitTransmuxComplete(self, transmuxResult);\n        }\n        break;\n      }\n      case 'flush': {\n        const id = data.chunkMeta;\n        let transmuxResult = self.transmuxer.flush(id);\n        const asyncFlush = isPromise(transmuxResult);\n        if (asyncFlush || self.transmuxer.async) {\n          if (!isPromise(transmuxResult)) {\n            transmuxResult = Promise.resolve(transmuxResult);\n          }\n          transmuxResult\n            .then((results: Array<TransmuxerResult>) => {\n              handleFlushResult(self, results as Array<TransmuxerResult>, id);\n            })\n            .catch((error) => {\n              forwardMessage(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.FRAG_PARSING_ERROR,\n                chunkMeta: data.chunkMeta,\n                fatal: false,\n                error,\n                err: error,\n                reason: `transmuxer-worker flush error`,\n              });\n            });\n        } else {\n          handleFlushResult(\n            self,\n            transmuxResult as Array<TransmuxerResult>,\n            id,\n          );\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  });\n}\n\nfunction emitTransmuxComplete(\n  self: any,\n  transmuxResult: TransmuxerResult,\n): boolean {\n  if (isEmptyResult(transmuxResult.remuxResult)) {\n    return false;\n  }\n  const transferable: Array<ArrayBuffer> = [];\n  const { audio, video } = transmuxResult.remuxResult;\n  if (audio) {\n    addToTransferable(transferable, audio);\n  }\n  if (video) {\n    addToTransferable(transferable, video);\n  }\n  self.postMessage(\n    { event: 'transmuxComplete', data: transmuxResult },\n    transferable,\n  );\n  return true;\n}\n\n// Converts data to a transferable object https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast)\n// in order to minimize message passing overhead\nfunction addToTransferable(\n  transferable: Array<ArrayBuffer>,\n  track: RemuxedTrack,\n) {\n  if (track.data1) {\n    transferable.push(track.data1.buffer);\n  }\n  if (track.data2) {\n    transferable.push(track.data2.buffer);\n  }\n}\n\nfunction handleFlushResult(\n  self: any,\n  results: Array<TransmuxerResult>,\n  chunkMeta: ChunkMetadata,\n) {\n  const parsed = results.reduce(\n    (parsed, result) => emitTransmuxComplete(self, result) || parsed,\n    false,\n  );\n  if (!parsed) {\n    // Emit at least one \"transmuxComplete\" message even if media is not found to update stream-controller state to PARSING\n    self.postMessage({ event: 'transmuxComplete', data: results[0] });\n  }\n  self.postMessage({ event: 'flush', data: chunkMeta });\n}\n\nfunction isEmptyResult(remuxResult: RemuxerResult) {\n  return (\n    !remuxResult.audio &&\n    !remuxResult.video &&\n    !remuxResult.text &&\n    !remuxResult.id3 &&\n    !remuxResult.initSegment\n  );\n}\n"],"names":["Events","ErrorTypes","ErrorDetails","DecrypterAesMode","AESCrypto","subtle","iv","aesMode","this","aesIV","prototype","decrypt","data","key","name","counter","length","Error","FastAESKey","expandKey","subtleAlgoName","getSubtleAlgoName","importKey","sliceUint8","array","start","end","Uint8Array","slice","Array","call","AESDecryptor","rcon","subMix","Uint32Array","invSubMix","sBox","invSBox","ksRows","keySize","keySchedule","invKeySchedule","initTable","_proto","uint8ArrayToUint32Array_","arrayBuffer","view","DataView","newArray","i","getUint32","subMix0","subMix1","subMix2","subMix3","invSubMix0","invSubMix1","invSubMix2","invSubMix3","d","x","xi","sx","x2","x4","x8","t","keyBuffer","sameKey","offset","ksRow","invKsRow","prev","sbox","networkToHostOrderSwap","word","inputArrayBuffer","t0","t1","t2","t3","s0","s1","s2","s3","inputWords0","inputWords1","inputWords2","inputWords3","nRounds","invSBOX","initVector","initVector0","initVector1","initVector2","initVector3","inputInt32","Int32Array","outputInt32","swapWord","buffer","noop","fakeLogger","trace","debug","log","warn","info","error","createLogger","_extends","getLoggerFn","debugConfig","id","bind","type","func","self","console","consolePrintFn","exportedLogger","logger","isFiniteNumber","Number","isFinite","value","isSafeInteger","Math","abs","MAX_SAFE_INTEGER","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","path","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","exec","builtParts","params","query","fragment","baseURLPath","newPath","substring","lastIndexOf","url","parts","split","reverse","join","replace","decoder","ElementaryStreamTypes","isHeader","isFooter","getID3Data","front","readSize","subarray","size","canParse","getTimeStamp","frames","getID3Frames","frame","isTimeStampFrame","readTimeStamp","getFrameData","String","fromCharCode","id3Data","frameData","decodeFrame","push","decodePrivFrame","decodeURLFrame","decodeTextFrame","owner","utf8ArrayToStr","privateData","index","description","text","timeStampFrame","byteLength","pts33Bit","timestamp","round","exitOnNull","getTextDecoder","decoded","decode","idx","indexOf","c","char2","char3","len","out","navigator","userAgent","includes","TextDecoder","Hex","str","h","toString","UINT32_MAX","pow","RemuxerTrackIdConfig","video","audio","id3","bin2str","apply","readUint16","val","readUint32","readSint32","writeUint32","findBox","results","endbox","subresults","parseSegmentIndex","sidx","references","version","timescale","startByte","referencesCount","referenceIndex","referenceInfo","referenceSize","subsegmentDuration","duration","earliestPresentationTime","parseInitSegment","initSegment","result","traks","trak","tkhd","trackId","mdhd","hdlr","hdlrType","soun","vide","stsdData","parseStsd","_objectSpread","forEach","trex","track","default","flags","stsd","sampleEntries","sampleEntriesEnd","fourCC","codec","encrypted","encBox","sinf","schm","frma","avcCBox","toHex","codecBox","esdsBox","skipBERInteger","objectType","firstByte","audioObjectType","hvcCBox","profileByte","profileSpace","generalProfileIdc","profileCompat","tierFlag","levelIDC","constraintIndicator","toUpperCase","constraintString","byte","dvcCBox","profile","level","addLeadingZero","vpcCBox","bitDepth","av1CBox","highBitDepth","twelveBit","monochrome","chromaSubsamplingX","chromaSubsamplingY","chromaSamplePosition","bytes","limit","num","patchEncyptionData","decryptdata","keyId","isCommonEncryption","encBoxes","isAudio","enc","tenc","parseSinf","tencKeyId","some","b","set","computeRawDurationFromSamples","trun","sampleCount","appendUint8Array","data1","data2","temp","parseSamples","timeOffset","seiSamples","videoData","samples","isHEVCFlavor","map","moof","moofOffset","byteOffset","traf","baseTime","tfdt","undefined","tfhd","tfhdFlags","defaultSampleDuration","defaultSampleSizePresent","defaultSampleSize","defaultSampleFlagsPresent","tfhdOffset","delimit","baseCodec","isHEVC","dataOffsetPresent","dataOffset","firstSampleFlagsPresent","sampleDurationPresent","sampleDuration","sampleSizePresent","sampleSize","sampleFlagsPresent","sampleCompositionOffsetsPresent","compositionOffset","trunOffset","sampleOffset","ix","naluTotalSize","naluSize","isSEIMessage","parseSEIMessageFromNALu","naluHeader","naluType","unescapedData","headerSize","pts","discardEPB","seiPtr","payloadType","payloadSize","leftOver","payPtr","providerCode","userStructure","userDataType","enabled","totalBytes","byteArray","uuidStrArray","userDataBytes","uuid","userData","EPBPositions","newLength","newData","sourceIndex","shift","Decrypter","config","_temp","_ref$removePKCS7Paddi","removePKCS7Padding","logEnabled","softwareDecrypter","fastAesKey","remainderData","currentIV","currentResult","useSoftware","enableSoftwareAES","browserCrypto","crypto","webkitSubtle","e","destroy","isSync","flush","reset","outputBytes","paddingBytes","getUint8","_this","Promise","resolve","reject","softwareDecrypt","decryptResult","webCryptoDecrypt","logOnce","currentChunk","getValidChunk","_this2","then","aesKey","catch","err","message","onWebCryptoError","splitPoint","msg","MetadataSchema","dummyTrack","inputTimeScale","pid","sequenceNumber","dropped","BaseAudioDemuxer","_audioTrack","_id3Track","frameIndex","cachedData","basePTS","initPTS","lastPTS","resetInitSegment","audioCodec","videoCodec","trackDuration","resetTimeStamp","deaultTimestamp","resetContiguity","appendFrame","demux","lastDataIndex","ID3","id3Track","_isFiniteNumber","initPTSFn","dts","POSITIVE_INFINITY","sample","partialData","audioTrack","videoTrack","textTrack","demuxSampleAes","keyData","_isFiniteNumber2","isHeaderPattern","getHeaderLength","getFullFrameLength","probe","headerLength","frameLength","newOffset","initTrackConfig","observer","samplerate","adtsObjectType","originalAdtsObjectType","adtsExtensionSamplingIndex","adtsChannelConfig","toLowerCase","manifestCodec","adtsSamplingRates","adtsSamplingIndex","test","channelCount","parsedCodec","emit","ERROR","MEDIA_ERROR","details","FRAG_PARSING_ERROR","fatal","reason","getAudioConfig","getFrameDuration","unit","stamp","header","parseFrameHeader","missing","max","chromeVersion","BitratesMap","SamplingRateMap","SamplesCoefficients","BytesInSlot","parseHeader","samplesPerFrame","sampleRate","mpegVersion","mpegLayer","bitRateIndex","sampleRateIndex","paddingBit","channelMode","bitRate","sampleCoefficient","bytesInSlot","floor","match","parseInt","AACDemuxer","_BaseAudioDemuxer","_inheritsLoose","container","segmentCodec","MpegAudio","ADTS","canGetFrameLength","emsgSchemePattern","MP4Demuxer","txtTrack","captionTrack","initData","_initData$video","_initData$audio","hasMoofData","videoSamples","progressive","segmentedData","segmentedRange","valid","remainder","moofs","last","segmentValidRange","extractID3Track","emsgs","emsgInfo","schemeIdUri","timeScale","presentationTimeDelta","presentationTime","eventDuration","leftPresentationTime","rightPresentationTime","_isSafeInteger","payload","parseEmsg","getAudioBSID","bsid","numBits","mask","bits","min","AC3Demuxer","samplingRateCode","frameSizeCode","skipCount","lfeon","bsmod","BaseVideoParser","VideoSample","createVideoSample","units","getLastNalUnit","_VideoSample","lastUnit","pushAccessUnit","nbSamples","lastSample","parseNALu","overflow","state","naluState","lastState","lastUnitStart","lastUnitType","getNALuType","ExpGolomb","bytesAvailable","bitsAvailable","loadWord","position","workingBytes","availableBytes","skipBits","count","skipBytes","readBits","valu","skipLZ","leadingZeroCount","skipUEG","skipEG","readUEG","clz","readEG","readBoolean","readUByte","readUShort","readUInt","AvcVideoParser","_BaseVideoParser","arguments","parsePES","pes","spsfound","audFound","_VideoSample2","iskey","sliceType","readSliceType","_track$pixelRatio","_track$pixelRatio2","sps","readSPS","width","height","pixelRatio","codecarray","codecstring","pps","eg","skipScalingList","reader","lastScale","nextScale","j","numRefFramesInPicOrderCntCycle","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","profileIdc","chromaFormatIdc","picOrderCntType","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","ceil","HevcVideoParser","_len","args","_key","concat","initVPS","vps","readVPS","matchSPS","prop","codecString","readPPS","ebsp2rbsp","arr","dst","dstIdx","numTemporalLayers","temporalIdNested","max_sub_layers_minus1","general_profile_space","general_tier_flag","general_profile_idc","general_profile_compatibility_flags_1","general_profile_compatibility_flags_2","general_profile_compatibility_flags_3","general_profile_compatibility_flags_4","general_constraint_indicator_flags_1","general_constraint_indicator_flags_2","general_constraint_indicator_flags_3","general_constraint_indicator_flags_4","general_constraint_indicator_flags_5","general_constraint_indicator_flags_6","general_level_idc","sub_layer_profile_present_flags","sub_layer_level_present_flags","chroma_format_idc","pic_width_in_luma_samples","pic_height_in_luma_samples","conformance_window_flag","pic_left_offset","pic_right_offset","pic_top_offset","pic_bottom_offset","bit_depth_luma_minus8","bit_depth_chroma_minus8","log2_max_pic_order_cnt_lsb_minus4","sizeId","matrixId","coefNum","num_short_term_ref_pic_sets","num_delta_pocs","inter_ref_pic_set_prediction_flag","next_num_delta_pocs","used_by_curr_pic_flag","use_delta_flag","num_negative_pics","num_positive_pics","num_long_term_ref_pics_sps","min_spatial_segmentation_idc","sar_width","sar_height","fps_fixed","fps_den","fps_num","default_display_window_flag","aspect_ratio_idc","nal_hrd_parameters_present_flag","vcl_hrd_parameters_present_flag","sub_pic_hrd_params_present_flag","low_delay_hrd_flag","cpb_cnt","chroma_scale_w","chroma_scale_h","profile_space_string","profile_compatibility_buf","profile_compatibility_rev","profile_compatibility_flags_string","tier_flag_string","general_profile_compatibility_flags","general_constraint_indicator_flags","bit_depth","frame_rate","fixed","fps","tiles_enabled_flag","entropy_coding_sync_enabled_flag","parallelismType","sps1","sps2","substr","SampleAesDecrypter","decrypter","decryptBuffer","encryptedData","decryptAacSample","sampleIndex","callback","curUnit","encryptedBuffer","decryptedBuffer","decryptedData","decryptAacSamples","getAvcEncryptedData","decodedData","encryptedDataLen","Int8Array","outputPos","inputPos","getAvcDecryptedUnit","uint8DecryptedData","decryptAvcSample","unitIndex","decryptAvcSamples","curUnits","PACKET_LENGTH","TSDemuxer","typeSupported","sampleAes","pmtParsed","_duration","_pmtId","_videoTrack","_txtTrack","aacOverFlow","videoParser","syncOffset","scanwindow","foundPat","packetStart","tsPackets","parsePID","createTrack","pesData","isSampleAes","videoPid","audioPid","id3Pid","audioData","unknownPID","pmtId","tsPacketErrors","stt","parseAACPES","parseMPEGPES","parseAC3PES","parseID3PES","parsePAT","parsedPIDs","parsePMT","segmentVideoCodec","segmentAudioCodec","demuxResult","extractRemainingSamples","startOffset","frameMissingBytes","sampleLength","frameOverflowBytes","recoverable","levelRetry","frameDuration","parsed","AC3","id3Sample","tableEnd","esInfoLength","logEncryptedSamplesFoundInUnencryptedStream","mpeg","mp3","ac3","parsePos","remaining","descriptorLen","stream","frag","pesLen","pesHdrLen","pesPts","pesDts","splice","pesFlags","payloadStartOffset","dataLen","MP3Demuxer","AAC","getSilentFrame","MP4","init","types","avc1","avcC","hvc1","hvcC","btrt","dinf","dref","esds","ftyp","mdat","mdia","mfhd","minf","moov","mp4a","dac3","mvex","mvhd","pasp","sdtp","stbl","stco","stsc","stsz","stts","vmhd","smhd","hasOwnProperty","charCodeAt","videoHdlr","audioHdlr","HDLR_TYPES","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","DINF","upperWordDuration","lowerWordDuration","sn","baseMediaDecodeTime","tracks","boxes","dependsOn","isDependedOn","hasRedundancy","avcc","hSpacing","vSpacing","configlen","audioStsd","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","cts","arraylen","isLeading","paddingValue","isNonSync","degradPrio","movie","ps","NALuLengthSize","temporal_id_nested","num_temporal_layers","iMax","hvcc","PlaylistLevelType","toMsFromMpegTsClock","destScale","srcBase","toTimescaleFromBase","safariWebkitVersion","MP4Remuxer","vendor","ISGenerated","_initPTS","_initDTS","nextAvcDts","nextAudioPts","videoSampleDuration","isAudioContiguous","isVideoContiguous","videoTrackConfig","defaultTimeStamp","resetNextTimestamp","getVideoStartPts","rolloverDetected","startPTS","reduce","minPTS","delta","normalizePts","remux","accurateTimeOffset","playlistType","independent","audioTimeOffset","videoTimeOffset","hasAudio","hasVideo","enoughAudioSamples","enoughVideoSamples","_videoTrack$pixelRati","_config$pixelRatio","_videoTrack$pixelRati2","_config$pixelRatio2","generateIS","firstKeyFramePTS","firstKeyFrameIndex","findKeyframeIndex","forceKeyFrameOnDiscontinuity","audiovideoTimestampDelta","remuxAudio","audioTrackLength","endPTS","remuxVideo","firstKeyFrame","flushTextTrackMetadataCueSamples","flushTextTrackUserdataCueSamples","initDTS","audioSamples","computePTSDTS","Infinity","metadata","Object","keys","contiguous","firstDTS","lastDTS","inputSamples","outputSamples","mp4SampleDuration","maxPTS","NEGATIVE_INFINITY","sortSamples","initTime","sort","a","deltadts","deltapts","inputDuration","averageSampleDuration","foundHole","foundOverlap","toFixed","firstPTS","isPTSOrderRetained","prevPTS","nextSamplePTS","nbNalu","naluLen","dtsStep","nbUnits","sampleLen","mdatSize","MUX_ERROR","REMUX_ALLOC_ERROR","setUint32","stretchedLastFrame","minDtsDelta","minPtsDelta","maxDtsDelta","maxPtsDelta","VideoSampleUnits","mp4SampleLength","unitData","unitDataLen","ptsDelta","lastFrameDuration","stretchShortVideoTrack","gapTolerance","maxBufferHole","deltaToFrameEnd","compositionTimeOffset","Mp4Sample","nextDts","nextPts","startDTS","endDTS","nb","getSamplesPerFrame","scaleFactor","inputSampleDuration","rawMPEG","alignedWithVideo","timeOffsetMpegTS","filter","maxAudioFramesDrift","newStamp","fillFrame","audioSample","unitLen","remuxEmptyAudio","init90kHz","silentFrame","reference","isKeyframe","getMediaSource","preferManagedMediaSource","MediaSource","ManagedMediaSource","WebKitMediaSource","isCodecMediaSourceSupported","_MediaSource$isTypeSu","isTypeSupported","mimeTypeForCodec","CODEC_COMPATIBLE_NAMES","AUDIO_CODEC_REGEXP","getCodecCompatibleName","m","lowerCaseCodec","codecsToCheck","flac","opus","_getMediaSource","getCodecCompatibleNameLower","PassThroughRemuxer","emitInitSegment","initTracks","lastEndTime","defaultInitPTS","generateInitSegment","getParsedTrackCodec","audiovideo","_initData","_initData2","rawDuration","videoDuration","audioDuration","trafs","trackDefault","truns","sidxDuration","sidxs","dur","ref","getDuration","fmp4","startTime","getStartDTS","decodeTime","minDuration","isInvalidInitPts","endTime","upper","lower","offsetStartDTS","now","optionalSelf","performance","Date","muxConfig","Transmuxer","async","demuxer","remuxer","decryptionPromise","transmuxConfig","currentTransmuxState","configure","chunkMeta","stats","transmuxing","executeStart","uintData","method","_ref","discontinuity","trackSwitch","initSegmentChange","defaultInitPts","initSegmentData","decryptData","encryptionType","getEncryptionType","getDecrypter","getAesModeFromFullSegmentMethod","part","executeEnd","emptyResult","resetMuxers","needsProbing","configureTransmuxer","resetInitialTimestamp","transmux","currentState","transmuxResults","demuxResultOrPromise","isPromise","flushRemux","_this$currentTransmux","remuxResult","transmuxSampleAes","transmuxUnencrypted","_demux","_this3","mux","_muxConfig$i$demux","Remuxer","Demuxer","p","Function","has","prefix","EE","fn","context","once","addListener","emitter","event","TypeError","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","create","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","l","ee","listenerCount","a1","a2","a3","a4","a5","removeListener","on","removeAllListeners","off","prefixed","module","exports","emitTransmuxComplete","transmuxResult","transferable","_transmuxResult$remux","addToTransferable","postMessage","handleFlushResult","forwardMessage","ev","FRAG_DECRYPTED","forwardWorkerLogs","_loop","logFn","logType","addEventListener","cmd","JSON","parse","transmuxer","newLogger","enableLogs","startWorker"],"mappings":"yBAsDYA,IAAAA,WAAAA,GAAM,OAANA,EAAM,gBAAA,oBAANA,EAAM,eAAA,mBAANA,EAAM,gBAAA,oBAANA,EAAM,eAAA,mBAANA,EAAM,YAAA,gBAANA,EAAM,aAAA,iBAANA,EAAM,cAAA,kBAANA,EAAM,eAAA,mBAANA,EAAM,iBAAA,qBAANA,EAAM,gBAAA,oBAANA,EAAM,WAAA,eAANA,EAAM,gBAAA,oBAANA,EAAM,eAAA,mBAANA,EAAM,iBAAA,qBAANA,EAAM,gBAAA,oBAANA,EAAM,gBAAA,oBAANA,EAAM,gBAAA,oBAANA,EAAM,eAAA,mBAANA,EAAM,cAAA,kBAANA,EAAM,aAAA,iBAANA,EAAM,cAAA,kBAANA,EAAM,kBAAA,qBAANA,EAAM,eAAA,mBAANA,EAAM,qBAAA,wBAANA,EAAM,sBAAA,yBAANA,EAAM,qBAAA,wBAANA,EAAM,oBAAA,uBAANA,EAAM,mBAAA,sBAANA,EAAM,wBAAA,2BAANA,EAAM,wBAAA,2BAANA,EAAM,sBAAA,yBAANA,EAAM,uBAAA,0BAANA,EAAM,sBAAA,yBAANA,EAAM,wBAAA,2BAANA,EAAM,YAAA,gBAANA,EAAM,6BAAA,8BAANA,EAAM,eAAA,kBAANA,EAAM,aAAA,iBAANA,EAAM,4BAAA,8BAANA,EAAM,YAAA,gBAANA,EAAM,eAAA,mBAANA,EAAM,0BAAA,4BAANA,EAAM,sBAAA,yBAANA,EAAM,sBAAA,yBAANA,EAAM,YAAA,gBAANA,EAAM,cAAA,kBAANA,EAAM,aAAA,iBAANA,EAAM,SAAA,aAANA,EAAM,uBAAA,yBAANA,EAAM,uBAAA,yBAANA,EAAM,MAAA,WAANA,EAAM,WAAA,gBAANA,EAAM,YAAA,gBAANA,EAAM,WAAA,eAANA,EAAM,yBAAA,2BAANA,EAAM,oBAAA,uBAANA,EAAM,yBAAA,4BAANA,CAAM,EAAA,CAAA,GCtDNC,WAAAA,GAAU,OAAVA,EAAU,cAAA,eAAVA,EAAU,YAAA,aAAVA,EAAU,iBAAA,iBAAVA,EAAU,UAAA,WAAVA,EAAU,YAAA,aAAVA,CAAU,EAAA,CAAA,GAaVC,WAAAA,GAAY,OAAZA,EAAY,mBAAA,kBAAZA,EAAY,qBAAA,oBAAZA,EAAY,sBAAA,qBAAZA,EAAY,iCAAA,+BAAZA,EAAY,kCAAA,gCAAZA,EAAY,6CAAA,0CAAZA,EAAY,4CAAA,yCAAZA,EAAY,iCAAA,+BAAZA,EAAY,oCAAA,kCAAZA,EAAY,iCAAA,+BAAZA,EAAY,oBAAA,oBAAZA,EAAY,sBAAA,sBAAZA,EAAY,uBAAA,uBAAZA,EAAY,mCAAA,kCAAZA,EAAY,kBAAA,kBAAZA,EAAY,iBAAA,iBAAZA,EAAY,mBAAA,mBAAZA,EAAY,oBAAA,oBAAZA,EAAY,mBAAA,mBAAZA,EAAY,uBAAA,sBAAZA,EAAY,yBAAA,wBAAZA,EAAY,oBAAA,yBAAZA,EAAY,4BAAA,2BAAZA,EAAY,gBAAA,gBAAZA,EAAY,kBAAA,kBAAZA,EAAY,mBAAA,mBAAZA,EAAY,mBAAA,mBAAZA,EAAY,SAAA,UAAZA,EAAY,kBAAA,kBAAZA,EAAY,eAAA,eAAZA,EAAY,iBAAA,iBAAZA,EAAY,uBAAA,sBAAZA,EAAY,iCAAA,gCAAZA,EAAY,oBAAA,oBAAZA,EAAY,uBAAA,uBAAZA,EAAY,qBAAA,qBAAZA,EAAY,kBAAA,kBAAZA,EAAY,sBAAA,qBAAZA,EAAY,sBAAA,qBAAZA,EAAY,mBAAA,oBAAZA,EAAY,iBAAA,UAAZA,EAAY,QAAA,UAAZA,CAAY,EAAA,ICbNC,EAAgB,EAAhBA,EAAgB,ECEbC,EAAS,WAK5B,SAAAA,EAAYC,EAAsBC,EAAgBC,GAA2BC,KAJrEH,YAAM,EAAAG,KACNC,WAAK,EAAAD,KACLD,aAAO,EAGbC,KAAKH,OAASA,EACdG,KAAKC,MAAQH,EACbE,KAAKD,QAAUA,CACjB,CAmBC,OAnBAH,EAAAM,UAEDC,QAAA,SAAQC,EAAmBC,GACzB,OAAQL,KAAKD,SACX,KAAKJ,EACH,OAAOK,KAAKH,OAAOM,QACjB,CAAEG,KAAM,UAAWR,GAAIE,KAAKC,OAC5BI,EACAD,GAEJ,KAAKT,EACH,OAAOK,KAAKH,OAAOM,QACjB,CAAEG,KAAM,UAAWC,QAASP,KAAKC,MAAOO,OAAQ,IAChDH,EACAD,GAEJ,QACE,MAAM,IAAIK,MAAK,gCAAiCT,KAAKD,WAE1DH,CAAA,CA5B2B,GCATc,EAAU,WAK7B,SAAAA,EAAYb,EAAQQ,EAAKN,GAA2BC,KAJ5CH,YAAM,EAAAG,KACNK,SAAG,EAAAL,KACHD,aAAO,EAGbC,KAAKH,OAASA,EACdG,KAAKK,IAAMA,EACXL,KAAKD,QAAUA,CACjB,CAWC,OAXAW,EAAAR,UAEDS,UAAA,WACE,IAAMC,EAWV,SAA2Bb,GACzB,OAAQA,GACN,KAAKJ,EACH,MAAO,UACT,KAAKA,EACH,MAAO,UACT,QACE,MAAM,IAAIc,MAAuCV,iCAAAA,GAEvD,CApB2Bc,CAAkBb,KAAKD,SAC9C,OAAOC,KAAKH,OAAOiB,UACjB,MACAd,KAAKK,IACL,CAAEC,KAAMM,IACR,EACA,CAAC,UAAW,aAEfF,CAAA,CApB4B,GCFxB,SAASK,EACdC,EACAC,EACAC,GAIA,OAAOC,WAAWjB,UAAUkB,MACxBJ,EAAMI,MAAMH,EAAOC,GACnB,IAAIC,WAAWE,MAAMnB,UAAUkB,MAAME,KAAKN,EAAOC,EAAOC,GAC9D,CCCC,IAEoBK,EAAY,WAyB/B,SAAAA,IAAcvB,KAxBNwB,KAAsB,CAC5B,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,IAAM,GAAM,IACxDxB,KACOyB,OAA6B,CACnC,IAAIC,YAAY,KAChB,IAAIA,YAAY,KAChB,IAAIA,YAAY,KAChB,IAAIA,YAAY,MACjB1B,KACO2B,UAAgC,CACtC,IAAID,YAAY,KAChB,IAAIA,YAAY,KAChB,IAAIA,YAAY,KAChB,IAAIA,YAAY,MACjB1B,KACO4B,KAAoB,IAAIF,YAAY,KAAI1B,KACxC6B,QAAuB,IAAIH,YAAY,KAAI1B,KAC3CK,IAAmB,IAAIqB,YAAY,GAAE1B,KAErC8B,OAAiB,EAAC9B,KAClB+B,QAAkB,EAAC/B,KACnBgC,iBAAW,EAAAhC,KACXiC,oBAAc,EAGpBjC,KAAKkC,WACP,CAEA,IAAAC,EAAAZ,EAAArB,UAqSC,OArSDiC,EACAC,yBAAA,SAAyBC,GAGvB,IAFA,IAAMC,EAAO,IAAIC,SAASF,GACpBG,EAAW,IAAId,YAAY,GACxBe,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASC,GAAKH,EAAKI,UAAc,EAAJD,GAG/B,OAAOD,GACRL,EAEDD,UAAA,WACE,IAAMN,EAAO5B,KAAK4B,KACZC,EAAU7B,KAAK6B,QACfJ,EAASzB,KAAKyB,OACdkB,EAAUlB,EAAO,GACjBmB,EAAUnB,EAAO,GACjBoB,EAAUpB,EAAO,GACjBqB,EAAUrB,EAAO,GACjBE,EAAY3B,KAAK2B,UACjBoB,EAAapB,EAAU,GACvBqB,EAAarB,EAAU,GACvBsB,EAAatB,EAAU,GACvBuB,EAAavB,EAAU,GAEvBwB,EAAI,IAAIzB,YAAY,KACtB0B,EAAI,EACJC,EAAK,EACLZ,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAI,IAAKA,IAEjBU,EAAEV,GADAA,EAAI,IACCA,GAAK,EAEJA,GAAK,EAAK,IAItB,IAAKA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CACxB,IAAIa,EAAKD,EAAMA,GAAM,EAAMA,GAAM,EAAMA,GAAM,EAAMA,GAAM,EACzDC,EAAMA,IAAO,EAAW,IAALA,EAAa,GAChC1B,EAAKwB,GAAKE,EACVzB,EAAQyB,GAAMF,EAGd,IAAMG,EAAKJ,EAAEC,GACPI,EAAKL,EAAEI,GACPE,EAAKN,EAAEK,GAGTE,EAAa,IAARP,EAAEG,GAAqB,SAALA,EAC3BX,EAAQS,GAAMM,GAAK,GAAOA,IAAM,EAChCd,EAAQQ,GAAMM,GAAK,GAAOA,IAAM,GAChCb,EAAQO,GAAMM,GAAK,EAAMA,IAAM,GAC/BZ,EAAQM,GAAKM,EAGbA,EAAU,SAALD,EAAwB,MAALD,EAAsB,IAALD,EAAmB,SAAJH,EACxDL,EAAWO,GAAOI,GAAK,GAAOA,IAAM,EACpCV,EAAWM,GAAOI,GAAK,GAAOA,IAAM,GACpCT,EAAWK,GAAOI,GAAK,EAAMA,IAAM,GACnCR,EAAWI,GAAMI,EAGZN,GAGHA,EAAIG,EAAKJ,EAAEA,EAAEA,EAAEM,EAAKF,KACpBF,GAAMF,EAAEA,EAAEE,KAHVD,EAAIC,EAAK,CAKb,GACDlB,EAEDxB,UAAA,SAAUgD,GAMR,IAJA,IAAMtD,EAAML,KAAKoC,yBAAyBuB,GACtCC,GAAU,EACVC,EAAS,EAENA,EAASxD,EAAIG,QAAUoD,GAC5BA,EAAUvD,EAAIwD,KAAY7D,KAAKK,IAAIwD,GACnCA,IAGF,IAAID,EAAJ,CAIA5D,KAAKK,IAAMA,EACX,IAAM0B,EAAW/B,KAAK+B,QAAU1B,EAAIG,OAEpC,GAAgB,IAAZuB,GAA6B,IAAZA,GAA6B,IAAZA,EACpC,MAAM,IAAItB,MAAM,wBAA0BsB,GAG5C,IACI+B,EACAC,EAaAC,EACAN,EAhBE5B,EAAU9B,KAAK8B,OAA6B,GAAnBC,EAAU,EAAI,GAIvCC,EAAehC,KAAKgC,YAAc,IAAIN,YAAYI,GAClDG,EAAkBjC,KAAKiC,eAAiB,IAAIP,YAAYI,GACxDmC,EAAOjE,KAAK4B,KACZJ,EAAOxB,KAAKwB,KAEZG,EAAY3B,KAAK2B,UACjBoB,EAAapB,EAAU,GACvBqB,EAAarB,EAAU,GACvBsB,EAAatB,EAAU,GACvBuB,EAAavB,EAAU,GAK7B,IAAKmC,EAAQ,EAAGA,EAAQhC,EAAQgC,IAC1BA,EAAQ/B,EACViC,EAAOhC,EAAY8B,GAASzD,EAAIyD,IAGlCJ,EAAIM,EAEAF,EAAQ/B,GAAY,GAKtB2B,EACGO,GAJHP,EAAKA,GAAK,EAAMA,IAAM,MAIR,KAAO,GAClBO,EAAMP,IAAM,GAAM,MAAS,GAC3BO,EAAMP,IAAM,EAAK,MAAS,EAC3BO,EAAS,IAAJP,GAGPA,GAAKlC,EAAMsC,EAAQ/B,EAAW,IAAM,IAC3BA,EAAU,GAAK+B,EAAQ/B,GAAY,IAE5C2B,EACGO,EAAKP,IAAM,KAAO,GAClBO,EAAMP,IAAM,GAAM,MAAS,GAC3BO,EAAMP,IAAM,EAAK,MAAS,EAC3BO,EAAS,IAAJP,IAGT1B,EAAY8B,GAASE,GAAQhC,EAAY8B,EAAQ/B,GAAW2B,KAAO,GAGrE,IAAKK,EAAW,EAAGA,EAAWjC,EAAQiC,IACpCD,EAAQhC,EAASiC,EAEfL,EADa,EAAXK,EACE/B,EAAY8B,GAEZ9B,EAAY8B,EAAQ,GAIxB7B,EAAe8B,GADbA,EAAW,GAAKD,GAAS,EACAJ,EAGzBX,EAAWkB,EAAKP,IAAM,KACtBV,EAAWiB,EAAMP,IAAM,GAAM,MAC7BT,EAAWgB,EAAMP,IAAM,EAAK,MAC5BR,EAAWe,EAAS,IAAJP,IAGpBzB,EAAe8B,GAAY9B,EAAe8B,KAAc,CA7E1D,CA+EF,EAEA5B,EACA+B,uBAAA,SAAuBC,GACrB,OACGA,GAAQ,IACA,MAAPA,IAAkB,GACX,SAAPA,IAAoB,EACrBA,IAAS,IAEbhC,EAEDhC,QAAA,SAAQiE,EAA+BP,EAAgB5D,GA2BrD,IA1BA,IAmBIoE,EAAIC,EAAIC,EAAIC,EACZC,EAAIC,EAAIC,EAAIC,EACZC,EAAaC,EAAaC,EAAaC,EAEvClB,EAAOrB,EAvBLwC,EAAUjF,KAAK+B,QAAU,EACzBE,EAAiBjC,KAAKiC,eACtBiD,EAAUlF,KAAK6B,QAEfF,EAAY3B,KAAK2B,UACjBoB,EAAapB,EAAU,GACvBqB,EAAarB,EAAU,GACvBsB,EAAatB,EAAU,GACvBuB,EAAavB,EAAU,GAEvBwD,EAAanF,KAAKoC,yBAAyBnC,GAC7CmF,EAAcD,EAAW,GACzBE,EAAcF,EAAW,GACzBG,EAAcH,EAAW,GACzBI,EAAcJ,EAAW,GAEvBK,EAAa,IAAIC,WAAWrB,GAC5BsB,EAAc,IAAID,WAAWD,EAAWhF,QAOxCmF,EAAW3F,KAAKkE,uBAEfL,EAAS2B,EAAWhF,QAAQ,CAcjC,IAbAqE,EAAcc,EAASH,EAAW3B,IAClCiB,EAAca,EAASH,EAAW3B,EAAS,IAC3CkB,EAAcY,EAASH,EAAW3B,EAAS,IAC3CmB,EAAcW,EAASH,EAAW3B,EAAS,IAE3CY,EAAKI,EAAc5C,EAAe,GAClCyC,EAAKM,EAAc/C,EAAe,GAClC0C,EAAKI,EAAc9C,EAAe,GAClC2C,EAAKE,EAAc7C,EAAe,GAElC6B,EAAQ,EAGHrB,EAAI,EAAGA,EAAIwC,EAASxC,IACvB4B,EACEtB,EAAW0B,IAAO,IAClBzB,EAAY0B,GAAM,GAAM,KACxBzB,EAAY0B,GAAM,EAAK,KACvBzB,EAAgB,IAAL0B,GACX3C,EAAe6B,GACjBQ,EACEvB,EAAW2B,IAAO,IAClB1B,EAAY2B,GAAM,GAAM,KACxB1B,EAAY2B,GAAM,EAAK,KACvB1B,EAAgB,IAALuB,GACXxC,EAAe6B,EAAQ,GACzBS,EACExB,EAAW4B,IAAO,IAClB3B,EAAY4B,GAAM,GAAM,KACxB3B,EAAYwB,GAAM,EAAK,KACvBvB,EAAgB,IAALwB,GACXzC,EAAe6B,EAAQ,GACzBU,EACEzB,EAAW6B,IAAO,IAClB5B,EAAYyB,GAAM,GAAM,KACxBxB,EAAYyB,GAAM,EAAK,KACvBxB,EAAgB,IAALyB,GACX1C,EAAe6B,EAAQ,GAEzBW,EAAKJ,EACLK,EAAKJ,EACLK,EAAKJ,EACLK,EAAKJ,EAELV,GAAgB,EAIlBO,EACGa,EAAQT,IAAO,KAAO,GACtBS,EAASR,GAAM,GAAM,MAAS,GAC9BQ,EAASP,GAAM,EAAK,MAAS,EAC9BO,EAAa,IAALN,GACR3C,EAAe6B,GACjBQ,EACGY,EAAQR,IAAO,KAAO,GACtBQ,EAASP,GAAM,GAAM,MAAS,GAC9BO,EAASN,GAAM,EAAK,MAAS,EAC9BM,EAAa,IAALT,GACRxC,EAAe6B,EAAQ,GACzBS,EACGW,EAAQP,IAAO,KAAO,GACtBO,EAASN,GAAM,GAAM,MAAS,GAC9BM,EAAST,GAAM,EAAK,MAAS,EAC9BS,EAAa,IAALR,GACRzC,EAAe6B,EAAQ,GACzBU,EACGU,EAAQN,IAAO,KAAO,GACtBM,EAAST,GAAM,GAAM,MAAS,GAC9BS,EAASR,GAAM,EAAK,MAAS,EAC9BQ,EAAa,IAALP,GACR1C,EAAe6B,EAAQ,GAGzB4B,EAAY7B,GAAU8B,EAAStB,EAAKe,GACpCM,EAAY7B,EAAS,GAAK8B,EAASnB,EAAKa,GACxCK,EAAY7B,EAAS,GAAK8B,EAASpB,EAAKe,GACxCI,EAAY7B,EAAS,GAAK8B,EAASrB,EAAKiB,GAGxCH,EAAcP,EACdQ,EAAcP,EACdQ,EAAcP,EACdQ,EAAcP,EAEdnB,GAAkB,CACpB,CAEA,OAAO6B,EAAYE,QACpBrE,CAAA,CAlU8B,47CCmBjC,IAAMsE,EAAqB,aAErBC,EAAsB,CAC1BC,MAAOF,EACPG,MAAOH,EACPI,IAAKJ,EACLK,KAAML,EACNM,KAAMN,EACNO,MAAOP,GAGT,SAASQ,IACP,OAAOC,EAAc,GAAIR,EAC3B,CAkBA,SAASS,EACPlG,EACAmG,EACAC,GAEA,OAAOD,EAAYnG,GACfmG,EAAYnG,GAAKqG,KAAKF,GAb5B,SAAwBG,EAAcF,GACpC,IAAMG,EAAqBC,KAAKC,QAAQH,GACxC,OAAOC,EACHA,EAAKF,KAAKG,KAAKC,SAAYL,EAAK,IAAMA,EAAK,KAAO,QAAME,EAAI,OAC5Dd,CACN,CASMkB,CAAe1G,EAAKoG,EAC1B,CAEA,IAAIO,EAA0BX,IAwCvB,IAAMY,EAAkBD,EChHlBE,EACXC,OAAOC,UACP,SAAUC,GACR,MAAwB,iBAAVA,GAAsBD,SAASC,EAC/C,EAGWC,EACXH,OAAOG,eACP,SAAUD,GACR,MAAwB,iBAAVA,GAAsBE,KAAKC,IAAIH,IAAUI,CACzD,EAEWA,EAAmBN,OAAOM,kBAAoB,yHCXrDC,EAEAC,EACAC,EACAC,EAEAC,EANAJ,EACF,iIACEC,EAAsB,2BACtBC,EAAkB,oBAClBC,EAAsB,wCAEtBC,EAAa,CAOfC,iBAAkB,SAAUC,EAASC,EAAaC,GAKhD,GAJAA,EAAOA,GAAQ,GAEfF,EAAUA,EAAQG,SAClBF,EAAcA,EAAYE,QACR,CAIhB,IAAKD,EAAKE,gBACR,OAAOJ,EAET,IAAIK,EAAwBP,EAAWQ,SAASN,GAChD,IAAKK,EACH,MAAM,IAAI5H,MAAM,mCAKlB,OAHA4H,EAAsBE,KAAOT,EAAWU,cACtCH,EAAsBE,MAEjBT,EAAWW,kBAAkBJ,EACrC,CACD,IAAIK,EAAgBZ,EAAWQ,SAASL,GACxC,IAAKS,EACH,MAAM,IAAIjI,MAAM,uCAElB,GAAIiI,EAAcC,OAGhB,OAAKT,EAAKE,iBAGVM,EAAcH,KAAOT,EAAWU,cAAcE,EAAcH,MACrDT,EAAWW,kBAAkBC,IAH3BT,EAKX,IAAIW,EAAYd,EAAWQ,SAASN,GACpC,IAAKY,EACH,MAAM,IAAInI,MAAM,mCAElB,IAAKmI,EAAUC,QAAUD,EAAUL,MAA8B,MAAtBK,EAAUL,KAAK,GAAY,CAGpE,IAAIO,EAAYnB,EAAoBoB,KAAKH,EAAUL,MACnDK,EAAUC,OAASC,EAAU,GAC7BF,EAAUL,KAAOO,EAAU,EAC5B,CACGF,EAAUC,SAAWD,EAAUL,OACjCK,EAAUL,KAAO,KAEnB,IAAIS,EAAa,CAGfL,OAAQC,EAAUD,OAClBE,OAAQH,EAAcG,OACtBN,KAAM,KACNU,OAAQP,EAAcO,OACtBC,MAAOR,EAAcQ,MACrBC,SAAUT,EAAcS,UAE1B,IAAKT,EAAcG,SAIjBG,EAAWH,OAASD,EAAUC,OAGA,MAA1BH,EAAcH,KAAK,IACrB,GAAKG,EAAcH,KAgBZ,CAKL,IAAIa,EAAcR,EAAUL,KACxBc,EACFD,EAAYE,UAAU,EAAGF,EAAYG,YAAY,KAAO,GACxDb,EAAcH,KAChBS,EAAWT,KAAOT,EAAWU,cAAca,EAC5C,MAvBCL,EAAWT,KAAOK,EAAUL,KAIvBG,EAAcO,SACjBD,EAAWC,OAASL,EAAUK,OAIzBP,EAAcQ,QACjBF,EAAWE,MAAQN,EAAUM,QAqBvC,OALwB,OAApBF,EAAWT,OACbS,EAAWT,KAAOL,EAAKE,gBACnBN,EAAWU,cAAcE,EAAcH,MACvCG,EAAcH,MAEbT,EAAWW,kBAAkBO,EACrC,EACDV,SAAU,SAAUkB,GAClB,IAAIC,EAAQ/B,EAAUqB,KAAKS,GAC3B,OAAKC,EAGE,CACLd,OAAQc,EAAM,IAAM,GACpBZ,OAAQY,EAAM,IAAM,GACpBlB,KAAMkB,EAAM,IAAM,GAClBR,OAAQQ,EAAM,IAAM,GACpBP,MAAOO,EAAM,IAAM,GACnBN,SAAUM,EAAM,IAAM,IARf,IAUV,EACDjB,cAAe,SAAUD,GAgBvB,IATAA,EAAOA,EAAKmB,MAAM,IAAIC,UAAUC,KAAK,IAAIC,QAAQjC,EAAiB,IAUhEW,EAAK/H,UAAY+H,EAAOA,EAAKsB,QAAQhC,EAAqB,KAAKrH,SAEjE,OAAO+H,EAAKmB,MAAM,IAAIC,UAAUC,KAAK,GACtC,EACDnB,kBAAmB,SAAUgB,GAC3B,OACEA,EAAMd,OACNc,EAAMZ,OACNY,EAAMlB,KACNkB,EAAMR,OACNQ,EAAMP,MACNO,EAAMN,QAET,GCtJL,ICgYIW,EDhYcC,EAAqB,QAArBA,EAAqB,QCD1BC,EAAW,SAAC5J,EAAkByD,GAczC,OAAIA,EAAS,IAAMzD,EAAKI,QAGH,KAAjBJ,EAAKyD,IACgB,KAArBzD,EAAKyD,EAAS,IACO,KAArBzD,EAAKyD,EAAS,IAGVzD,EAAKyD,EAAS,GAAK,KAAQzD,EAAKyD,EAAS,GAAK,KAG9CzD,EAAKyD,EAAS,GAAK,KACnBzD,EAAKyD,EAAS,GAAK,KACnBzD,EAAKyD,EAAS,GAAK,KACnBzD,EAAKyD,EAAS,GAAK,GAS7B,EAOaoG,EAAW,SAAC7J,EAAkByD,GAIzC,OAAIA,EAAS,IAAMzD,EAAKI,QAGH,KAAjBJ,EAAKyD,IACgB,KAArBzD,EAAKyD,EAAS,IACO,KAArBzD,EAAKyD,EAAS,IAGVzD,EAAKyD,EAAS,GAAK,KAAQzD,EAAKyD,EAAS,GAAK,KAG9CzD,EAAKyD,EAAS,GAAK,KACnBzD,EAAKyD,EAAS,GAAK,KACnBzD,EAAKyD,EAAS,GAAK,KACnBzD,EAAKyD,EAAS,GAAK,GAS7B,EASaqG,EAAa,SACxB9J,EACAyD,GAKA,IAHA,IAAMsG,EAAQtG,EACVrD,EAAS,EAENwJ,EAAS5J,EAAMyD,IAAS,CAE7BrD,GAAU,GAGVA,GADa4J,EAAShK,EAAMyD,EAAS,GAGjCoG,EAAS7J,EAAMyD,EAAS,MAE1BrD,GAAU,IAGZqD,GAAUrD,CACZ,CAEA,GAAIA,EAAS,EACX,OAAOJ,EAAKiK,SAASF,EAAOA,EAAQ3J,EAIxC,EAEM4J,EAAW,SAAChK,EAAkByD,GAClC,IAAIyG,EAAO,EAKX,OAJAA,GAAuB,IAAflK,EAAKyD,KAAmB,GAChCyG,IAA4B,IAAnBlK,EAAKyD,EAAS,KAAc,GACrCyG,IAA4B,IAAnBlK,EAAKyD,EAAS,KAAc,EACrCyG,GAA2B,IAAnBlK,EAAKyD,EAAS,EAExB,EAEa0G,EAAW,SAACnK,EAAkByD,GACzC,OACEmG,EAAS5J,EAAMyD,IACfuG,EAAShK,EAAMyD,EAAS,GAAK,IAAMzD,EAAKI,OAASqD,CAErD,EAMa2G,EAAe,SAACpK,GAG3B,IAFA,IAAMqK,EAAkBC,EAAatK,GAE5BqC,EAAI,EAAGA,EAAIgI,EAAOjK,OAAQiC,IAAK,CACtC,IAAMkI,EAAQF,EAAOhI,GAErB,GAAImI,EAAiBD,GACnB,OAAOE,EAAcF,EAEzB,CAGF,EAKaC,EAAmB,SAACD,GAC/B,OACEA,GACc,SAAdA,EAAMtK,KACS,iDAAfsK,EAAMxE,IAEV,EAEM2E,EAAe,SAAC1K,GAMpB,IAAMuG,EAAeoE,OAAOC,aAAa5K,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACnEkK,EAAeF,EAAShK,EAAM,GAKpC,MAAO,CAAEuG,KAAAA,EAAM2D,KAAAA,EAAMlK,KAAMA,EAAKiK,SAFjB,MAE2CC,GAC5D,EAMaI,EAAe,SAACO,GAI3B,IAHA,IAAIpH,EAAS,EACP4G,EAAkB,GAEjBT,EAASiB,EAASpH,IAAS,CAMhC,IALA,IAAMyG,EAAOF,EAASa,EAASpH,EAAS,GAGlC3C,GADN2C,GAAU,IACWyG,EAEdzG,EAAS,EAAI3C,GAAK,CACvB,IAAMgK,EAAsBJ,EAAaG,EAAQZ,SAASxG,IACpD8G,EAA2BQ,EAAYD,GACzCP,GACFF,EAAOW,KAAKT,GAId9G,GAAUqH,EAAUZ,KAAO,EAC7B,CAEIL,EAASgB,EAASpH,KACpBA,GAAU,GAEd,CAEA,OAAO4G,CACT,EAEaU,EAAc,SAACR,GAC1B,MAAmB,SAAfA,EAAMhE,KACD0E,EAAgBV,GACI,MAAlBA,EAAMhE,KAAK,GACb2E,EAAeX,GAGjBY,EAAgBZ,EACzB,EAEMU,EAAkB,SACtBV,GAKA,KAAIA,EAAML,KAAO,GAAjB,CAIA,IAAMkB,EAAQC,EAAed,EAAMvK,MAAM,GACnCsL,EAAc,IAAIvK,WAAWwJ,EAAMvK,KAAKiK,SAASmB,EAAMhL,OAAS,IAEtE,MAAO,CAAEH,IAAKsK,EAAMhE,KAAMR,KAAMqF,EAAOpL,KAAMsL,EAAY9F,OALzD,CAMF,EAEM2F,EAAkB,SAACZ,GACvB,KAAIA,EAAML,KAAO,GAAjB,CAIA,GAAmB,SAAfK,EAAMhE,KAAiB,CAMzB,IAAIgF,EAAQ,EACNC,EAAcH,EAAed,EAAMvK,KAAKiK,SAASsB,IAAQ,GAE/DA,GAASC,EAAYpL,OAAS,EAC9B,IAAM6G,EAAQoE,EAAed,EAAMvK,KAAKiK,SAASsB,IAEjD,MAAO,CAAEtL,IAAKsK,EAAMhE,KAAMR,KAAMyF,EAAaxL,KAAMiH,EACrD,CAMA,IAAMwE,EAAOJ,EAAed,EAAMvK,KAAKiK,SAAS,IAChD,MAAO,CAAEhK,IAAKsK,EAAMhE,KAAMvG,KAAMyL,EAtBhC,CAuBF,EAEMP,EAAiB,SAACX,GACtB,GAAmB,SAAfA,EAAMhE,KAAiB,CAMzB,GAAIgE,EAAML,KAAO,EACf,OAGF,IAAIqB,EAAQ,EACNC,EAAsBH,EAC1Bd,EAAMvK,KAAKiK,SAASsB,IACpB,GAGFA,GAASC,EAAYpL,OAAS,EAC9B,IAAM6G,EAAgBoE,EAAed,EAAMvK,KAAKiK,SAASsB,IAEzD,MAAO,CAAEtL,IAAKsK,EAAMhE,KAAMR,KAAMyF,EAAaxL,KAAMiH,EACrD,CAKA,IAAMmC,EAAciC,EAAed,EAAMvK,MACzC,MAAO,CAAEC,IAAKsK,EAAMhE,KAAMvG,KAAMoJ,EAClC,EAEMqB,EAAgB,SACpBiB,GAEA,GAAuC,IAAnCA,EAAe1L,KAAK2L,WAAkB,CACxC,IAAM3L,EAAO,IAAIe,WAAW2K,EAAe1L,MAGrC4L,EAAqB,EAAV5L,EAAK,GAClB6L,GACD7L,EAAK,IAAM,KAAOA,EAAK,IAAM,KAAOA,EAAK,IAAM,GAAKA,EAAK,GAO5D,OANA6L,GAAa,GAETD,IACFC,GAAa,aAGR1E,KAAK2E,MAAMD,EACpB,CAGF,EAWaR,EAAiB,SAC5BzK,EACAmL,QAAmB,IAAnBA,IAAAA,GAAsB,GAEtB,IAAMrC,EAAUsC,IAChB,GAAItC,EAAS,CACX,IAAMuC,EAAUvC,EAAQwC,OAAOtL,GAE/B,GAAImL,EAAY,CAEd,IAAMI,EAAMF,EAAQG,QAAQ,MAC5B,OAAgB,IAATD,EAAaF,EAAQ/C,UAAU,EAAGiD,GAAOF,CAClD,CAGA,OAAOA,EAAQxC,QAAQ,MAAO,GAChC,CAQA,IANA,IACI4C,EACAC,EACAC,EAHEC,EAAM5L,EAAMR,OAIdqM,EAAM,GACNpK,EAAI,EACDA,EAAImK,GAAK,CAEd,GAAU,KADVH,EAAIzL,EAAMyB,OACQ0J,EAChB,OAAOU,EACF,GAAU,IAANJ,GAAoB,IAANA,EAIzB,OAAQA,GAAK,GACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAEHI,GAAO9B,OAAOC,aAAayB,GAC3B,MACF,KAAK,GACL,KAAK,GAEHC,EAAQ1L,EAAMyB,KACdoK,GAAO9B,OAAOC,cAAmB,GAAJyB,IAAa,EAAc,GAARC,GAChD,MACF,KAAK,GAEHA,EAAQ1L,EAAMyB,KACdkK,EAAQ3L,EAAMyB,KACdoK,GAAO9B,OAAOC,cACN,GAAJyB,IAAa,IAAgB,GAARC,IAAiB,GAAe,GAARC,IAAiB,GAKxE,CACA,OAAOE,CACT,EAQA,SAAST,IAGP,IAAIU,UAAUC,UAAUC,SAAS,iBAQjC,OAJKlD,QAAuC,IAArBjD,KAAKoG,cAC1BnD,EAAU,IAAIjD,KAAKoG,YAAY,UAG1BnD,CACT,CCtZA,IAAMoD,EACK,SAAUlM,GAEjB,IADA,IAAImM,EAAM,GACD1K,EAAI,EAAGA,EAAIzB,EAAMR,OAAQiC,IAAK,CACrC,IAAI2K,EAAIpM,EAAMyB,GAAG4K,SAAS,IACtBD,EAAE5M,OAAS,IACb4M,EAAI,IAAMA,GAGZD,GAAOC,CACT,CACA,OAAOD,CACT,ECRIG,EAAa/F,KAAKgG,IAAI,EAAG,IAAM,EAC/BnC,EAAO,GAAGA,KAUHoC,EAAuB,CAClCC,MAAO,EACPC,MAAO,EACPC,IAAK,EACL9B,KAAM,GAGD,SAAS+B,GAAQxN,GACtB,OAAO2K,OAAOC,aAAa6C,MAAM,KAAMzN,EACzC,CAEO,SAAS0N,GAAWlI,EAAoB/B,GAC7C,IAAMkK,EAAOnI,EAAO/B,IAAW,EAAK+B,EAAO/B,EAAS,GACpD,OAAOkK,EAAM,EAAI,MAAQA,EAAMA,CACjC,CAEO,SAASC,GAAWpI,EAAoB/B,GAC7C,IAAMkK,EAAME,GAAWrI,EAAQ/B,GAC/B,OAAOkK,EAAM,EAAI,WAAaA,EAAMA,CACtC,CAEO,SAASE,GAAWrI,EAAoB/B,GAC7C,OACG+B,EAAO/B,IAAW,GAClB+B,EAAO/B,EAAS,IAAM,GACtB+B,EAAO/B,EAAS,IAAM,EACvB+B,EAAO/B,EAAS,EAEpB,CAEO,SAASqK,GAAYtI,EAAoB/B,EAAgBwD,GAC9DzB,EAAO/B,GAAUwD,GAAS,GAC1BzB,EAAO/B,EAAS,GAAMwD,GAAS,GAAM,IACrCzB,EAAO/B,EAAS,GAAMwD,GAAS,EAAK,IACpCzB,EAAO/B,EAAS,GAAa,IAARwD,CACvB,CAsBO,SAAS8G,GAAQ/N,EAAkBmI,GACxC,IAAM6F,EAAU,GAChB,IAAK7F,EAAK/H,OAER,OAAO4N,EAIT,IAFA,IAAMlN,EAAMd,EAAK2L,WAERtJ,EAAI,EAAGA,EAAIvB,GAAO,CACzB,IAAMoJ,EAAO0D,GAAW5N,EAAMqC,GAExB4L,EAAS/D,EAAO,EAAI7H,EAAI6H,EAAOpJ,EACrC,GAFa0M,GAAQxN,EAAKiK,SAAS5H,EAAI,EAAGA,EAAI,MAEjC8F,EAAK,GAChB,GAAoB,IAAhBA,EAAK/H,OAGP4N,EAAQhD,KAAKhL,EAAKiK,SAAS5H,EAAI,EAAG4L,QAC7B,CAEL,IAAMC,EAAaH,GAAQ/N,EAAKiK,SAAS5H,EAAI,EAAG4L,GAAS9F,EAAKnH,MAAM,IAChEkN,EAAW9N,QACb4K,EAAKyC,MAAMO,EAASE,EAExB,CAEF7L,EAAI4L,CACN,CAGA,OAAOD,CACT,CAUO,SAASG,GAAkBC,GAChC,IAAMC,EAAoB,GAEpBC,EAAUF,EAAK,GAGjB7C,EAAQ,EAENgD,EAAYX,GAAWQ,EAAM7C,GACnCA,GAAS,EAQPA,GADc,IAAZ+C,EACO,EAEA,GAIX/C,GAAS,EAET,IAAIiD,EAAYJ,EAAKhO,OAXD,EAadqO,EAAkBf,GAAWU,EAAM7C,GACzCA,GAAS,EAET,IAAK,IAAIlJ,EAAI,EAAGA,EAAIoM,EAAiBpM,IAAK,CACxC,IAAIqM,EAAiBnD,EAEfoD,EAAgBf,GAAWQ,EAAMM,GACvCA,GAAkB,EAElB,IAAME,EAAgC,WAAhBD,EAGtB,GAAsB,KAFiB,WAAhBA,KAAgC,GAIrD,OADA9H,EAAOf,KAAK,oDACL,KAGT,IAAM+I,EAAqBjB,GAAWQ,EAAMM,GAC5CA,GAAkB,EAElBL,EAAWrD,KAAK,CACd4D,cAAAA,EACAC,mBAAAA,EACA9I,KAAM,CACJ+I,SAAUD,EAAqBN,EAC/B1N,MAAO2N,EACP1N,IAAK0N,EAAYI,EAAgB,KAIrCJ,GAAaI,EAObrD,EAHAmD,GAAkB,CAIpB,CAEA,MAAO,CACLK,yBAvD+B,EAwD/BR,UAAAA,EACAD,QAAAA,EACAG,gBAAAA,EACAJ,WAAAA,EAEJ,CA8CO,SAASW,GAAiBC,GAG/B,IAFA,IAAMC,EAAmB,GACnBC,EAAQpB,GAAQkB,EAAa,CAAC,OAAQ,SACnC5M,EAAI,EAAGA,EAAI8M,EAAM/O,OAAQiC,IAAK,CACrC,IAAM+M,EAAOD,EAAM9M,GACbgN,EAAOtB,GAAQqB,EAAM,CAAC,SAAS,GACrC,GAAIC,EAAM,CACR,IAAIf,EAAUe,EAAK,GACbC,EAAU1B,GAAWyB,EAAkB,IAAZf,EAAgB,GAAK,IAChDiB,EAAOxB,GAAQqB,EAAM,CAAC,OAAQ,SAAS,GAC7C,GAAIG,EAAM,CAER,IAAMhB,EAAYX,GAAW2B,EAAkB,KAD/CjB,EAAUiB,EAAK,IACoC,GAAK,IAClDC,EAAOzB,GAAQqB,EAAM,CAAC,OAAQ,SAAS,GAC7C,GAAII,EAAM,CACR,IAAMC,EAAWjC,GAAQgC,EAAKvF,SAAS,EAAG,KACpC1D,EAA6B,CACjCmJ,KAAM/F,EACNgG,KAAMhG,GACN8F,GACF,GAAIlJ,EAAM,CAER,IACMqJ,EAAWC,GADJ9B,GAAQqB,EAAM,CAAC,OAAQ,OAAQ,OAAQ,SAAS,IAE7DF,EAAOI,GAAW,CAAEf,UAAAA,EAAWhI,KAAAA,GAC/B2I,EAAO3I,GAAKuJ,EAAA,CAAKvB,UAAAA,EAAWlI,GAAIiJ,GAAYM,EAC9C,CACF,CACF,CACF,CACF,CAcA,OAZa7B,GAAQkB,EAAa,CAAC,OAAQ,OAAQ,SAC9Cc,SAAQ,SAACC,GACZ,IAAMV,EAAU1B,GAAWoC,EAAM,GAC3BC,EAAQf,EAAOI,GACjBW,IACFA,EAAMC,QAAU,CACdpB,SAAUlB,GAAWoC,EAAM,IAC3BG,MAAOvC,GAAWoC,EAAM,KAG9B,IAEOd,CACT,CAEA,SAASW,GAAUO,GACjB,IAAMC,EAAgBD,EAAKnG,SAAS,GAC9BqG,EAAmBD,EAAcpG,SAAS,IAC1CsG,EAAS/C,GAAQ6C,EAAcpG,SAAS,EAAG,IAC7CuG,EAAQD,EACNE,EAAuB,SAAXF,GAAgC,SAAXA,EACvC,GAAIE,EAAW,CACb,IAAMC,EAAS3C,GAAQsC,EAAe,CAACE,IAAS,GAElCxC,GADS2C,EAAOzG,SAAoB,SAAXsG,EAAoB,GAAK,IAC1B,CAAC,SACjCR,SAAQ,SAACY,GACb,IAAMC,EAAO7C,GAAQ4C,EAAM,CAAC,SAAS,GACrC,GAAIC,EAAM,CACR,IAAMrI,EAASiF,GAAQoD,EAAK3G,SAAS,EAAG,IACxC,GAAe,SAAX1B,GAAgC,SAAXA,EAAmB,CAC1C,IAAMsI,EAAO9C,GAAQ4C,EAAM,CAAC,SAAS,GACjCE,IAEFL,EAAQhD,GAAQqD,GAEpB,CACF,CACF,GACF,CACA,OAAQL,GACN,IAAK,OACL,IAAK,OACL,IAAK,OACL,IAAK,OAEH,IAAMM,EAAU/C,GAAQuC,EAAkB,CAAC,SAAS,GACpDE,GAAS,IAAMO,GAAMD,EAAQ,IAAMC,GAAMD,EAAQ,IAAMC,GAAMD,EAAQ,IACrE,MAEF,IAAK,OACH,IAAME,EAAWjD,GAAQsC,EAAe,CAACE,IAAS,GAC5CU,EAAUlD,GAAQiD,EAAS/G,SAAS,IAAK,CAAC,SAAS,GACzD,GAAIgH,GAAWA,EAAQ7Q,OAAS,GAAI,CAClC,IAAIiC,EAAI,EAER,GAAqB,IAAjB4O,EAAQ5O,KACV,MAEFA,EAAI6O,GAAeD,EAAS5O,GAC5BA,GAAK,EACL,IAAM8N,EAAQc,EAAQ5O,KAQtB,GAPY,IAAR8N,IACF9N,GAAK,GAEK,GAAR8N,IACF9N,GAAK4O,EAAQ5O,MAGM,IAAjB4O,EAAQ5O,KACV,MAEFA,EAAI6O,GAAeD,EAAS5O,GAC5B,IAAM8O,EAAaF,EAAQ5O,KAC3B,GAAmB,KAAf8O,EAGF,MAIF,GANEX,GAAS,IAAMO,GAAMI,GAIvB9O,GAAK,GAEgB,IAAjB4O,EAAQ5O,KACV,MAEFA,EAAI6O,GAAeD,EAAS5O,GAC5B,IAAM+O,EAAYH,EAAQ5O,KACtBgP,GAA+B,IAAZD,IAAqB,EACpB,KAApBC,IACFA,GACE,IAAkB,EAAZD,IAAoB,KAAoB,IAAbH,EAAQ5O,KAAc,IAE3DmO,GAAS,IAAMa,CACjB,CACA,MAEF,IAAK,OACL,IAAK,OACH,IAAMC,EAAUvD,GAAQuC,EAAkB,CAAC,SAAS,GAC9CiB,EAAcD,EAAQ,GACtBE,EAAe,CAAC,GAAI,IAAK,IAAK,KAAKD,GAAe,GAClDE,EAAkC,GAAdF,EACpBG,EAAgB9D,GAAW0D,EAAS,GACpCK,GAA0B,GAAdJ,IAAuB,EAAI,IAAM,IAC7CK,EAAWN,EAAQ,IACnBO,EAAsBP,EAAQrH,SAAS,EAAG,IAChDuG,GAAS,IAAMgB,EAAeC,EAC9BjB,GAAS,IAAMkB,EAAczE,SAAS,IAAI6E,cAC1CtB,GAAS,IAAMmB,EAAWC,EAE1B,IADA,IAAIG,EAAmB,GACd1P,EAAIwP,EAAoBzR,OAAQiC,KAAO,CAC9C,IAAM2P,EAAOH,EAAoBxP,GACjC,GAAI2P,GAAQD,EAEVA,EAAmB,IADCC,EAAK/E,SAAS,IAAI6E,cACCC,CAE3C,CACAvB,GAASuB,EACT,MAEF,IAAK,OACL,IAAK,OACH,IAAME,EAAUlE,GAAQuC,EAAkB,CAAC,SAAS,GAC9C4B,EAAWD,EAAQ,IAAM,EAAK,IAC9BE,EAAUF,EAAQ,IAAM,EAAK,GAAUA,EAAQ,IAAM,EAAK,GAChEzB,GAAS,IAAM4B,GAAeF,GAAW,IAAME,GAAeD,GAC9D,MAEF,IAAK,OACH,IAAME,EAAUtE,GAAQuC,EAAkB,CAAC,SAAS,GAC9C4B,EAAUG,EAAQ,GAClBF,EAAQE,EAAQ,GAChBC,EAAYD,EAAQ,IAAM,EAAK,GACrC7B,GACE,IACA4B,GAAeF,GACf,IACAE,GAAeD,GACf,IACAC,GAAeE,GACjB,MAEF,IAAK,OACH,IAAMC,EAAUxE,GAAQuC,EAAkB,CAAC,SAAS,GAC9C4B,EAAUK,EAAQ,KAAO,EACzBJ,EAAqB,GAAbI,EAAQ,GAChBZ,EAAWY,EAAQ,KAAO,EAAI,IAAM,IACpCC,GAA6B,GAAbD,EAAQ,KAAc,EACtCE,GAA0B,GAAbF,EAAQ,KAAc,EACnCD,EACQ,IAAZJ,GAAiBM,EACbC,EACE,GACA,GACFD,EACE,GACA,EACFE,GAA2B,GAAbH,EAAQ,KAAc,EACpCI,GAAmC,EAAbJ,EAAQ,KAAc,EAC5CK,GAAmC,EAAbL,EAAQ,KAAc,EAC5CM,EAAoC,EAAbN,EAAQ,GAQrC/B,GACE,IACA0B,EACA,IACAE,GAAeD,GACfR,EACA,IACAS,GAAeE,GACf,IACAI,EACA,IACAC,EACAC,EACAC,EACA,IACAT,GAnBqB,GAoBrB,IACAA,GApB8B,GAqB9B,IACAA,GArByB,GAGzB,KA+BN,MAAO,CAAE5B,MAAAA,EAAOC,UAAAA,EAClB,CAEA,SAASS,GAAe4B,EAAmBzQ,GAEzC,IADA,IAAM0Q,EAAQ1Q,EAAI,EACE,IAAbyQ,EAAMzQ,MAAeA,EAAI0Q,IAChC,OAAO1Q,CACT,CAEA,SAAS0O,GAAM/N,GACb,OAAQ,IAAMA,EAAEiK,SAAS,IAAI6E,eAAe9Q,OAAO,EACrD,CAEA,SAASoR,GAAeY,GACtB,OAAQA,EAAM,GAAK,IAAM,IAAMA,CACjC,CAEO,SAASC,GACdhE,EACAiE,GAEA,IAAKjE,IAAgBiE,EACnB,OAAOjE,EAET,IAAMkE,EAAQD,EAAYC,MACtBA,GAASD,EAAYE,oBACTrF,GAAQkB,EAAa,CAAC,OAAQ,SACtCc,SAAQ,SAACX,GACb,IAGMiB,EAHOtC,GAAQqB,EAAM,CAAC,OAAQ,OAAQ,OAAQ,SAAS,GAGlCnF,SAAS,GAChCoJ,EAAWtF,GAAQsC,EAAe,CAAC,SACjCiD,EAAUD,EAASjT,OAAS,EAC7BkT,IACHD,EAAWtF,GAAQsC,EAAe,CAAC,UAErCgD,EAAStD,SAAQ,SAACwD,GAEExF,GADKuF,EAAUC,EAAItJ,SAAS,IAAMsJ,EAAItJ,SAAS,IACvB,CAAC,SACjC8F,SAAQ,SAACY,GACjB,IAAM6C,EAuBT,SAAmB7C,GACxB,IAAMC,EAAO7C,GAAQ4C,EAAM,CAAC,SAAS,GACrC,GAAIC,EAAM,CACR,IAAMrI,EAASiF,GAAQoD,EAAK3G,SAAS,EAAG,IACxC,GAAe,SAAX1B,GAAgC,SAAXA,EACvB,OAAOwF,GAAQ4C,EAAM,CAAC,OAAQ,SAAS,EAE3C,CAEA,OADA9J,EAAOb,MAAK,4BACL,IACT,CAjCuByN,CAAU9C,GACvB,GAAI6C,EAAM,CAER,IAAME,EAAYF,EAAKvJ,SAAS,EAAG,IAC9ByJ,EAAUC,MAAK,SAACC,GAAC,OAAW,IAANA,CAAO,MAChC/M,EAAOhB,IAEHyN,gCAAAA,EAAU,IAAM,KAAG,qBACAxG,EAAY4G,GAAiB5G,OAAAA,EAChDqG,IAGJK,EAAKK,IAAIV,EAAO,GAEpB,CACF,GACF,GACF,IAGF,OAAOlE,CACT,CA+LO,SAAS6E,GAA8BC,GAC5C,IAAM5D,EAAQvC,GAAWmG,EAAM,GAG3BtQ,EAAS,EAED,EAAR0M,IACF1M,GAAU,GAGA,EAAR0M,IACF1M,GAAU,GAKZ,IAFA,IAAIqL,EAAW,EACTkF,EAAcpG,GAAWmG,EAAM,GAC5B1R,EAAI,EAAGA,EAAI2R,EAAa3R,IAAK,CAEpC,GAAY,IAAR8N,EAEFrB,GADuBlB,GAAWmG,EAAMtQ,GAExCA,GAAU,EAGA,IAAR0M,IACF1M,GAAU,GAGA,KAAR0M,IACF1M,GAAU,GAGA,KAAR0M,IACF1M,GAAU,EAEd,CACA,OAAOqL,CACT,CAmEO,SAASmF,GACdC,EACAC,GAEA,IAAMC,EAAO,IAAIrT,WAAWmT,EAAM9T,OAAS+T,EAAM/T,QAIjD,OAHAgU,EAAKP,IAAIK,GACTE,EAAKP,IAAIM,EAAOD,EAAM9T,QAEfgU,CACT,CAaO,SAASC,GACdC,EACArE,GAEA,IAAMsE,EAAa,GACbC,EAAYvE,EAAMwE,QAClBlG,EAAY0B,EAAM1B,UAClBe,EAAUW,EAAM5J,GAClBqO,GAAe,EAuInB,OArIc3G,GAAQyG,EAAW,CAAC,SAC5BG,KAAI,SAACC,GACT,IAAMC,EAAaD,EAAKE,WAAa,EACvB/G,GAAQ6G,EAAM,CAAC,SACvBD,KAAI,SAACI,GAET,IAAMC,EAAWjH,GAAQgH,EAAM,CAAC,SAASJ,KAAI,SAACM,GAC5C,IAAM3G,EAAU2G,EAAK,GACjB/F,EAAStB,GAAWqH,EAAM,GAK9B,OAJgB,IAAZ3G,IACFY,GAAU/H,KAAKgG,IAAI,EAAG,IACtB+B,GAAUtB,GAAWqH,EAAM,IAEtB/F,EAASX,KACf,GAMH,YAJiB2G,IAAbF,IACFV,EAAaU,GAGRjH,GAAQgH,EAAM,CAAC,SAASJ,KAAI,SAACQ,GAClC,IAAM9O,EAAKuH,GAAWuH,EAAM,GACtBC,EAAkC,SAAtBxH,GAAWuH,EAAM,GAI/BE,EAAwB,EACtBC,EAAsD,IAAd,GAAZF,GAC9BG,EAAoB,EAClBC,EAAuD,IAAd,GAAZJ,GAC/BK,EAAa,EAEbpP,IAAOiJ,IAT8C,IAAd,EAAZ8F,KAW3BK,GAAc,GAV+C,IAAd,EAAZL,KAanCK,GAAc,GAZ8C,IAAd,EAAZL,KAelCC,EAAwBzH,GAAWuH,EAAMM,GACzCA,GAAc,GAEZH,IACFC,EAAoB3H,GAAWuH,EAAMM,GACrCA,GAAc,GAEZD,IACFC,GAAc,GAEG,UAAfxF,EAAM1J,OACRmO,EAqFZ,SAAgBlE,GACd,IAAKA,EACH,OAAO,EAET,IAAMkF,EAAUlF,EAAMpE,QAAQ,KACxBuJ,EAAYD,EAAU,EAAIlF,EAAQA,EAAMtH,UAAU,EAAGwM,GAC3D,MACgB,SAAdC,GACc,SAAdA,GAEc,SAAdA,GACc,SAAdA,CAEJ,CAlG2BC,CAAO3F,EAAMO,QAG9BzC,GAAQgH,EAAM,CAAC,SAASJ,KAAI,SAACZ,GAC3B,IAAMzF,EAAUyF,EAAK,GACf5D,EAA8B,SAAtBvC,GAAWmG,EAAM,GACzB8B,EAA2C,IAAd,EAAR1F,GACvB2F,EAAa,EACXC,EAAiD,IAAd,EAAR5F,GAC3B6F,EAA+C,IAAd,IAAR7F,GAC3B8F,EAAiB,EACfC,EAA2C,IAAd,IAAR/F,GACvBgG,EAAa,EACXC,EAA4C,IAAd,KAARjG,GACtBkG,EAAyD,IAAd,KAARlG,GACrCmG,EAAoB,EAClBtC,EAAcpG,GAAWmG,EAAM,GACjCwC,EAAa,EAEbV,IACFC,EAAalI,GAAWmG,EAAMwC,GAC9BA,GAAc,GAEZR,IACFQ,GAAc,GAKhB,IAFA,IAAIC,EAAeV,EAAajB,EAEvB4B,EAAK,EAAGA,EAAKzC,EAAayC,IAAM,CAwBvC,GAvBIT,GACFC,EAAiBrI,GAAWmG,EAAMwC,GAClCA,GAAc,GAEdN,EAAiBZ,EAEfa,GACFC,EAAavI,GAAWmG,EAAMwC,GAC9BA,GAAc,GAEdJ,EAAaZ,EAEXa,IACFG,GAAc,GAEZF,IAEAC,EADc,IAAZhI,EACkBV,GAAWmG,EAAMwC,GAEjB1I,GAAWkG,EAAMwC,GAEvCA,GAAc,GAEZtG,EAAM1J,OAASoD,EAEjB,IADA,IAAI+M,EAAgB,EACbA,EAAgBP,GAAY,CACjC,IAAMQ,EAAW/I,GAAW4G,EAAWgC,GAEvC,GAAII,GAAalC,EAAcF,EAD/BgC,GAAgB,IAMdK,GAJarC,EAAUvK,SACrBuM,EACAA,EAAeG,GAIfjC,EAAe,EAAI,EACnBJ,EAAagC,EAAoB/H,EACjCgG,GAGJiC,GAAgBG,EAChBD,GAAiBC,EAAW,CAC9B,CAGFrC,GAAc2B,EAAiB1H,CACjC,CACF,IAEJ,GACF,GACF,IACOgG,CACT,CAiBA,SAASqC,GAAalC,EAAuBoC,GAC3C,GAAIpC,EAAc,CAChB,IAAMqC,EAAYD,GAAc,EAAK,GACrC,OAAoB,KAAbC,GAAgC,KAAbA,CAC5B,CAEE,OAAoB,KADU,GAAbD,EAGrB,CAEO,SAASD,GACdG,EACAC,EACAC,EACAzC,GAEA,IAAMzU,EAAOmX,GAAWH,GACpBI,EAAS,EAEbA,GAAUH,EAKV,IAJA,IAAII,EAAc,EACdC,EAAc,EACd1D,EAAI,EAEDwD,EAASpX,EAAKI,QAAQ,CAC3BiX,EAAc,EACd,EAAG,CACD,GAAID,GAAUpX,EAAKI,OACjB,MAGFiX,GADAzD,EAAI5T,EAAKoX,WAEI,MAANxD,GAGT0D,EAAc,EACd,EAAG,CACD,GAAIF,GAAUpX,EAAKI,OACjB,MAGFkX,GADA1D,EAAI5T,EAAKoX,WAEI,MAANxD,GAET,IAAM2D,EAAWvX,EAAKI,OAASgX,EAE3BI,EAASJ,EAGb,GAAIE,EAAcC,EAChBH,GAAUE,OACL,GAAIA,EAAcC,EAAU,CAEjC1Q,EAAOb,MAAK,0BACgBsR,EAAkCC,uBAAAA,2BAG9D,KACF,CAEA,GAAoB,IAAhBF,GAEF,GAAoB,MADArX,EAAKwX,KACA,CACvB,IAAMC,EAAe/J,GAAW1N,EAAMwX,GAGtC,GAFAA,GAAU,EAEW,KAAjBC,EAAqB,CACvB,IAAMC,EAAgB9J,GAAW5N,EAAMwX,GAGvC,GAFAA,GAAU,EAEY,aAAlBE,EAA8B,CAChC,IAAMC,EAAe3X,EAAKwX,KAG1B,GAAqB,IAAjBG,EAAoB,CACtB,IAAMvG,EAAYpR,EAAKwX,KAEjBI,EAAU,GAAOxG,EACjByG,EAAaD,EAAU,EAAe,GAF3B,GAAOxG,GAEwB,EAC1C0G,EAAY,IAAI/W,WAAW8W,GACjC,GAAID,EAAS,CACXE,EAAU,GAAK1G,EACf,IAAK,IAAI/O,EAAI,EAAGA,EAAIwV,EAAYxV,IAC9ByV,EAAUzV,GAAKrC,EAAKwX,IAExB,CAEA/C,EAAQzJ,KAAK,CACXzE,KAAMoR,EACNN,YAAAA,EACAH,IAAAA,EACApE,MAAOgF,GAEX,CACF,CACF,CACF,OACK,GAAoB,IAAhBT,GACLC,EAAc,GAAI,CAEpB,IADA,IAAMS,EAA8B,GAC3B1V,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMuR,EAAI5T,EAAKwX,KAAUvK,SAAS,IAClC8K,EAAa/M,KAAiB,GAAZ4I,EAAExT,OAAc,IAAMwT,EAAIA,GAElC,IAANvR,GAAiB,IAANA,GAAiB,IAANA,GAAiB,IAANA,GACnC0V,EAAa/M,KAAK,IAEtB,CAGA,IAFA,IAAM5K,EAASkX,EAAc,GACvBU,EAAgB,IAAIjX,WAAWX,GAC5BiC,EAAI,EAAGA,EAAIjC,EAAQiC,IAC1B2V,EAAc3V,GAAKrC,EAAKwX,KAG1B/C,EAAQzJ,KAAK,CACXqM,YAAAA,EACAH,IAAAA,EACAe,KAAMF,EAAavO,KAAK,IACxB0O,SAAU7M,EAAe2M,GACzBA,cAAAA,GAEJ,CAEJ,CACF,CAKO,SAASb,GAAWnX,GAMzB,IALA,IAAMI,EAASJ,EAAK2L,WACdwM,EAAe,GACjB9V,EAAI,EAGDA,EAAIjC,EAAS,GACF,IAAZJ,EAAKqC,IAA4B,IAAhBrC,EAAKqC,EAAI,IAA4B,IAAhBrC,EAAKqC,EAAI,IACjD8V,EAAanN,KAAK3I,EAAI,GACtBA,GAAK,GAELA,IAMJ,GAA4B,IAAxB8V,EAAa/X,OACf,OAAOJ,EAIT,IAAMoY,EAAYhY,EAAS+X,EAAa/X,OAClCiY,EAAU,IAAItX,WAAWqX,GAC3BE,EAAc,EAElB,IAAKjW,EAAI,EAAGA,EAAI+V,EAAWE,IAAejW,IACpCiW,IAAgBH,EAAa,KAE/BG,IAEAH,EAAaI,SAEfF,EAAQhW,GAAKrC,EAAKsY,GAEpB,OAAOD,CACT,CC1oCA,IAEqBG,GAAS,WAa5B,SAAAA,EAAYC,EAAiBC,GAAsC,IAAFC,YAAED,EAAJ,CAAE,EAAAA,GAAhCE,mBAAAA,OAAqB,IAAHD,GAAOA,EAIxD,GAJwD/Y,KAZlDiZ,YAAsB,EAAIjZ,KAC1BgZ,wBAAkB,EAAAhZ,KAClBH,OAA8B,KAAIG,KAClCkZ,kBAAyC,KAAIlZ,KAC7CK,IAA0B,KAAIL,KAC9BmZ,WAAgC,KAAInZ,KACpCoZ,cAAmC,KAAIpZ,KACvCqZ,UAAgC,KAAIrZ,KACpCsZ,cAAoC,KAAItZ,KACxCuZ,iBAAW,EAAAvZ,KACXwZ,uBAAiB,EAGvBxZ,KAAKwZ,kBAAoBX,EAAOW,kBAChCxZ,KAAKgZ,mBAAqBA,EAEtBA,EACF,IACE,IAAMS,EAAgB5S,KAAK6S,OACvBD,IACFzZ,KAAKH,OACH4Z,EAAc5Z,QACZ4Z,EAAsBE,aAE7B,CAAC,MAAOC,GACP,CAGJ5Z,KAAKuZ,YAA8B,OAAhBvZ,KAAKH,MAC1B,CAAC,IAAAsC,EAAAyW,EAAA1Y,UA+KA,OA/KAiC,EAED0X,QAAA,WACE7Z,KAAKH,OAAS,KACdG,KAAKkZ,kBAAoB,KACzBlZ,KAAKK,IAAM,KACXL,KAAKmZ,WAAa,KAClBnZ,KAAKoZ,cAAgB,KACrBpZ,KAAKqZ,UAAY,KACjBrZ,KAAKsZ,cAAgB,MACtBnX,EAEM2X,OAAP,WACE,OAAO9Z,KAAKuZ,aACbpX,EAEM4X,MAAP,WACE,IAAQT,EAAiCtZ,KAAjCsZ,cAAeF,EAAkBpZ,KAAlBoZ,cACvB,IAAKE,GAAiBF,EAEpB,OADApZ,KAAKga,QACE,KAET,IR5D0BhZ,EACtBiZ,EACAC,EQ0DE9Z,EAAO,IAAIe,WAAWmY,GAE5B,OADAtZ,KAAKga,QACDha,KAAKgZ,oBR7DLiB,GADsBjZ,EQ+DHZ,GR9DC2L,YACpBmO,EACJD,GAAe,IAAI1X,SAASvB,EAAM4E,QAAQuU,SAASF,EAAc,IAE1DlZ,EAAWC,EAAO,EAAGiZ,EAAcC,GAErClZ,GQ0DEZ,GACR+B,EAEM6X,MAAP,WACEha,KAAKsZ,cAAgB,KACrBtZ,KAAKqZ,UAAY,KACjBrZ,KAAKoZ,cAAgB,KACjBpZ,KAAKkZ,oBACPlZ,KAAKkZ,kBAAoB,OAE5B/W,EAEMhC,QAAP,SACEC,EACAC,EACAP,EACAC,GACsB,IAAAqa,EAAApa,KACtB,OAAIA,KAAKuZ,YACA,IAAIc,SAAQ,SAACC,EAASC,GAC3BH,EAAKI,gBAAgB,IAAIrZ,WAAWf,GAAOC,EAAKP,EAAIC,GACpD,IAAM0a,EAAgBL,EAAKL,QACvBU,EACFH,EAAQG,EAAc7U,QAEtB2U,EAAO,IAAI9Z,MAAM,4CAErB,IAEKT,KAAK0a,iBAAiB,IAAIvZ,WAAWf,GAAOC,EAAKP,EAAIC,EAC9D,EAGAoC,EACOqY,gBAAP,SACEpa,EACAC,EACAP,EACAC,GAEA,IAAQsZ,EAA4CrZ,KAA5CqZ,UAAWC,EAAiCtZ,KAAjCsZ,cAAeF,EAAkBpZ,KAAlBoZ,cAClC,GAAIrZ,IAAYJ,GAA2C,KAAnBU,EAAI0L,WAE1C,OADA9E,EAAOf,KAAK,gDACL,KAETlG,KAAK2a,QAAQ,kBAMTvB,IACFhZ,EAAOiU,GAAiB+E,EAAehZ,GACvCJ,KAAKoZ,cAAgB,MAIvB,IAAMwB,EAAe5a,KAAK6a,cAAcza,GACxC,IAAKwa,EAAapa,OAChB,OAAO,KAGL6Y,IACFvZ,EAAKuZ,GAGP,IAAIH,EAAoBlZ,KAAKkZ,kBACxBA,IACHA,EAAoBlZ,KAAKkZ,kBAAoB,IAAI3X,GAEnD2X,EAAkBvY,UAAUN,GAE5B,IAAMiP,EAASgK,EAKf,OAHAtZ,KAAKsZ,cAAgBJ,EAAkB/Y,QAAQya,EAAahV,OAAQ,EAAG9F,GACvEE,KAAKqZ,UAAYtY,EAAW6Z,GAAe,IAAIhV,OAE1C0J,GACI,MAGVnN,EAEMuY,iBAAP,SACEta,EACAC,EACAP,EACAC,GACsB,IAAA+a,EAAA9a,KAChBH,EAASG,KAAKH,OAKpB,OAJIG,KAAKK,MAAQA,GAAQL,KAAKmZ,aAC5BnZ,KAAKK,IAAMA,EACXL,KAAKmZ,WAAa,IAAIzY,EAAWb,EAAQQ,EAAKN,IAEzCC,KAAKmZ,WACTxY,YACAoa,MAAK,SAACC,GAEL,OAAKnb,GAGLib,EAAKH,QAAQ,yBACE,IAAI/a,EAAUC,EAAQ,IAAIsB,WAAWrB,GAAKC,GAC3CI,QAAQC,EAAKwF,OAAQoV,IAJ1BX,QAAQE,OAAO,IAAI9Z,MAAM,8BAKpC,IACCwa,OAAM,SAACC,GAKN,OAJAjU,EAAOf,KAAI,wDAC+CgV,EAAI5a,KAAS4a,KAAAA,EAAIC,SAGpEL,EAAKM,iBAAiBhb,EAAMC,EAAKP,EAAIC,EAC9C,KACHoC,EAEOiZ,iBAAR,SAAyBhb,EAAMC,EAAKP,EAAIC,GACtC,IAAMyZ,EAAoBxZ,KAAKwZ,kBAC/B,GAAIA,EAAmB,CACrBxZ,KAAKuZ,aAAc,EACnBvZ,KAAKiZ,YAAa,EAClBjZ,KAAKwa,gBAAgBpa,EAAMC,EAAKP,EAAIC,GACpC,IAAM0a,EAAgBza,KAAK+Z,QAC3B,GAAIU,EACF,OAAOA,EAAc7U,MAEzB,CACA,MAAM,IAAInF,MACR,aACG+Y,EAAoB,uBAAyB,IAC9C,6BAELrX,EAEO0Y,cAAR,SAAsBza,GACpB,IAAIwa,EAAexa,EACbib,EAAajb,EAAKI,OAAUJ,EAAKI,OAjMxB,GAsMf,OAJI6a,IAAejb,EAAKI,SACtBoa,EAAe7Z,EAAWX,EAAM,EAAGib,GACnCrb,KAAKoZ,cAAgBrY,EAAWX,EAAMib,IAEjCT,GACRzY,EAEOwY,QAAR,SAAgBW,GACTtb,KAAKiZ,aAGVhS,EAAOhB,IAAoBqV,gBAAAA,GAC3Btb,KAAKiZ,YAAa,IACnBL,CAAA,CA7M2B,GCsFZ2C,GAAc,UAAdA,GAAc,+BC/FzB,SAASC,GAAW7U,EAAW8U,GACpC,YAD6B,IAAJ9U,IAAAA,EAAO,SAAkB,IAAd8U,IAAAA,EAAiB,KAC9C,CACL9U,KAAAA,EACAF,IAAK,EACLiV,KAAM,EACND,eAAAA,EACAE,gBAAiB,EACjB9G,QAAS,GACT+G,QAAS,EAEb,CCEqD,IAG/CC,GAAgB,WAAA,SAAAA,IAAA7b,KACV8b,iBAAW,EAAA9b,KACX+b,eAAS,EAAA/b,KACTgc,WAAqB,EAAChc,KACtBic,WAAgC,KAAIjc,KACpCkc,QAAyB,KAAIlc,KAC7Bmc,QAAoC,KAAInc,KACxCoc,QAAyB,IAAI,CAAA,IAAAja,EAAA0Z,EAAA3b,UAsJ3B,OAtJ2BiC,EAEvCka,iBAAA,SACEhN,EACAiN,EACAC,EACAC,GAEAxc,KAAK+b,UAAY,CACfpV,KAAM,MACNF,GAAI,EACJiV,KAAM,EACND,eAAgB,IAChBE,eAAgB,EAChB9G,QAAS,GACT+G,QAAS,IAEZzZ,EAEDsa,eAAA,SAAeC,GACb1c,KAAKmc,QAAUO,EACf1c,KAAK2c,mBACNxa,EAEDwa,gBAAA,WACE3c,KAAKkc,QAAU,KACflc,KAAKoc,QAAU,KACfpc,KAAKgc,WAAa,GACnB7Z,EAEDoI,SAAA,SAASnK,EAAkByD,GACzB,OAAO,GACR1B,EAEDya,YAAA,SACEvM,EACAjQ,EACAyD,GACoB,EAEtB1B,EACA0a,MAAA,SAAMzc,EAAkBsU,GAClB1U,KAAKic,aACP7b,EAAOiU,GAAiBrU,KAAKic,WAAY7b,GACzCJ,KAAKic,WAAa,MAGpB,IAEIa,EAFA7R,EAAkC8R,EAAe3c,EAAM,GACvDyD,EAASoH,EAAUA,EAAQzK,OAAS,EAElC6P,EAAQrQ,KAAK8b,YACbkB,EAAWhd,KAAK+b,UAChB9P,EAAYhB,EAAU8R,EAAiB9R,QAAWqK,EAClD9U,EAASJ,EAAKI,OAyBpB,KAtBmB,OAAjBR,KAAKkc,SACgB,IAApBlc,KAAKgc,YAAoBiB,EAAgBhR,MAE1CjM,KAAKkc,QAAUgB,GAAUjR,EAAWyI,EAAY1U,KAAKmc,SACrDnc,KAAKoc,QAAUpc,KAAKkc,SAGD,OAAjBlc,KAAKoc,UACPpc,KAAKoc,QAAUpc,KAAKkc,SAIlBjR,GAAWA,EAAQzK,OAAS,GAC9Bwc,EAASnI,QAAQzJ,KAAK,CACpBkM,IAAKtX,KAAKoc,QACVe,IAAKnd,KAAKoc,QACVhc,KAAM6K,EACNtE,KAAM4U,GACNrM,SAAU/H,OAAOiW,oBAIdvZ,EAASrD,GAAQ,CACtB,GAAIR,KAAKuK,SAASnK,EAAMyD,GAAS,CAC/B,IAAM8G,EAAQ3K,KAAK4c,YAAYvM,EAAOjQ,EAAMyD,GACxC8G,GACF3K,KAAKgc,aACLhc,KAAKoc,QAAUzR,EAAM0S,OAAO/F,IAE5BwF,EADAjZ,GAAU8G,EAAMnK,QAGhBqD,EAASrD,CAEZ,MAAUuc,EAAa3c,EAAMyD,IAE5BoH,EAAU8R,EAAe3c,EAAMyD,GAC/BmZ,EAASnI,QAAQzJ,KAAK,CACpBkM,IAAKtX,KAAKoc,QACVe,IAAKnd,KAAKoc,QACVhc,KAAM6K,EACNtE,KAAM4U,GACNrM,SAAU/H,OAAOiW,oBAGnBN,EADAjZ,GAAUoH,EAAQzK,QAGlBqD,IAEF,GAAIA,IAAWrD,GAAUsc,IAAkBtc,EAAQ,CACjD,IAAM8c,EAAcvc,EAAWX,EAAM0c,GACjC9c,KAAKic,WACPjc,KAAKic,WAAa5H,GAAiBrU,KAAKic,WAAYqB,GAEpDtd,KAAKic,WAAaqB,CAEtB,CACF,CAEA,MAAO,CACLC,WAAYlN,EACZmN,WAAYhC,KACZwB,SAAAA,EACAS,UAAWjC,OAEdrZ,EAEDub,eAAA,SACEtd,EACAud,EACAjJ,GAEA,OAAO2F,QAAQE,OACb,IAAI9Z,MACE,IAAAT,KACN,2DAEHmC,EAED4X,MAAA,SAAMrF,GAEJ,IAAMuH,EAAajc,KAAKic,WAMxB,OALIA,IACFjc,KAAKic,WAAa,KAClBjc,KAAK6c,MAAMZ,EAAY,IAGlB,CACLsB,WAAYvd,KAAK8b,YACjB0B,WAAYhC,KACZwB,SAAUhd,KAAK+b,UACf0B,UAAWjC,OAEdrZ,EAED0X,QAAA,aAAYgC,CAAA,CA7JQ,GAsKTqB,GAAY,SACvBjR,EACAyI,EACAyH,GAEA,OAAIyB,EAAgB3R,GACE,GAAbA,EAKW,IAAbyI,GAHWyH,EACM,IAAnBA,EAAQ/G,SAAoB+G,EAAQxN,UACrC,EAEN,EClBO,SAASkP,GAAgBzd,EAAkByD,GAChD,OAAwB,MAAjBzD,EAAKyD,IAAkD,MAAV,IAAnBzD,EAAKyD,EAAS,GACjD,CAEO,SAASia,GAAgB1d,EAAkByD,GAChD,OAA0B,EAAnBzD,EAAKyD,EAAS,GAAY,EAAI,CACvC,CAEO,SAASka,GAAmB3d,EAAkByD,GACnD,OACuB,EAAnBzD,EAAKyD,EAAS,KAAc,GAC7BzD,EAAKyD,EAAS,IAAM,GACA,IAAnBzD,EAAKyD,EAAS,MAAe,CAEnC,CAMO,SAASmG,GAAS5J,EAAkByD,GAIzC,OAAOA,EAAS,EAAIzD,EAAKI,QAAUqd,GAAgBzd,EAAMyD,EAC3D,CAUO,SAASma,GAAM5d,EAAkByD,GAGtC,GAAImG,GAAS5J,EAAMyD,GAAS,CAE1B,IAAMoa,EAAeH,GAAgB1d,EAAMyD,GAC3C,GAAIA,EAASoa,GAAgB7d,EAAKI,OAChC,OAAO,EAGT,IAAM0d,EAAcH,GAAmB3d,EAAMyD,GAC7C,GAAIqa,GAAeD,EACjB,OAAO,EAGT,IAAME,EAAYta,EAASqa,EAC3B,OAAOC,IAAc/d,EAAKI,QAAUwJ,GAAS5J,EAAM+d,EACrD,CACA,OAAO,CACT,CAEO,SAASC,GACd/N,EACAgO,EACAje,EACAyD,EACAyY,GAEA,IAAKjM,EAAMiO,WAAY,CACrB,IAAMzF,EArNH,SACLwF,EACAje,EACAyD,EACAyY,GAEA,IAAIiC,EACAC,EACAC,EACAC,EACA7F,EACE9L,EAAYD,UAAUC,UAAU4R,cAChCC,EAAgBtC,EAChBuC,EAAoB,CACxB,KAAO,MAAO,KAAO,KAAO,MAAO,KAAO,KAAO,MAAO,KAAO,KAAO,MACtE,IAAM,MAGRN,EAAiBC,EACqB,IAAf,IAAnBpe,EAAKyD,EAAS,MAAe,GACjC,IAAMib,GAAwC,GAAnB1e,EAAKyD,EAAS,MAAe,EACxD,KAAIib,EAAoBD,EAAkBre,OAAS,GAsHnD,OA3GAke,GAAwC,EAAnBte,EAAKyD,EAAS,KAAc,EAEjD6a,IAAyC,IAAnBte,EAAKyD,EAAS,MAAe,EACnDoD,EAAOhB,IACaqW,kBAAAA,iBAAyBiC,EAAc,mBAAmBO,GAG1E,oBAAoBC,KAAKhS,GACvB+R,GAAqB,GACvBP,EAAiB,EACjB1F,EAAS,IAAIxX,MAAM,GAInBod,EAA6BK,EAAoB,IAEjDP,EAAiB,EACjB1F,EAAS,IAAIxX,MAAM,GACnBod,EAA6BK,IAGY,IAAlC/R,EAAUP,QAAQ,YAC3B+R,EAAiB,EACjB1F,EAAS,IAAIxX,MAAM,GACnBod,EAA6BK,IAK7BP,EAAiB,EACjB1F,EAAS,IAAIxX,MAAM,GAGhBib,KACwC,IAAtCA,EAAW9P,QAAQ,gBACmB,IAArC8P,EAAW9P,QAAQ,gBACrB8P,GAAcwC,GAAqB,EAKrCL,EAA6BK,EAAoB,IAK9CxC,IACsC,IAArCA,EAAW9P,QAAQ,eACjBsS,GAAqB,GAA2B,IAAtBJ,GAC1B,WAAWK,KAAKhS,MAClBuP,GAAoC,IAAtBoC,KAEhBH,EAAiB,EACjB1F,EAAS,IAAIxX,MAAM,IAErBod,EAA6BK,IAqCjCjG,EAAO,GAAK0F,GAAkB,EAE9B1F,EAAO,KAA2B,GAApBiG,IAA6B,EAC3CjG,EAAO,KAA2B,EAApBiG,IAA6B,EAE3CjG,EAAO,IAAM6F,GAAqB,EACX,IAAnBH,IAEF1F,EAAO,KAAoC,GAA7B4F,IAAsC,EACpD5F,EAAO,IAAmC,EAA7B4F,IAAsC,EAGnD5F,EAAO,IAAM,EACbA,EAAO,GAAK,GAEP,CACLA,OAAAA,EACAyF,WAAYO,EAAkBC,GAC9BE,aAAcN,EACd9N,MAAO,WAAa2N,EACpBU,YAAa,WAAaT,EAC1BI,cAAAA,GA3HA,IAAMxY,EAAQ,IAAI3F,MAAK,+BAAgCqe,GACvDT,EAASa,KAAK1f,EAAO2f,MAAO3f,EAAO2f,MAAO,CACxCxY,KAAMlH,EAAW2f,YACjBC,QAAS3f,EAAa4f,mBACtBC,OAAO,EACPnZ,MAAAA,EACAoZ,OAAQpZ,EAAM+U,SAuHpB,CAkEmBsE,CAAepB,EAAUje,EAAMyD,EAAQyY,GACtD,IAAKzD,EACH,OAEFxI,EAAMwI,OAASA,EAAOA,OACtBxI,EAAMiO,WAAazF,EAAOyF,WAC1BjO,EAAM2O,aAAenG,EAAOmG,aAC5B3O,EAAMO,MAAQiI,EAAOjI,MACrBP,EAAMuO,cAAgB/F,EAAO+F,cAC7BvO,EAAM4O,YAAcpG,EAAOoG,YAC3BhY,EAAOhB,IAAG,gBACQoK,EAAM4O,uBAAsB5O,EAAMO,MAAK,UAAUiI,EAAOyF,yBAAwBzF,EAAOmG,aAE3G,CACF,CAEO,SAASU,GAAiBpB,GAC/B,OAAQ,OAAgBA,CAC1B,CAkBO,SAAS1B,GACdvM,EACAjQ,EACAyD,EACAyT,EACA0E,GAEA,IAGI2D,EAFEC,EAAQtI,EAAM0E,EADE0D,GAAiBrP,EAAMiO,YAEvCuB,EAzBD,SACLzf,EACAyD,GAGA,IAAMoa,EAAeH,GAAgB1d,EAAMyD,GAC3C,GAAIA,EAASoa,GAAgB7d,EAAKI,OAAQ,CAExC,IAAM0d,EAAcH,GAAmB3d,EAAMyD,GAAUoa,EACvD,GAAIC,EAAc,EAEhB,MAAO,CAAED,aAAAA,EAAcC,YAAAA,EAE3B,CACF,CAWiB4B,CAAiB1f,EAAMyD,GAEtC,GAAIgc,EAAQ,CACV,IAAQ3B,EAA8B2B,EAA9B3B,YAAaD,EAAiB4B,EAAjB5B,aACfzd,EAASyd,EAAeC,EACxB6B,EAAUxY,KAAKyY,IAAI,EAAGnc,EAASrD,EAASJ,EAAKI,QAE/Cuf,GACFJ,EAAO,IAAIxe,WAAWX,EAASyd,IAC1BhK,IAAI7T,EAAKiK,SAASxG,EAASoa,EAAc7d,EAAKI,QAAS,GAE5Dmf,EAAOvf,EAAKiK,SAASxG,EAASoa,EAAcpa,EAASrD,GAGvD,IAAM6c,EAAsB,CAC1BsC,KAAAA,EACArI,IAAKsI,GAMP,OAJKG,GACH1P,EAAMwE,QAAQzJ,KAAKiS,GAGd,CAAEA,OAAAA,EAAQ7c,OAAAA,EAAQuf,QAAAA,EAC3B,CAEA,IAAMvf,EAASJ,EAAKI,OAASqD,EAO7B,OANA8b,EAAO,IAAIxe,WAAWX,IACjByT,IAAI7T,EAAKiK,SAASxG,EAAQzD,EAAKI,QAAS,GAKtC,CAAE6c,OAJmB,CAC1BsC,KAAAA,EACArI,IAAKsI,GAEUpf,OAAAA,EAAQuf,SAAU,EACrC,CC1TA,IAAIE,GAA+B,KAE7BC,GAAc,CAClB,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAC3E,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GACxE,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IACzE,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAC1E,KAGIC,GAAkB,CACtB,MAAO,KAAO,KAAO,MAAO,KAAO,KAAO,MAAO,KAAO,KAGpDC,GAAsB,CAE1B,CACE,EACA,GACA,IACA,IAGF,CACE,EACA,EACA,EACA,GAGF,CACE,EACA,GACA,IACA,IAGF,CACE,EACA,IACA,IACA,KAIEC,GAAc,CAClB,EACA,EACA,EACA,GAGK,SAASzD,GACdvM,EACAjQ,EACAyD,EACAyT,EACA0E,GAGA,KAAInY,EAAS,GAAKzD,EAAKI,QAAvB,CAIA,IAAMqf,EAASS,GAAYlgB,EAAMyD,GACjC,GAAIgc,GAAUhc,EAASgc,EAAO3B,aAAe9d,EAAKI,OAAQ,CACxD,IACMof,EAAQtI,EAAM0E,GAD4B,IAAzB6D,EAAOU,gBAA2BV,EAAOW,YAE1DnD,EAAS,CACbsC,KAAMvf,EAAKiK,SAASxG,EAAQA,EAASgc,EAAO3B,aAC5C5G,IAAKsI,EACLzC,IAAKyC,GAQP,OALAvP,EAAMwI,OAAS,GACfxI,EAAM2O,aAAea,EAAOb,aAC5B3O,EAAMiO,WAAauB,EAAOW,WAC1BnQ,EAAMwE,QAAQzJ,KAAKiS,GAEZ,CAAEA,OAAAA,EAAQ7c,OAAQqf,EAAO3B,YAAa6B,QAAS,EACxD,CAlBA,CAmBF,CAEO,SAASO,GAAYlgB,EAAkByD,GAC5C,IAAM4c,EAAergB,EAAKyD,EAAS,IAAM,EAAK,EACxC6c,EAAatgB,EAAKyD,EAAS,IAAM,EAAK,EACtC8c,EAAgBvgB,EAAKyD,EAAS,IAAM,EAAK,GACzC+c,EAAmBxgB,EAAKyD,EAAS,IAAM,EAAK,EAClD,GACkB,IAAhB4c,GACiB,IAAjBE,GACiB,KAAjBA,GACoB,IAApBC,EACA,CACA,IAAMC,EAAczgB,EAAKyD,EAAS,IAAM,EAAK,EACvCid,EAAc1gB,EAAKyD,EAAS,IAAM,EAGlCkd,EACoD,IAAxDb,GAA+B,IAFf,IAAhBO,EAAoB,EAAIC,EAA0B,IAAdA,EAAkB,EAAI,GAEtBC,EAAe,GAG/CH,EACJL,GAAsC,GAFtB,IAAhBM,EAAoB,EAAoB,IAAhBA,EAAoB,EAAI,GAENG,GACtC5B,EAA+B,IAAhB8B,EAAoB,EAAI,EACvCE,EAAoBZ,GAAoBK,GAAaC,GACrDO,EAAcZ,GAAYK,GAC1BH,EAAsC,EAApBS,EAAwBC,EAC1C/C,EACJ3W,KAAK2Z,MAAOF,EAAoBD,EAAWP,EAAaK,GACxDI,EAEF,GAAsB,OAAlBhB,GAAwB,CAC1B,IACM3Q,GADYxC,UAAUC,WAAa,IAChBoU,MAAM,kBAC/BlB,GAAgB3Q,EAAS8R,SAAS9R,EAAO,IAAM,CACjD,CAaA,QAZwB2Q,IAAiBA,IAAiB,IAI1C,IAAdS,GACAK,GAAW,OACK,IAAhBD,IAGA1gB,EAAKyD,EAAS,GAAwB,IAAnBzD,EAAKyD,EAAS,IAG5B,CAAE2c,WAAAA,EAAYxB,aAAAA,EAAcd,YAAAA,EAAaqC,gBAAAA,EAClD,CACF,CAEO,SAAS1C,GAAgBzd,EAAkByD,GAChD,OACmB,MAAjBzD,EAAKyD,IACyB,MAAV,IAAnBzD,EAAKyD,EAAS,KACe,IAAV,EAAnBzD,EAAKyD,EAAS,GAEnB,CAEO,SAASmG,GAAS5J,EAAkByD,GAIzC,OAAOA,EAAS,EAAIzD,EAAKI,QAAUqd,GAAgBzd,EAAMyD,EAC3D,CAQO,SAASma,GAAM5d,EAAkByD,GAGtC,GAAIA,EAAS,EAAIzD,EAAKI,QAAUqd,GAAgBzd,EAAMyD,GAAS,CAE7D,IAEMgc,EAASS,GAAYlgB,EAAMyD,GAC7Bqa,EAHiB,EAIX,MAAN2B,GAAAA,EAAQ3B,cACVA,EAAc2B,EAAO3B,aAGvB,IAAMC,EAAYta,EAASqa,EAC3B,OAAOC,IAAc/d,EAAKI,QAAUwJ,GAAS5J,EAAM+d,EACrD,CACA,OAAO,CACT,CCzK8B,IAIxBkD,YAAUC,GAId,SAAAD,EAAYhD,EAAUxF,GAAQ,IAAAuB,EAGP,OAFrBA,EAAAkH,EAAAhgB,YAAOtB,MAJQqe,cAAQ,EAAAjE,EACRvB,YAAM,EAIrBuB,EAAKiE,SAAWA,EAChBjE,EAAKvB,OAASA,EAAOuB,CACvB,CARcmH,EAAAF,EAAAC,GAQb,IAAAnf,EAAAkf,EAAAnhB,UAwEA,OAxEAiC,EAEDka,iBAAA,SACEhN,EACAiN,EACAC,EACAC,GAEA8E,EAAAphB,UAAMmc,iBAAgB/a,KAAC+N,KAAAA,EAAaiN,EAAYC,EAAYC,GAC5Dxc,KAAK8b,YAAc,CACjB0F,UAAW,aACX7a,KAAM,QACNF,GAAI,EACJiV,KAAM,EACNC,eAAgB,EAChB8F,aAAc,MACd5M,QAAS,GACT+J,cAAetC,EACfpN,SAAUsN,EACVf,eAAgB,IAChBG,QAAS,EAEb,EAEAyF,EACOrD,MAAP,SAAa5d,GACX,IAAKA,EACH,OAAO,EAOT,IAAM6K,EAAU8R,EAAe3c,EAAM,GACjCyD,SAASoH,SAAAA,EAASzK,SAAU,EAEhC,GAAIkhB,GAAgBthB,EAAMyD,GACxB,OAAO,EAGT,IAAK,IAAIrD,EAASJ,EAAKI,OAAQqD,EAASrD,EAAQqD,IAC9C,GAAI8d,GAAWvhB,EAAMyD,GAEnB,OADAoD,EAAOhB,IAAI,2BACJ,EAGX,OAAO,GACR9D,EAEDoI,SAAA,SAASnK,EAAMyD,GACb,OFsIG,SAAkBzD,EAAkByD,GACzC,OAZK,SAA2BzD,EAAkByD,GAClD,OAAOA,EAAS,EAAIzD,EAAKI,MAC3B,CAWIohB,CAAkBxhB,EAAMyD,IACxBga,GAAgBzd,EAAMyD,IACtBka,GAAmB3d,EAAMyD,IAAWzD,EAAKI,OAASqD,CAEtD,CE5IW8d,CAAcvhB,EAAMyD,IAC5B1B,EAEDya,YAAA,SAAYvM,EAAOjQ,EAAMyD,GACvB8d,GACEtR,EACArQ,KAAKqe,SACLje,EACAyD,EACAwM,EAAMuO,eAER,IAAMjU,EAAQgX,GACZtR,EACAjQ,EACAyD,EACA7D,KAAKkc,QACLlc,KAAKgc,YAEP,GAAIrR,GAA2B,IAAlBA,EAAMoV,QACjB,OAAOpV,GAEV0W,CAAA,EAhFsBxF,ICgBnBgG,GAAoB,iBAEpBC,GAAU,WASd,SAAAA,EAAYzD,EAA2BxF,GAAmB7Y,KARlDoZ,cAAmC,KAAIpZ,KACvC0U,WAAqB,EAAC1U,KACtB6Y,YAAM,EAAA7Y,KACNwd,gBAAU,EAAAxd,KACVud,gBAAU,EAAAvd,KACVgd,cAAQ,EAAAhd,KACR+hB,cAAQ,EAGd/hB,KAAK6Y,OAASA,CAChB,CAAC,IAAA1W,EAAA2f,EAAA5hB,UA4JW,OA5JXiC,EAEMsa,eAAP,aAA0Bta,EAEnBka,iBAAP,SACEhN,EACAiN,EACAC,EACAC,GAEA,IAAMgB,EAAcxd,KAAKwd,WAAahC,GACpC,QACA,GAEI+B,EAAcvd,KAAKud,WAAa/B,GACpC,QACA,GAEIwG,EAAgBhiB,KAAK+hB,SAAWvG,GACpC,OACA,GAMF,GAHAxb,KAAKgd,SAAWxB,GAAW,MAAO,GAClCxb,KAAK0U,WAAa,EAEF,MAAXrF,GAAAA,EAAatD,WAAlB,CAGA,IAAMkW,EAAW7S,GAAiBC,GAElC,GAAI4S,EAASxU,MAAO,CAClB,IAAAyU,EAAiCD,EAASxU,MAAlChH,EAAEyb,EAAFzb,GAAIkI,EAASuT,EAATvT,UAAWiC,EAAKsR,EAALtR,MACvB4M,EAAW/W,GAAKA,EAChB+W,EAAW7O,UAAYqT,EAAarT,UAAYA,EAChD6O,EAAW5M,MAAQA,CACrB,CAEA,GAAIqR,EAASvU,MAAO,CAClB,IAAAyU,EAAiCF,EAASvU,MAAlCjH,EAAE0b,EAAF1b,GAAIkI,EAASwT,EAATxT,UAAWiC,EAAKuR,EAALvR,MACvB2M,EAAW9W,GAAKA,EAChB8W,EAAW5O,UAAYA,EACvB4O,EAAW3M,MAAQA,CACrB,CAEAoR,EAAavb,GAAK+G,EAAqB3B,KACvC2R,EAAWnH,eAAiB,EAC5BmH,EAAWtO,SAAWqO,EAAWrO,SAAWsN,CAnB5C,GAoBDra,EAEMwa,gBAAP,WACE3c,KAAKoZ,cAAgB,MACtB0I,EAEM9D,MAAP,SAAa5d,GACX,ORtCG,SAAqBA,GAE1B,IADA,IAAMc,EAAMd,EAAK2L,WACRtJ,EAAI,EAAGA,EAAIvB,GAAO,CACzB,IAAMoJ,EAAO0D,GAAW5N,EAAMqC,GAC9B,GACE6H,EAAO,GACS,MAAhBlK,EAAKqC,EAAI,IACO,MAAhBrC,EAAKqC,EAAI,IACO,MAAhBrC,EAAKqC,EAAI,IACO,MAAhBrC,EAAKqC,EAAI,GAET,OAAO,EAETA,EAAI6H,EAAO,EAAI7H,EAAI6H,EAAOpJ,CAC5B,CACA,OAAO,CACT,CQsBWkhB,CAAYhiB,IACpB+B,EAEM0a,MAAP,SAAazc,EAAkBsU,GAC7B1U,KAAK0U,WAAaA,EAElB,IAAI2N,EAAejiB,EACbod,EAAaxd,KAAKwd,WAClBC,EAAYzd,KAAK+hB,SACvB,GAAI/hB,KAAK6Y,OAAOyJ,YAAa,CAIvBtiB,KAAKoZ,gBACPiJ,EAAehO,GAAiBrU,KAAKoZ,cAAehZ,IAEtD,IAAMmiB,ERirBL,SAA2BniB,GAChC,IAAMoiB,EAAiC,CACrCC,MAAO,KACPC,UAAW,MAGPC,EAAQxU,GAAQ/N,EAAM,CAAC,SAC7B,GAAIuiB,EAAMniB,OAAS,EAEjB,OADAgiB,EAAeE,UAAYtiB,EACpBoiB,EAET,IAAMI,EAAOD,EAAMA,EAAMniB,OAAS,GAIlC,OAFAgiB,EAAeC,MAAQ1hB,EAAWX,EAAM,EAAGwiB,EAAK1N,WAAa,GAC7DsN,EAAeE,UAAY3hB,EAAWX,EAAMwiB,EAAK1N,WAAa,GACvDsN,CACT,CQjsB4BK,CAAkBR,GACxCriB,KAAKoZ,cAAgBmJ,EAAcG,UACnClF,EAAW3I,QAAU0N,EAAcE,OAAS,IAAIthB,UAClD,MACEqc,EAAW3I,QAAUwN,EAGvB,IAAMrF,EAAWhd,KAAK8iB,gBAAgBtF,EAAY9I,GAGlD,OAFA+I,EAAU5I,QAAUJ,GAAaC,EAAY8I,GAEtC,CACLA,WAAAA,EACAD,WAAYvd,KAAKud,WACjBP,SAAAA,EACAS,UAAWzd,KAAK+hB,WAEnB5f,EAEM4X,MAAP,WACE,IAAMrF,EAAa1U,KAAK0U,WAClB8I,EAAaxd,KAAKwd,WAClBC,EAAYzd,KAAK+hB,SACvBvE,EAAW3I,QAAU7U,KAAKoZ,eAAiB,IAAIjY,WAC/CnB,KAAKoZ,cAAgB,KAErB,IAAM4D,EAAWhd,KAAK8iB,gBAAgBtF,EAAYxd,KAAK0U,YAGvD,OAFA+I,EAAU5I,QAAUJ,GAAaC,EAAY8I,GAEtC,CACLA,WAAAA,EACAD,WAAY/B,KACZwB,SAAAA,EACAS,UAAWjC,OAEdrZ,EAEO2gB,gBAAR,SACEtF,EACA9I,GAEA,IAAMsI,EAAWhd,KAAKgd,SACtB,GAAIQ,EAAW3I,QAAQrU,OAAQ,CAC7B,IAAMuiB,EAAQ5U,GAAQqP,EAAW3I,QAAS,CAAC,SACvCkO,GACFA,EAAM5S,SAAQ,SAAC/P,GACb,IAAM4iB,ERy/BT,SAAmB5iB,GACxB,IAAMsO,EAAUtO,EAAK,GACjB6iB,EAAsB,GACtB5b,EAAgB,GAChB6b,EAAoB,EACpBC,EAAgC,EAChCC,EAA2B,EAC3BC,EAAwB,EACxB5c,EAAa,EACb5C,EAAiB,EAErB,GAAgB,IAAZ6K,EAAe,CACjB,KAAsD,OAA/Cd,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,KAC5Cof,GAAerV,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IACtDA,GAAU,EAMZ,IAHAof,GAAerV,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IACtDA,GAAU,EAE4C,OAA/C+J,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,KAC5CwD,GAASuG,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IAChDA,GAAU,EAGZwD,GAASuG,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IAChDA,GAAU,EAEVqf,EAAYlV,GAAW5N,EAAM,IAC7B+iB,EAAwBnV,GAAW5N,EAAM,IACzCijB,EAAgBrV,GAAW5N,EAAM,IACjCqG,EAAKuH,GAAW5N,EAAM,IACtByD,EAAS,EACX,MAAO,GAAgB,IAAZ6K,EAAe,CAExBwU,EAAYlV,GAAW5N,EADvByD,GAAU,GAGV,IAAMyf,EAAuBtV,GAAW5N,EADxCyD,GAAU,GAGJ0f,EAAwBvV,GAAW5N,EADzCyD,GAAU,GAgBV,IAdAA,GAAU,EACVuf,EAAmB7b,KAAAgG,IAAA,EAAK,IAAK+V,EAAuBC,EAC/CC,EAAqBJ,KACxBA,EAAmBjc,OAAOM,iBAC1BR,EAAOf,KACL,qGAIJmd,EAAgBrV,GAAW5N,EAAMyD,GAEjC4C,EAAKuH,GAAW5N,EADhByD,GAAU,GAEVA,GAAU,EAE4C,OAA/C+J,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,KAC5Cof,GAAerV,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IACtDA,GAAU,EAMZ,IAHAof,GAAerV,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IACtDA,GAAU,EAE4C,OAA/C+J,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,KAC5CwD,GAASuG,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IAChDA,GAAU,EAGZwD,GAASuG,GAAQxN,EAAKiK,SAASxG,EAAQA,EAAS,IAChDA,GAAU,CACZ,CAGA,MAAO,CACLof,YAAAA,EACA5b,MAAAA,EACA6b,UAAAA,EACAE,iBAAAA,EACAD,sBAAAA,EACAE,cAAAA,EACA5c,GAAAA,EACAgd,QAVcrjB,EAAKiK,SAASxG,EAAQzD,EAAK2L,YAY7C,CQ3kC2B2X,CAAUtjB,GAC3B,GAAIyhB,GAAkB9C,KAAKiE,EAASC,aAAc,CAChD,IAAM3L,EAAM2F,EAAgB+F,EAASI,kBACjCJ,EAASI,iBAAoBJ,EAASE,UACtCxO,EACAsO,EAASG,sBAAyBH,EAASE,UAC3ChU,EACyB,aAA3B8T,EAASK,cACLlc,OAAOiW,kBACP4F,EAASK,cAAgBL,EAASE,UAEpChU,GAAY,OACdA,EAAW/H,OAAOiW,mBAEpB,IAAMqG,EAAUT,EAASS,QACzBzG,EAASnI,QAAQzJ,KAAK,CACpBhL,KAAMqjB,EACN7W,IAAK6W,EAAQ1X,WACboR,IAAK7F,EACLA,IAAKA,EACL3Q,KAAM4U,GACNrM,SAAUA,GAEd,CACF,GAEJ,CACA,OAAO8N,GACR7a,EAEDub,eAAA,SACEtd,EACAud,EACAjJ,GAEA,OAAO2F,QAAQE,OACb,IAAI9Z,MAAM,4DAEb0B,EAED0X,QAAA,aAAYiI,CAAA,CAvKE,GC7BH6B,GAAe,SAACvjB,EAAkByD,GAE7C,IAAI+f,EAAO,EACPC,EAAU,EACdhgB,GAAUggB,EAIV,IAHA,IAAMrP,EAAO,IAAI9S,YAAY,GACvBoiB,EAAO,IAAIpiB,YAAY,GACvB0Q,EAAO,IAAIjR,WAAW,GACrB0iB,EAAU,GAAG,CAClBzR,EAAK,GAAKhS,EAAKyD,GAEf,IAAMkgB,EAAOxc,KAAKyc,IAAIH,EAAS,GACzBlL,EAAQ,EAAIoL,EAClBD,EAAK,GAAM,aAAgB,GAAKnL,GAAWA,EAC3CnE,EAAK,IAAMpC,EAAK,GAAK0R,EAAK,KAAOnL,EACjCiL,EAAQA,EAAkBA,GAAQG,EAAQvP,EAAK,GAAhCA,EAAK,GACpB3Q,GAAU,EACVggB,GAAWE,CACb,CACA,OAAOH,CACT,ECdaK,YAAU3C,GAGrB,SAAA2C,EAAY5F,GAAU,IAAAjE,EAEK,OADzBA,EAAAkH,EAAAhgB,YAAOtB,MAHQqe,cAAQ,EAIvBjE,EAAKiE,SAAWA,EAASjE,CAC3B,CANqBmH,EAAA0C,EAAA3C,GAMpB,IAAAnf,EAAA8hB,EAAA/jB,UAoEA,OApEAiC,EAEDka,iBAAA,SACEhN,EACAiN,EACAC,EACAC,GAEA8E,EAAAphB,UAAMmc,iBAAgB/a,KAAC+N,KAAAA,EAAaiN,EAAYC,EAAYC,GAC5Dxc,KAAK8b,YAAc,CACjB0F,UAAW,aACX7a,KAAM,QACNF,GAAI,EACJiV,KAAM,EACNC,eAAgB,EAChB8F,aAAc,MACd5M,QAAS,GACT+J,cAAetC,EACfpN,SAAUsN,EACVf,eAAgB,IAChBG,QAAS,IAEZzZ,EAEDoI,SAAA,SAASnK,EAAkByD,GACzB,OAAOA,EAAS,GAAKzD,EAAKI,QAC3B2B,EAEDya,YAAA,SACEvM,EACAjQ,EACAyD,GAEA,IAAMqa,EAActB,GAClBvM,EACAjQ,EACAyD,EACA7D,KAAKkc,QACLlc,KAAKgc,YAEP,IAAqB,IAAjBkC,EAEF,MAAO,CAAEb,OADMhN,EAAMwE,QAAQxE,EAAMwE,QAAQrU,OAAS,GACnCA,OAAQ0d,EAAa6B,QAAS,IAElDkE,EAEMjG,MAAP,SAAa5d,GACX,IAAKA,EACH,OAAO,EAGT,IAAM6K,EAAUf,EAAW9J,EAAM,GACjC,IAAK6K,EACH,OAAO,EAIT,IAAMpH,EAASoH,EAAQzK,OACvB,OACmB,KAAjBJ,EAAKyD,IACgB,MAArBzD,EAAKyD,EAAS,SACYyR,IAA1B9K,EAAaS,IAEb0Y,GAAavjB,EAAMyD,GAAU,IAKhCogB,CAAA,EA1E6BpI,IA6EzB,SAASe,GACdvM,EACAjQ,EACAa,EACAqW,EACA0E,GAEA,GAAI/a,EAAQ,EAAIb,EAAKI,OACnB,OAAQ,EAGV,GAAoB,KAAhBJ,EAAKa,IAAuC,MAApBb,EAAKa,EAAQ,GACvC,OAAQ,EAIV,IAAMijB,EAAmB9jB,EAAKa,EAAQ,IAAM,EAC5C,GAAIijB,GAAoB,EACtB,OAAQ,EAGV,IACM1D,EADkB,CAAC,KAAO,MAAO,MACJ0D,GAG7BC,EAAkC,GAAlB/jB,EAAKa,EAAQ,GAY7Bid,EAAmE,EAXpD,CACnB,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IACpE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,IACxE,KAAM,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACtE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAGD,EAAhBiG,EAAoBD,GACrD,GAAIjjB,EAAQid,EAAc9d,EAAKI,OAC7B,OAAQ,EAIV,IAAMsgB,EAAc1gB,EAAKa,EAAQ,IAAM,EACnCmjB,EAAY,EACI,IAAhBtD,EACFsD,GAAa,GAEK,EAAdtD,GAAmC,IAAhBA,IACrBsD,GAAa,GAEG,EAAdtD,IACFsD,GAAa,IAIjB,IAAMC,GACDjkB,EAAKa,EAAQ,IAAM,EAAKb,EAAKa,EAAQ,KAAQ,GAAKmjB,EAAc,EAG/DpF,EADc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACT8B,GAAeuD,EAG1CT,EAAOxjB,EAAKa,EAAQ,IAAM,EAC1BqjB,EAA0B,EAAlBlkB,EAAKa,EAAQ,GAErB4X,EAAS,IAAI1X,WAAW,CAC3B+iB,GAAoB,EAAMN,GAAQ,EAAMU,GAAS,GACxC,EAARA,IAAc,EACbxD,GAAe,EACfuD,GAAS,EACTF,GAAiB,EACnBA,GAAiB,EAAK,MAInBvE,EAAQtI,EAAM0E,GADG,KAAOwE,EAAc,KAEtCb,EAAOvf,EAAKiK,SAASpJ,EAAOA,EAAQid,GAO1C,OALA7N,EAAMwI,OAASA,EACfxI,EAAM2O,aAAeA,EACrB3O,EAAMiO,WAAakC,EACnBnQ,EAAMwE,QAAQzJ,KAAK,CAAEuU,KAAAA,EAAMrI,IAAKsI,IAEzB1B,CACT,CC/JyD,IAE1CqG,GAAe,WAAA,SAAAA,IAAAvkB,KAClBwkB,YAAwC,IAAI,CAAA,IAAAriB,EAAAoiB,EAAArkB,UA8LrD,OA9LqDiC,EAE5CsiB,kBAAV,SACEpkB,EACAiX,EACA6F,EACAnX,GAEA,MAAO,CACL3F,IAAAA,EACAsK,OAAO,EACP2M,IAAAA,EACA6F,IAAAA,EACAuH,MAAO,GACP1e,MAAAA,EACAxF,OAAQ,IAEX2B,EAESwiB,eAAV,SACE9P,GAC6B,IAAA+P,EAEzBC,EADAL,EAAcxkB,KAAKwkB,YAMvB,GAHKA,GAA4C,IAA7BA,EAAYE,MAAMlkB,SACpCgkB,EAAc3P,EAAQA,EAAQrU,OAAS,WAEzCokB,EAAIJ,IAAAI,EAAaF,MAAO,CACtB,IAAMA,EAAQF,EAAYE,MAC1BG,EAAWH,EAAMA,EAAMlkB,OAAS,EAClC,CACA,OAAOqkB,GACR1iB,EAES2iB,eAAV,SACEN,EACAhH,GAEA,GAAIgH,EAAYE,MAAMlkB,QAAUgkB,EAAY7Z,MAAO,CAEjD,QAAwB2K,IAApBkP,EAAYlN,IAAmB,CACjC,IAAMzC,EAAU2I,EAAW3I,QACrBkQ,EAAYlQ,EAAQrU,OAC1B,IAAIukB,EAOF,YADAvH,EAAW5B,UALX,IAAMoJ,EAAanQ,EAAQkQ,EAAY,GACvCP,EAAYlN,IAAM0N,EAAW1N,IAC7BkN,EAAYrH,IAAM6H,EAAW7H,GAMjC,CACAK,EAAW3I,QAAQzJ,KAAKoZ,EAC1B,CACIA,EAAYxe,MAAMxF,QACpByG,EAAOhB,IACLue,EAAYlN,IAAM,IAAMkN,EAAYrH,IAAM,IAAMqH,EAAYxe,QAGjE7D,EAYS8iB,UAAV,SACE5U,EACArP,GAMA,IAKIqG,EACA6d,EANEtY,EAAM5L,EAAM+K,WACdoZ,EAAQ9U,EAAM+U,WAAa,EACzBC,EAAYF,EACZT,EAA2B,GAC7BjiB,EAAI,EAIJ6iB,GAAiB,EACjBC,EAAuB,EAY3B,KATe,IAAXJ,IAEFG,EAAgB,EAEhBC,EAAevlB,KAAKwlB,YAAYxkB,EAAO,GACvCmkB,EAAQ,EACR1iB,EAAI,GAGCA,EAAImK,GAGT,GAFAvF,EAAQrG,EAAMyB,KAET0iB,EAIL,GAAc,IAAVA,EAKJ,GAAK9d,EAEE,GAAc,IAAVA,EAAa,CAEtB,GADA6d,EAAWziB,EAAI0iB,EAAQ,EACnBG,GAAiB,EAAG,CACtB,IAAM3F,EAAwB,CAC5Bvf,KAAMY,EAAMqJ,SAASib,EAAeJ,GACpCve,KAAM4e,GAGRb,EAAMtZ,KAAKuU,EACb,KAAO,CAKL,IAAMkF,EAAW7kB,KAAK2kB,eAAetU,EAAMwE,SACvCgQ,IACEQ,GAAa5iB,GAAK,EAAI4iB,GAIpBR,EAASM,QAEXN,EAASzkB,KAAOykB,EAASzkB,KAAKiK,SAC5B,EACAwa,EAASzkB,KAAK2L,WAAasZ,IAM7BH,EAAW,IAEbL,EAASzkB,KAAOiU,GACdwQ,EAASzkB,KACTY,EAAMqJ,SAAS,EAAG6a,IAEpBL,EAASM,MAAQ,GAGvB,CAEI1iB,EAAImK,GAGN0Y,EAAgB7iB,EAChB8iB,EAHWvlB,KAAKwlB,YAAYxkB,EAAOyB,GAInC0iB,EAAQ,GAGRA,GAAS,CAEb,MACEA,EAAQ,OArDRA,EAAQ,OALRA,EAAQ9d,EAAQ,EAAI,OAJpB8d,EAAQ9d,EAAQ,EAAI,EAiExB,GAAIie,GAAiB,GAAKH,GAAS,EAAG,CACpC,IAAMxF,EAAwB,CAC5Bvf,KAAMY,EAAMqJ,SAASib,EAAe1Y,GACpCjG,KAAM4e,EACNJ,MAAOA,GAETT,EAAMtZ,KAAKuU,EAEb,CAEA,GAAqB,IAAjB+E,EAAMlkB,OAAc,CAEtB,IAAMqkB,EAAW7kB,KAAK2kB,eAAetU,EAAMwE,SACvCgQ,IACFA,EAASzkB,KAAOiU,GAAiBwQ,EAASzkB,KAAMY,GAEpD,CAEA,OADAqP,EAAM+U,UAAYD,EACXT,GACRH,CAAA,CA/L2B,GCLxBkB,GAAS,WAMb,SAAAA,EAAYrlB,GAAkBJ,KALtBI,UAAI,EAAAJ,KACL0lB,oBAAc,EAAA1lB,KACbmE,UAAI,EAAAnE,KACJ2lB,mBAAa,EAGnB3lB,KAAKI,KAAOA,EAEZJ,KAAK0lB,eAAiBtlB,EAAK2L,WAE3B/L,KAAKmE,KAAO,EAEZnE,KAAK2lB,cAAgB,CACvB,CAEA,IAAAxjB,EAAAsjB,EAAAvlB,UA+HC,OA/HDiC,EACAyjB,SAAA,WACE,IAAMxlB,EAAOJ,KAAKI,KACZslB,EAAiB1lB,KAAK0lB,eACtBG,EAAWzlB,EAAK2L,WAAa2Z,EAC7BI,EAAe,IAAI3kB,WAAW,GAC9B4kB,EAAiBxe,KAAKyc,IAAI,EAAG0B,GACnC,GAAuB,IAAnBK,EACF,MAAM,IAAItlB,MAAM,sBAGlBqlB,EAAa7R,IAAI7T,EAAKiK,SAASwb,EAAUA,EAAWE,IACpD/lB,KAAKmE,KAAO,IAAI5B,SAASujB,EAAalgB,QAAQlD,UAAU,GAExD1C,KAAK2lB,cAAiC,EAAjBI,EACrB/lB,KAAK0lB,gBAAkBK,CACzB,EAEA5jB,EACA6jB,SAAA,SAASC,GACP,IAAIC,EACJD,EAAQ1e,KAAKyc,IAAIiC,EAA6B,EAAtBjmB,KAAK0lB,eAAqB1lB,KAAK2lB,eACnD3lB,KAAK2lB,cAAgBM,GACvBjmB,KAAKmE,OAAS8hB,EACdjmB,KAAK2lB,eAAiBM,IAEtBA,GAASjmB,KAAK2lB,cAEdM,IADAC,EAAYD,GAAS,IACC,EACtBjmB,KAAK0lB,gBAAkBQ,EACvBlmB,KAAK4lB,WACL5lB,KAAKmE,OAAS8hB,EACdjmB,KAAK2lB,eAAiBM,EAE1B,EAEA9jB,EACAgkB,SAAA,SAAS7b,GACP,IAAIyZ,EAAOxc,KAAKyc,IAAIhkB,KAAK2lB,cAAerb,GAClC8b,EAAOpmB,KAAKmE,OAAU,GAAK4f,EAMjC,GALIzZ,EAAO,IACTrD,EAAOb,MAAM,2CAGfpG,KAAK2lB,eAAiB5B,EAClB/jB,KAAK2lB,cAAgB,EACvB3lB,KAAKmE,OAAS4f,MACT,MAAI/jB,KAAK0lB,eAAiB,GAG/B,MAAM,IAAIjlB,MAAM,qBAFhBT,KAAK4lB,UAGP,CAGA,OADA7B,EAAOzZ,EAAOyZ,GACH,GAAK/jB,KAAK2lB,cACXS,GAAQrC,EAAQ/jB,KAAKmmB,SAASpC,GAE/BqC,CAEX,EAEAjkB,EACAkkB,OAAA,WACE,IAAIC,EACJ,IACEA,EAAmB,EACnBA,EAAmBtmB,KAAK2lB,gBACtBW,EAEF,GAAwD,IAAnDtmB,KAAKmE,KAAQ,aAAemiB,GAI/B,OAFAtmB,KAAKmE,OAASmiB,EACdtmB,KAAK2lB,eAAiBW,EACfA,EAKX,OADAtmB,KAAK4lB,WACEU,EAAmBtmB,KAAKqmB,QACjC,EAEAlkB,EACAokB,QAAA,WACEvmB,KAAKgmB,SAAS,EAAIhmB,KAAKqmB,SACzB,EAEAlkB,EACAqkB,OAAA,WACExmB,KAAKgmB,SAAS,EAAIhmB,KAAKqmB,SACzB,EAEAlkB,EACAskB,QAAA,WACE,IAAMC,EAAM1mB,KAAKqmB,SACjB,OAAOrmB,KAAKmmB,SAASO,EAAM,GAAK,CAClC,EAEAvkB,EACAwkB,OAAA,WACE,IAAMP,EAAOpmB,KAAKymB,UAClB,OAAI,EAAOL,EAED,EAAIA,IAAU,GAEd,GAAKA,IAAS,EAE1B,EAGAjkB,EACAykB,YAAA,WACE,OAA4B,IAArB5mB,KAAKmmB,SAAS,EACvB,EAEAhkB,EACA0kB,UAAA,WACE,OAAO7mB,KAAKmmB,SAAS,EACvB,EAEAhkB,EACA2kB,WAAA,WACE,OAAO9mB,KAAKmmB,SAAS,GACvB,EAEAhkB,EACA4kB,SAAA,WACE,OAAO/mB,KAAKmmB,SAAS,KACtBV,CAAA,CA/IY,GCKTuB,YAAcC,GAAA,SAAAD,IAAA,OAAAC,EAAApZ,MAAA7N,KAAAknB,YAAAlnB,IAAA,CAAAuhB,EAAAyF,EAAAC,GAAA,IAAA9kB,EAAA6kB,EAAA9mB,UA8ZjB,OA9ZiBiC,EACXglB,SAAP,SACE9W,EACAoN,EACA2J,EACAxE,EACA1T,GACA,IAII9D,EAJJgP,EAAApa,KACM0kB,EAAQ1kB,KAAKilB,UAAU5U,EAAO+W,EAAIhnB,MAEpCokB,EAAcxkB,KAAKwkB,YAEnB6C,GAAW,EAEdD,EAAYhnB,KAAO,KAIhBokB,GAAeE,EAAMlkB,SAAW6P,EAAMiX,WACxCtnB,KAAK8kB,eAAeN,EAAanU,GACjCmU,EAAcxkB,KAAKwkB,YAAcxkB,KAAKykB,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAIJuH,EAAMvU,SAAQ,SAACwP,GAAS,IAAA4H,EACtB,OAAQ5H,EAAKhZ,MAEX,KAAK,EACH,IAAI6gB,GAAQ,EACZpc,GAAO,EACP,IAoBWwZ,EApBLxkB,EAAOuf,EAAKvf,KAElB,GAAIinB,GAAYjnB,EAAKI,OAAS,EAAG,CAE/B,IAAMinB,EAAYrN,EAAKsN,cAActnB,GAOrB,IAAdqnB,GACc,IAAdA,GACc,IAAdA,GACc,IAAdA,IAEAD,GAAQ,EAEZ,CAEA,GAAIA,EAEE5C,OAAAA,EAAAJ,IAAAI,EAAaja,QAAU6Z,EAAYnkB,MACrC+Z,EAAK0K,eAAeN,EAAanU,GACjCmU,EAAcpK,EAAKoK,YAAc,MAIhCA,IACHA,EAAcpK,EAAKoK,YAAcpK,EAAKqK,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAQJqH,EAAY7Z,OAAQ,EACpB6Z,EAAYnkB,IAAMmnB,EAElB,MAGF,KAAK,EACHpc,GAAO,EAGHmc,OAAAA,EAAA/C,IAAA+C,EAAa5c,QAAU6Z,EAAYnkB,MACrC+Z,EAAK0K,eAAeN,EAAanU,GACjCmU,EAAcpK,EAAKoK,YAAc,MAE9BA,IACHA,EAAcpK,EAAKoK,YAAcpK,EAAKqK,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAQJqH,EAAYnkB,KAAM,EAClBmkB,EAAY7Z,OAAQ,EACpB,MAEF,KAAK,EACHS,GAAO,EAIP6L,GACE0I,EAAKvf,KACL,EACAgnB,EAAI9P,IACJmG,EAAU5I,SAEZ,MAGF,KAAK,EAAG,IAAA8S,EAAAC,EACNxc,GAAO,EACPic,GAAW,EAIX,IAAMQ,EAAMlI,EAAKvf,KACXyY,EAASuB,EAAK0N,QAAQD,GAC5B,IACGxX,EAAMwX,KACPxX,EAAM0X,QAAUlP,EAAOkP,OACvB1X,EAAM2X,SAAWnP,EAAOmP,SACxBL,OAAAA,EAAAtX,EAAM4X,iBAANN,EAAAA,EAAmB,MAAO9O,EAAOoP,WAAW,KAC5CL,OAAAA,EAAAvX,EAAM4X,iBAANL,EAAAA,EAAmB,MAAO/O,EAAOoP,WAAW,GAC5C,CACA5X,EAAM0X,MAAQlP,EAAOkP,MACrB1X,EAAM2X,OAASnP,EAAOmP,OACtB3X,EAAM4X,WAAapP,EAAOoP,WAC1B5X,EAAMwX,IAAM,CAACA,GACbxX,EAAMnB,SAAWA,EAGjB,IAFA,IAAMgZ,EAAaL,EAAIxd,SAAS,EAAG,GAC/B8d,EAAc,QACT1lB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI2K,EAAI8a,EAAWzlB,GAAG4K,SAAS,IAC3BD,EAAE5M,OAAS,IACb4M,EAAI,IAAMA,GAGZ+a,GAAe/a,CACjB,CACAiD,EAAMO,MAAQuX,CAChB,CACA,MAGF,KAAK,EACH/c,GAAO,EAKPiF,EAAM+X,IAAM,CAACzI,EAAKvf,MAElB,MAEF,KAAK,EACHgL,GAAO,EACPiF,EAAMiX,UAAW,EACb9C,GACFpK,EAAK0K,eAAeN,EAAanU,GAGnCmU,EAAcpK,EAAKoK,YAAcpK,EAAKqK,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACa,IAEnB,MAEF,KAAK,GACH/R,GAAO,EACP,MACF,QACEA,GAAO,EACHoZ,IACFA,EAAYxe,OAAS,eAAiB2Z,EAAKhZ,KAAO,KAKpD6d,GAAepZ,GACHoZ,EAAYE,MACpBtZ,KAAKuU,EAEf,IAEIiD,GAAQ4B,IACVxkB,KAAK8kB,eAAeN,EAAanU,GACjCrQ,KAAKwkB,YAAc,OAEtBriB,EAESqjB,YAAV,SAAsBplB,EAAkByD,GACtC,OAAsB,GAAfzD,EAAKyD,IACb1B,EAEDulB,cAAA,SAActnB,GACZ,IAAMioB,EAAK,IAAI5C,GAAUrlB,GAMzB,OAJAioB,EAAGxB,YAEHwB,EAAG5B,UAEI4B,EAAG5B,SACZ,EAEAtkB,EAMAmmB,gBAAA,SAAgBrC,EAAesC,GAI7B,IAHA,IAAIC,EAAY,EACZC,EAAY,EAEPC,EAAI,EAAGA,EAAIzC,EAAOyC,IACP,IAAdD,IAEFA,GAAaD,EADAD,EAAO5B,SACkB,KAAO,KAE/C6B,EAA0B,IAAdC,EAAkBD,EAAYC,CAE9C,EAEAtmB,EAQA2lB,QAAA,SAAQD,GAKN,IAKIc,EACAC,EACAnmB,EAPE4lB,EAAK,IAAI5C,GAAUoC,GACrBgB,EAAsB,EACtBC,EAAuB,EACvBC,EAAqB,EACrBC,EAAwB,EAItBnC,EAAYwB,EAAGxB,UAAUngB,KAAK2hB,GAC9BlC,EAAWkC,EAAGlC,SAASzf,KAAK2hB,GAC5B5B,EAAU4B,EAAG5B,QAAQ/f,KAAK2hB,GAC1BzB,EAAcyB,EAAGzB,YAAYlgB,KAAK2hB,GAClCrC,EAAWqC,EAAGrC,SAAStf,KAAK2hB,GAC5B7B,EAAS6B,EAAG7B,OAAO9f,KAAK2hB,GACxB9B,EAAU8B,EAAG9B,QAAQ7f,KAAK2hB,GAC1BC,EAAkBtoB,KAAKsoB,gBAAgB5hB,KAAK1G,MAElD6mB,IACA,IAAMoC,EAAapC,IAMnB,GALAV,EAAS,GACTH,EAAS,GACTa,IACAN,IAGiB,MAAf0C,GACe,MAAfA,GACe,MAAfA,GACe,MAAfA,GACe,KAAfA,GACe,KAAfA,GACe,KAAfA,GACe,MAAfA,GACe,MAAfA,EACA,CACA,IAAMC,EAAkBzC,IAQxB,GAPwB,IAApByC,GACFlD,EAAS,GAGXO,IACAA,IACAP,EAAS,GACLY,IAGF,IADAgC,EAAuC,IAApBM,EAAwB,EAAI,GAC1CzmB,EAAI,EAAGA,EAAImmB,EAAkBnmB,IAC5BmkB,KAGA0B,EADE7lB,EAAI,EACU,GAEA,GAFI4lB,EAO9B,CACA9B,IACA,IAAM4C,EAAkB1C,IACxB,GAAwB,IAApB0C,EACF1C,SACK,GAAwB,IAApB0C,EAKT,IAJAnD,EAAS,GACTQ,IACAA,IACAmC,EAAiClC,IAC5BhkB,EAAI,EAAGA,EAAIkmB,EAAgClmB,IAC9C+jB,IAGJD,IACAP,EAAS,GACT,IAAMoD,EAAsB3C,IACtB4C,EAA4B5C,IAC5B6C,EAAmBnD,EAAS,GACT,IAArBmD,GACFtD,EAAS,GAGXA,EAAS,GACLY,MAEFiC,EAAsBpC,IACtBqC,EAAuBrC,IACvBsC,EAAqBtC,IACrBuC,EAAwBvC,KAE1B,IAAIwB,EAA+B,CAAC,EAAG,GACvC,GAAIrB,KAEEA,IAGF,OADuBC,KAErB,KAAK,EACHoB,EAAa,CAAC,EAAG,GACjB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,EACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,GACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,GACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,GACHA,EAAa,CAAC,GAAI,IAClB,MACF,KAAK,GACHA,EAAa,CAAC,IAAK,IACnB,MACF,KAAK,GACHA,EAAa,CAAC,EAAG,GACjB,MACF,KAAK,GACHA,EAAa,CAAC,EAAG,GACjB,MACF,KAAK,GACHA,EAAa,CAAC,EAAG,GACjB,MACF,KAAK,IACHA,EAAa,CACVpB,KAAe,EAAKA,IACpBA,KAAe,EAAKA,KAO/B,MAAO,CACLkB,MAAOxgB,KAAKgiB,KACkB,IAA3BH,EAAsB,GACC,EAAtBP,EACuB,EAAvBC,GAEJd,QACG,EAAIsB,IAAqBD,EAA4B,GAAK,IAC1DC,EAAmB,EAAI,IACrBP,EAAqBC,GAC1Bf,WAAYA,IAEfjB,CAAA,EA9Z0BzC,ICHvBiF,YAAevC,GAAA,SAAAuC,IAAA,IAAA,IAAApP,EAAAqP,EAAAvC,UAAA1mB,OAAAkpB,EAAAroB,IAAAA,MAAAooB,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAzC,UAAAyC,GACwB,OADxBvP,EAAA6M,EAAA3lB,KAAAuM,MAAAoZ,EAAA,CAAAjnB,MAAA4pB,OAAAF,KAAA1pB,MACT6pB,QAA6B,KAAIzP,CAAA,CADxBmH,EAAAiI,EAAAvC,GACwB,IAAA9kB,EAAAqnB,EAAAtpB,UA6tB1C,OA7tB0CiC,EAEpCglB,SAAP,SACE9W,EACAoN,EACA2J,EACAxE,EACA1T,GACA,IAII9D,EAJJ0P,EAAA9a,KACM0kB,EAAQ1kB,KAAKilB,UAAU5U,EAAO+W,EAAIhnB,MAEpCokB,EAAcxkB,KAAKwkB,YAEnB6C,GAAW,EAEdD,EAAYhnB,KAAO,KAIhBokB,GAAeE,EAAMlkB,SAAW6P,EAAMiX,WACxCtnB,KAAK8kB,eAAeN,EAAanU,GACjCmU,EAAcxkB,KAAKwkB,YAAcxkB,KAAKykB,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAIJuH,EAAMvU,SAAQ,SAACwP,GAAS,IAAA4H,EACtB,OAAQ5H,EAAKhZ,MAEX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACE6d,IACHA,EAAc1J,EAAK0J,YAAc1J,EAAK2J,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAMJqH,EAAY7Z,OAAQ,EACpBS,GAAO,EACP,MAGF,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEW,IAAAwZ,EAAd,GADAxZ,GAAO,EACHic,EAGEzC,OAAAA,EAAAJ,IAAAI,EAAaja,QAAU6Z,EAAYnkB,MACrCya,EAAKgK,eAAeN,EAAanU,GACjCmU,EAAc1J,EAAK0J,YAAc,MAGhCA,IACHA,EAAc1J,EAAK0J,YAAc1J,EAAK2J,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAQJqH,EAAYnkB,KAAM,EAClBmkB,EAAY7Z,OAAQ,EACpB,MAGF,KAAK,GACL,KAAK,GACHS,GAAO,EAGHmc,OAAAA,EAAA/C,IAAA+C,EAAa5c,QAAU6Z,EAAYnkB,MACrCya,EAAKgK,eAAeN,EAAanU,GACjCmU,EAAc1J,EAAK0J,YAAc,MAE9BA,IACHA,EAAc1J,EAAK0J,YAAc1J,EAAK2J,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAOJqH,EAAYnkB,KAAM,EAClBmkB,EAAY7Z,OAAQ,EACpB,MAGF,KAAK,GACHS,GAAO,EAIP6L,GACE0I,EAAKvf,KACL,EACAgnB,EAAI9P,IACJmG,EAAU5I,SAEZ,MAGF,KAAK,GAKH,GAJAzJ,GAAO,GAIFiF,EAAMyZ,IAAK,CACd,IAAMjR,EAASiC,EAAKiP,QAAQpK,EAAKvf,MACjCiQ,EAAMpH,OAAMiH,EAAA,CAAA,EAAQ2I,GACpBiC,EAAK+O,QAAUlK,EAAKvf,IACtB,CACAiQ,EAAMyZ,IAAM,CAACnK,EAAKvf,MAClB,MAGF,KAAK,GAMH,GALAgL,GAAO,EACPic,GAAW,EAIiB,iBAAjBhX,EAAMpH,OAAqB,CAUpC,QARgBqM,IAAdjF,EAAMyZ,KACNzZ,EAAMyZ,IAAI,KAAOhP,EAAK+O,cACRvU,IAAdjF,EAAMwX,KACL/M,EAAKkP,SAAS3Z,EAAMwX,IAAI,GAAIlI,EAAKvf,QAElC0a,EAAK+O,QAAUxZ,EAAMyZ,IAAI,GACzBzZ,EAAMwX,IAAMxX,EAAM+X,SAAM9S,IAErBjF,EAAMwX,IAAK,CACd,IAAMhP,EAASiC,EAAKgN,QAAQnI,EAAKvf,MAOjC,IAAK,IAAM6pB,KANX5Z,EAAM0X,MAAQlP,EAAOkP,MACrB1X,EAAM2X,OAASnP,EAAOmP,OACtB3X,EAAM4X,WAAapP,EAAOoP,WAC1B5X,EAAMnB,SAAWA,EACjBmB,EAAMO,MAAQiI,EAAOqR,YACrB7Z,EAAMwX,IAAM,GACOhP,EAAO5P,OACxBoH,EAAMpH,OAAOghB,GAAQpR,EAAO5P,OAAOghB,EAEvC,MACkB3U,IAAdjF,EAAMyZ,KAAqBzZ,EAAMyZ,IAAI,KAAOhP,EAAK+O,SACnDxZ,EAAMwX,IAAIzc,KAAKuU,EAAKvf,KAExB,CACKokB,IACHA,EAAc1J,EAAK0J,YAAc1J,EAAK2J,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACJ,KAGJqH,EAAYnkB,KAAM,EAClB,MAGF,KAAK,GAKH,GAJA+K,GAAO,EAIqB,iBAAjBiF,EAAMpH,OAAqB,CACpC,IAAKoH,EAAM+X,IAAK,CACd/X,EAAM+X,IAAM,GACZ,IAAMvP,EAASiC,EAAKqP,QAAQxK,EAAKvf,MACjC,IAAK,IAAM6pB,KAAQpR,EACjBxI,EAAMpH,OAAOghB,GAAQpR,EAAOoR,EAEhC,CACqB,OAAjBnP,EAAK+O,SAAyC,IAArBxZ,EAAM+X,IAAI5nB,QACrC6P,EAAM+X,IAAIhd,KAAKuU,EAAKvf,KAExB,CACA,MAGF,KAAK,GACHgL,GAAO,EACPiF,EAAMiX,UAAW,EACb9C,GACF1J,EAAKgK,eAAeN,EAAanU,GAEnCmU,EAAc1J,EAAK0J,YAAc1J,EAAK2J,mBACpC,EACA2C,EAAI9P,IACJ8P,EAAIjK,IACa,IAEnB,MAEF,QACE/R,GAAO,EACHoZ,IACFA,EAAYxe,OAAS,6BAA+B2Z,EAAKhZ,KAAO,KAIlE6d,GAAepZ,GACHoZ,EAAYE,MACpBtZ,KAAKuU,EAEf,IAEIiD,GAAQ4B,IACVxkB,KAAK8kB,eAAeN,EAAanU,GACjCrQ,KAAKwkB,YAAc,OAEtBriB,EAESqjB,YAAV,SAAsBplB,EAAkByD,GACtC,OAAuB,IAAfzD,EAAKyD,MAAoB,GAClC1B,EAESioB,UAAV,SAAoBC,GAGlB,IAFA,IAAMC,EAAM,IAAInpB,WAAWkpB,EAAIte,YAC3Bwe,EAAS,EACJ9nB,EAAI,EAAGA,EAAI4nB,EAAIte,WAAYtJ,IAC9BA,GAAK,GAEQ,IAAX4nB,EAAI5nB,IAA8B,IAAf4nB,EAAI5nB,EAAI,IAA8B,IAAf4nB,EAAI5nB,EAAI,KAIxD6nB,EAAIC,GAAUF,EAAI5nB,GAClB8nB,KAEF,OAAO,IAAIppB,WAAWmpB,EAAI1kB,OAAQ,EAAG2kB,IACtCpoB,EAED4nB,QAAA,SAAQD,GAIN,IAAMzB,EAAK,IAAI5C,GAAUqE,GAYzB,OAVAzB,EAAGxB,YACHwB,EAAGxB,YAEHwB,EAAGlC,SAAS,GACZkC,EAAGrC,SAAS,GACZqC,EAAGlC,SAAS,GAKL,CACLqE,kBAL4BnC,EAAGlC,SAAS,GAKG,EAC3CsE,iBAL+BpC,EAAGzB,gBAOrCzkB,EAED2lB,QAAA,SAAQD,GAON,IAAMQ,EAAK,IAAI5C,GAAUzlB,KAAKoqB,UAAUvC,IACxCQ,EAAGxB,YACHwB,EAAGxB,YAEHwB,EAAGlC,SAAS,GACZ,IAAMuE,EAAwBrC,EAAGlC,SAAS,GAC1CkC,EAAGzB,cAmBH,IAhBA,IAAM+D,EAAwBtC,EAAGlC,SAAS,GACpCyE,EAAoBvC,EAAGzB,cACvBiE,EAAsBxC,EAAGlC,SAAS,GAClC2E,EAAwCzC,EAAGxB,YAC3CkE,EAAwC1C,EAAGxB,YAC3CmE,EAAwC3C,EAAGxB,YAC3CoE,EAAwC5C,EAAGxB,YAC3CqE,EAAuC7C,EAAGxB,YAC1CsE,EAAuC9C,EAAGxB,YAC1CuE,EAAuC/C,EAAGxB,YAC1CwE,EAAuChD,EAAGxB,YAC1CyE,EAAuCjD,EAAGxB,YAC1C0E,EAAuClD,EAAGxB,YAC1C2E,EAAoBnD,EAAGxB,YACvB4E,EAA6C,GAC7CC,EAA2C,GACxCjpB,EAAI,EAAGA,EAAIioB,EAAuBjoB,IACzCgpB,EAAgCrgB,KAAKid,EAAGzB,eACxC8E,EAA8BtgB,KAAKid,EAAGzB,eAExC,GAAI8D,EAAwB,EAC1B,IAAK,IAAIjoB,EAAIioB,EAAuBjoB,EAAI,EAAGA,IACzC4lB,EAAGlC,SAAS,GAGhB,IAAK,IAAI1jB,EAAI,EAAGA,EAAIioB,EAAuBjoB,IACrCgpB,EAAgChpB,KAClC4lB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,aAED6E,EAA8BjpB,IAChC4lB,EAAGxB,YAIPwB,EAAG5B,UACH,IAAMkF,EAAoBtD,EAAG5B,UACJ,GAArBkF,GACFtD,EAAGrC,SAAS,GAEd,IAAM4F,EAA4BvD,EAAG5B,UAC/BoF,EAA6BxD,EAAG5B,UAChCqF,EAA0BzD,EAAGzB,cAC/BmF,EAAkB,EACpBC,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EAClBJ,IACFC,GAAmB1D,EAAG5B,UACtBuF,GAAoB3D,EAAG5B,UACvBwF,GAAkB5D,EAAG5B,UACrByF,GAAqB7D,EAAG5B,WAM1B,IAJA,IAAM0F,EAAwB9D,EAAG5B,UAC3B2F,EAA0B/D,EAAG5B,UAC7B4F,EAAoChE,EAAG5B,UAGvChkB,EAFuC4lB,EAAGzB,cAEC,EAAI8D,EACnDjoB,GAAKioB,EACLjoB,IAEA4lB,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAG9B,UASL,IAPA8B,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAG9B,UAC+B8B,EAAGzB,gBAEQyB,EAAGzB,cAE5C,IAAK,IAAI0F,EAAS,EAAGA,EAAS,EAAGA,IAC/B,IACE,IAAIC,EAAW,EACfA,GAAuB,IAAXD,EAAe,EAAI,GAC/BC,IACA,CAEA,GADoClE,EAAGzB,cAGhC,CACL,IAAM4F,EAAUjlB,KAAKyc,IAAI,GAAI,GAAM,GAAKsI,GAAU,IAC9CA,EAAS,GACXjE,EAAG1B,SAEL,IAAK,IAAIlkB,EAAI,EAAGA,EAAI+pB,EAAS/pB,IAC3B4lB,EAAG1B,QAEP,MATE0B,EAAG5B,SAUP,CAKN4B,EAAGzB,cACHyB,EAAGzB,cACsByB,EAAGzB,gBAE1ByB,EAAGxB,YACHwB,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAGzB,eAIL,IAFA,IAAM6F,EAA8BpE,EAAG5B,UACnCiG,EAAiB,EACZjqB,EAAI,EAAGA,EAAIgqB,EAA6BhqB,IAAK,CACpD,IAAIkqB,GAAoC,EAIxC,GAHU,IAANlqB,IACFkqB,EAAoCtE,EAAGzB,eAErC+F,EAAmC,CACjClqB,IAAMgqB,GACRpE,EAAG5B,UAEL4B,EAAGzB,cACHyB,EAAG5B,UAEH,IADA,IAAImG,EAAsB,EACjBlE,EAAI,EAAGA,GAAKgE,EAAgBhE,IAAK,CACxC,IAAMmE,EAAwBxE,EAAGzB,cAC7BkG,GAAiB,EAChBD,IACHC,EAAiBzE,EAAGzB,gBAElBiG,GAAyBC,IAC3BF,GAEJ,CACAF,EAAiBE,CACnB,KAAO,CACL,IAAMG,EAAoB1E,EAAG5B,UACvBuG,EAAoB3E,EAAG5B,UAC7BiG,EAAiBK,EAAoBC,EACrC,IAAK,IAAItE,EAAI,EAAGA,EAAIqE,EAAmBrE,IACrCL,EAAG5B,UACH4B,EAAGzB,cAEL,IAAK,IAAI8B,EAAI,EAAGA,EAAIsE,EAAmBtE,IACrCL,EAAG5B,UACH4B,EAAGzB,aAEP,CACF,CAGA,GADwCyB,EAAGzB,cAGzC,IADA,IAAMqG,EAA6B5E,EAAG5B,UAC7BhkB,EAAI,EAAGA,EAAIwqB,EAA4BxqB,IAAK,CACnD,IAAK,IAAIimB,EAAI,EAAGA,EAAI2D,EAAoC,EAAG3D,IACzDL,EAAGlC,SAAS,GAEdkC,EAAGlC,SAAS,EACd,CAGF,IAAI+G,EAA+B,EAC/BC,GAAY,EACdC,GAAa,EACXC,IAAY,EACdC,GAAU,EACVC,GAAU,EACZlF,EAAGzB,cACHyB,EAAGzB,cACH,IAAI4G,IAA8B,EAElC,GADoCnF,EAAGzB,cACN,CAE/B,GADuCyB,EAAGzB,cACN,CAClC,IAAM6G,GAAmBpF,EAAGxB,YAOxB4G,GAAmB,GAAKA,GAAmB,IAC7CN,GAPsB,CACtB,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,EAAG,GAM9BM,GAAmB,GAC/CL,GALuB,CACvB,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAI3BK,GAAmB,IACnB,MAArBA,KACTN,GAAY9E,EAAGlC,SAAS,IACxBiH,GAAa/E,EAAGlC,SAAS,IAE7B,CAMA,GALmCkC,EAAGzB,eAEpCyB,EAAGzB,cAEkCyB,EAAGzB,cAExCyB,EAAGlC,SAAS,GACZkC,EAAGzB,cACqCyB,EAAGzB,gBAEzCyB,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAGxB,aAmBP,GAhBqCwB,EAAGzB,gBAEtCyB,EAAG5B,UACH4B,EAAG5B,WAEL4B,EAAGzB,cACHyB,EAAGzB,cACHyB,EAAGzB,eACH4G,GAA8BnF,EAAGzB,iBAE/BmF,GAAmB1D,EAAG5B,UACtBuF,GAAoB3D,EAAG5B,UACvBwF,GAAkB5D,EAAG5B,UACrByF,GAAqB7D,EAAG5B,WAEW4B,EAAGzB,cAStC,GAPA0G,GAAUjF,EAAGlC,SAAS,IACtBoH,GAAUlF,EAAGlC,SAAS,IACsBkC,EAAGzB,eAE7CyB,EAAG5B,UAEmC4B,EAAGzB,cACN,CAGnC,IAAM8G,GAAkCrF,EAAGzB,cACrC+G,GAAkCtF,EAAGzB,cACvCgH,IAAkC,GAEpCF,IACAC,OAEAC,GAAkCvF,EAAGzB,iBAEnCyB,EAAGxB,YACHwB,EAAGlC,SAAS,GACZkC,EAAGzB,cACHyB,EAAGlC,SAAS,IAEdkC,EAAGlC,SAAS,GACZkC,EAAGlC,SAAS,GACRyH,IACFvF,EAAGlC,SAAS,GAEdkC,EAAGlC,SAAS,GACZkC,EAAGlC,SAAS,GACZkC,EAAGlC,SAAS,IAGd,IAAK,IAAI1jB,GAAI,EAAGA,IAAKioB,EAAuBjoB,KAAK,CAE/C,IAEIorB,IAAqB,GAHzBR,GAAYhF,EAAGzB,gBAEAyB,EAAGzB,cAGhByB,EAAG1B,SAEHkH,GAAqBxF,EAAGzB,cAE1B,IAAMkH,GAAUD,GAAqB,EAAIxF,EAAG5B,UAAY,EACxD,GAAIiH,GACF,IAAK,IAAIhF,GAAI,EAAGA,GAAIoF,GAASpF,KAC3BL,EAAG5B,UACH4B,EAAG5B,UACCmH,KACFvF,EAAG5B,UACH4B,EAAG5B,WAEL4B,EAAGrC,SAAS,GAGhB,GAAI2H,GACF,IAAK,IAAIjF,GAAI,EAAGA,GAAIoF,GAASpF,KAC3BL,EAAG5B,UACH4B,EAAG5B,UACCmH,KACFvF,EAAG5B,UACH4B,EAAG5B,WAEL4B,EAAGrC,SAAS,EAGlB,CACF,CAEiCqC,EAAGzB,gBAEpCyB,EAAGzB,cACHyB,EAAGzB,cACHyB,EAAGzB,cACHsG,EAA+B7E,EAAG5B,UAEtC,CAEA,IAAIsB,GAAQ6D,EACV5D,GAAS6D,EACX,GAAIC,GAA2B0B,GAA6B,CAC1D,IAAIO,GAAiB,EACnBC,GAAiB,EACO,IAAtBrC,EAEFoC,GAAiBC,GAAiB,EACJ,GAArBrC,IAEToC,GAAiB,GAEnBhG,GACE6D,EACAmC,GAAiB/B,EACjB+B,GAAiBhC,EACnB/D,GACE6D,EACAmC,GAAiB9B,EACjB8B,GAAiB/B,CACrB,CAWA,IATA,IAAMgC,GAAuBtD,EACzB,CAAC,IAAK,IAAK,KAAKA,GAChB,GACEuD,GACHpD,GAAyC,GACzCC,GAAyC,GACzCC,GAAyC,EAC1CC,EACEkD,GAA4B,EACvB1rB,GAAI,EAAGA,GAAI,GAAIA,KACtB0rB,IACGA,IACID,IAA6BzrB,GAAK,IAAO,GAAKA,MACnD,EAEJ,IAAI2rB,GACFD,GAA0B9gB,SAAS,IASrC,OAP0B,IAAxBwd,GACuC,MAAvCuD,KAEAA,GAAqC,KAIhC,CACLlE,YAAW,QAAU+D,GAAuBpD,EAAmB,IAAIuD,GAAsCC,KAHlFzD,EAAoB,IAAM,KAG2EY,EAAsB,MAClJviB,OAAQ,CACN2hB,kBAAAA,EACAC,oBAAAA,EACAF,sBAAAA,EACA2D,oCAAqC,CACnCxD,EACAC,EACAC,EACAC,GAEFsD,mCAAoC,CAClCrD,EACAC,EACAC,EACAC,EACAC,EACAC,GAEFC,kBAAAA,EACAgD,UAAWrC,EAAwB,EACnCA,sBAAAA,EACAC,wBAAAA,EACAc,6BAAAA,EACAvB,kBAAmBA,EACnB8C,WAAY,CACVC,MAAOrB,GACPsB,IAAKpB,GAAUD,KAGnBvF,MAAAA,GACAC,OAAAA,GACAC,WAAY,CAACkF,GAAWC,MAE3BjrB,EAEDgoB,QAAA,SAAQ/B,GAGN,IAAMC,EAAK,IAAI5C,GAAUzlB,KAAKoqB,UAAUhC,IACxCC,EAAGxB,YACHwB,EAAGxB,YACHwB,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAGrC,SAAS,GACZqC,EAAGrC,SAAS,GACZqC,EAAGrC,SAAS,GACZqC,EAAG9B,UACH8B,EAAG9B,UACH8B,EAAG7B,SACH6B,EAAGrC,SAAS,GACqBqC,EAAGzB,eAElCyB,EAAG9B,UAEL8B,EAAG7B,SACH6B,EAAG7B,SACH6B,EAAGrC,SAAS,GACZ,IAAM4I,EAAqBvG,EAAGzB,cACxBiI,EAAmCxG,EAAGzB,cACxCkI,EAAkB,EAStB,OARID,GAAoCD,EACtCE,EAAkB,EACTD,EACTC,EAAkB,EACTF,IACTE,EAAkB,GAGb,CACLA,gBAAAA,IAEH3sB,EAED6nB,SAAA,SAAS+E,EAAkBC,GAEzB,OACEjkB,OAAOC,aAAa6C,MAAM,KAAMkhB,GAAME,OAAO,KAC7ClkB,OAAOC,aAAa6C,MAAM,KAAMmhB,GAAMC,OAAO,IAEhDzF,CAAA,EA9tB2BjF,ICSxB2K,GAAkB,WAItB,SAAAA,EAAY7Q,EAA2BxF,EAAmB8E,GAAkB3d,KAHpE2d,aAAO,EAAA3d,KACPmvB,eAAS,EAGfnvB,KAAK2d,QAAUA,EACf3d,KAAKmvB,UAAY,IAAIvW,GAAUC,EAAQ,CACrCG,oBAAoB,GAExB,CAAC,IAAA7W,EAAA+sB,EAAAhvB,UAyKA,OAzKAiC,EAEDitB,cAAA,SAAcC,GACZ,OAAOrvB,KAAKmvB,UAAUhvB,QACpBkvB,EACArvB,KAAK2d,QAAQtd,IAAIuF,OACjB5F,KAAK2d,QAAQ7d,GAAG8F,OAChBjG,EAEJ,EAEAwC,EACQmtB,iBAAR,SACEza,EACA0a,EACAC,GACA,IAAApV,EAAApa,KACMyvB,EAAU5a,EAAQ0a,GAAa5P,KACrC,KAAI8P,EAAQjvB,QAAU,IAAtB,CAKA,IAAM6uB,EAAgBI,EAAQplB,SAC5B,GACAolB,EAAQjvB,OAAUivB,EAAQjvB,OAAS,IAE/BkvB,EAAkBL,EAAczpB,OAAOxE,MAC3CiuB,EAAcna,WACdma,EAAcna,WAAama,EAAc7uB,QAG3CR,KAAKovB,cAAcM,GAAiB3U,MAAK,SAAC4U,GACxC,IAAMC,EAAgB,IAAIzuB,WAAWwuB,GACrCF,EAAQxb,IAAI2b,EAAe,IAEtBxV,EAAK+U,UAAUrV,UAClBM,EAAKyV,kBAAkBhb,EAAS0a,EAAc,EAAGC,EAErD,GAjBA,GAkBDrtB,EAED0tB,kBAAA,SACEhb,EACA0a,EACAC,GAEA,MAASD,IAAe,CACtB,GAAIA,GAAe1a,EAAQrU,OAEzB,YADAgvB,IAIF,KAAI3a,EAAQ0a,GAAa5P,KAAKnf,OAAS,MAIvCR,KAAKsvB,iBAAiBza,EAAS0a,EAAaC,IAEvCxvB,KAAKmvB,UAAUrV,UAClB,MAEJ,CACF,EAEA3X,EACA2tB,oBAAA,SAAoBC,GAKlB,IAJA,IAAMC,EAC0C,GAA9CzoB,KAAK2Z,OAAO6O,EAAYvvB,OAAS,IAAM,KAAY,GAC/C6uB,EAAgB,IAAIY,UAAUD,GAChCE,EAAY,EAEVC,EAAW,GACfA,EAAWJ,EAAYvvB,OAAS,GAChC2vB,GAAY,IAAKD,GAAa,GAE9Bb,EAAcpb,IACZ8b,EAAY1lB,SAAS8lB,EAAUA,EAAW,IAC1CD,GAIJ,OAAOb,GACRltB,EAEDiuB,oBAAA,SACEL,EACAH,GAIA,IAFA,IAAMS,EAAqB,IAAIlvB,WAAWyuB,GACtCO,EAAW,EAETD,EAAY,GAChBA,EAAYH,EAAYvvB,OAAS,GACjC0vB,GAAa,IAAKC,GAAY,GAE9BJ,EAAY9b,IACVoc,EAAmBhmB,SAAS8lB,EAAUA,EAAW,IACjDD,GAIJ,OAAOH,GACR5tB,EAEDmuB,iBAAA,SACEzb,EACA0a,EACAgB,EACAf,EACAC,GACA,IAAA3U,EAAA9a,KACM+vB,EAAcxY,GAAWkY,EAAQrvB,MACjCivB,EAAgBrvB,KAAK8vB,oBAAoBC,GAE/C/vB,KAAKovB,cAAcC,EAAczpB,QAAQmV,MACvC,SAAC4U,GACCF,EAAQrvB,KAAO0a,EAAKsV,oBAAoBL,EAAaJ,GAEhD7U,EAAKqU,UAAUrV,UAClBgB,EAAK0V,kBAAkB3b,EAAS0a,EAAagB,EAAY,EAAGf,EAEhE,KAEHrtB,EAEDquB,kBAAA,SACE3b,EACA0a,EACAgB,EACAf,GAEA,GAAI3a,aAAmB1T,WACrB,MAAM,IAAIV,MAAM,6CAGlB,MAAS8uB,IAAegB,EAAY,EAAG,CACrC,GAAIhB,GAAe1a,EAAQrU,OAEzB,YADAgvB,IAKF,IADA,IAAMiB,EAAW5b,EAAQ0a,GAAa7K,QAEhC6L,GAAaE,EAASjwB,QADnB+vB,IAAa,CAKpB,IAAMd,EAAUgB,EAASF,GACzB,KACEd,EAAQrvB,KAAKI,QAAU,IACL,IAAjBivB,EAAQ9oB,MAA+B,IAAjB8oB,EAAQ9oB,OAKjC3G,KAAKswB,iBACHzb,EACA0a,EACAgB,EACAf,EACAC,GAGGzvB,KAAKmvB,UAAUrV,WAClB,MAEJ,CACF,GACDoV,CAAA,CAlLqB,GCoClBwB,GAAgB,IAEhBC,GAAS,WAoBb,SAAAA,EACEtS,EACAxF,EACA+X,GACA5wB,KAvBeqe,cAAQ,EAAAre,KACR6Y,YAAM,EAAA7Y,KACf4wB,mBAAa,EAAA5wB,KAEb6wB,UAAuC,KAAI7wB,KAC3C8wB,WAAqB,EAAK9wB,KAC1Bsc,gBAAU,EAAAtc,KACVuc,gBAAU,EAAAvc,KACV+wB,UAAoB,EAAC/wB,KACrBgxB,QAAkB,EAAChxB,KAEnBixB,iBAAW,EAAAjxB,KACX8b,iBAAW,EAAA9b,KACX+b,eAAS,EAAA/b,KACTkxB,eAAS,EAAAlxB,KACTmxB,YAAiC,KAAInxB,KACrCoZ,cAAmC,KAAIpZ,KACvCoxB,iBAAW,EAOjBpxB,KAAKqe,SAAWA,EAChBre,KAAK6Y,OAASA,EACd7Y,KAAK4wB,cAAgBA,EACrB5wB,KAAKoxB,YAAc,IACrB,CAACT,EAEM3S,MAAP,SAAa5d,GACX,IAAMixB,EAAaV,EAAUU,WAAWjxB,GAMxC,OALIixB,EAAa,GACfpqB,EAAOf,KACmDmrB,wDAAAA,IAGrC,IAAhBA,GACRV,EAEMU,WAAP,SAAkBjxB,GAIhB,IAHA,IAAMI,EAASJ,EAAKI,OAChB8wB,EAAa/pB,KAAKyc,IAAI0M,IAAmBlwB,EAASkwB,IAAiB,EACnEjuB,EAAI,EACDA,EAAI6uB,GAAY,CAKrB,IAHA,IAAIC,GAAW,EACXC,GAAe,EACfC,EAAY,EACP/I,EAAIjmB,EAAGimB,EAAIloB,EAAQkoB,GAAKgI,GAAe,CAC9C,GACc,KAAZtwB,EAAKsoB,IACJloB,EAASkoB,IAAMgI,IAA6C,KAA5BtwB,EAAKsoB,EAAIgI,IA0BrC,IAAIe,EAET,OAAQ,EAER,KACF,CAbE,GAhBAA,KACqB,IAAjBD,GAGkB,KAFpBA,EAAc9I,KAGZ4I,EACE/pB,KAAKyc,IACHwN,EAAcd,MACdtwB,EAAKI,OAASkwB,IACZ,GAGLa,IACHA,EAAiC,IAAtBG,GAAStxB,EAAMsoB,IAI1B6I,GACAE,EAAY,IACM,IAAhBD,GAAqBC,EAAY,GACjC/I,EAAIgI,GAAgBY,GAEtB,OAAOE,CAQb,CACA/uB,GACF,CACA,OAAQ,CACV,EAEAkuB,EAGOgB,YAAP,SACEhrB,EACAuI,GAEA,MAAO,CACLsS,UACW,UAAT7a,GAA6B,UAATA,EAAmB,kBAAe2O,EACxD3O,KAAAA,EACAF,GAAI+G,EAAqB7G,GACzB+U,KAAM,EACND,eAAgB,IAChBE,eAAgB,EAChB9G,QAAS,GACT+G,QAAS,EACT1M,SAAmB,UAATvI,EAAmBuI,OAAWoG,EAE5C,EAEA,IAAAnT,EAAAwuB,EAAAzwB,UAqkBC,OArkBDiC,EAIOka,iBAAP,SACEhN,EACAiN,EACAC,EACAC,GAEAxc,KAAK8wB,WAAY,EACjB9wB,KAAKgxB,QAAU,EAEfhxB,KAAKixB,YAAcN,EAAUgB,YAAY,SACzC3xB,KAAK8b,YAAc6U,EAAUgB,YAC3B,QACAnV,GAEFxc,KAAK+b,UAAY4U,EAAUgB,YAAY,OACvC3xB,KAAKkxB,UAAYP,EAAUgB,YAAY,QACvC3xB,KAAK8b,YAAY2F,aAAe,MAGhCzhB,KAAKmxB,YAAc,KACnBnxB,KAAKoZ,cAAgB,KACrBpZ,KAAKsc,WAAaA,EAClBtc,KAAKuc,WAAaA,EAClBvc,KAAK+wB,UAAYvU,GAClBra,EAEMsa,eAAP,aAA0Bta,EAEnBwa,gBAAP,WACE,IAAQb,EAAwC9b,KAAxC8b,YAAamV,EAA2BjxB,KAA3BixB,YAAalV,EAAc/b,KAAd+b,UAC9BD,IACFA,EAAY8V,QAAU,MAEpBX,IACFA,EAAYW,QAAU,MAEpB7V,IACFA,EAAU6V,QAAU,MAEtB5xB,KAAKmxB,YAAc,KACnBnxB,KAAKoZ,cAAgB,MACtBjX,EAEM0a,MAAP,SACEzc,EACAsU,EACAmd,EACA9X,GAMA,IAAIqN,OAPO,IAAXyK,IAAAA,GAAc,QACT,IAAL9X,IAAAA,GAAQ,GAEH8X,IACH7xB,KAAK6wB,UAAY,MAKnB,IAAMrT,EAAaxd,KAAKixB,YAClB1T,EAAavd,KAAK8b,YAClBkB,EAAWhd,KAAK+b,UAChB0B,EAAYzd,KAAKkxB,UAEnBY,EAAWtU,EAAW9B,IACtB9G,EAAY4I,EAAWoU,QACvBG,EAAWxU,EAAW7B,IACtBsW,EAAShV,EAAStB,IAClBuW,EAAY1U,EAAWqU,QACvB3mB,EAAU+R,EAAS4U,QACnBM,EAA4B,KAC5BpB,EAAY9wB,KAAK8wB,UACjBqB,EAAQnyB,KAAKgxB,OAEbpkB,EAAMxM,EAAKI,OAOf,GANIR,KAAKoZ,gBAEPxM,GADAxM,EAAOiU,GAAiBrU,KAAKoZ,cAAehZ,IACjCI,OACXR,KAAKoZ,cAAgB,MAGnBxM,EAAM8jB,KAAkB3W,EAE1B,OADA/Z,KAAKoZ,cAAgBhZ,EACd,CACLmd,WAAAA,EACAC,WAAAA,EACAR,SAAAA,EACAS,UAAAA,GAIJ,IAAM4T,EAAa9pB,KAAKyY,IAAI,EAAG2Q,EAAUU,WAAWjxB,KACpDwM,IAAQA,EAAMykB,GAAcX,IAClBtwB,EAAK2L,aAAegO,IAC5B/Z,KAAKoZ,cAAgB,IAAIjY,WACvBf,EAAKwF,OACLgH,EACAxM,EAAKwF,OAAOmG,WAAaa,IAM7B,IADA,IAAIwlB,EAAiB,EACZnxB,EAAQowB,EAAYpwB,EAAQ2L,EAAK3L,GAASyvB,GACjD,GAAoB,KAAhBtwB,EAAKa,GAAiB,CACxB,IAAMoxB,KAA2B,GAAlBjyB,EAAKa,EAAQ,IACtBya,EAAMgW,GAAStxB,EAAMa,GAIvB4C,OAAc,EAClB,IAJ+B,GAAlBzD,EAAKa,EAAQ,KAAc,EAI9B,GAGR,IAFA4C,EAAS5C,EAAQ,EAAIb,EAAKa,EAAQ,MAEnBA,EAAQyvB,GACrB,cAGF7sB,EAAS5C,EAAQ,EAEnB,OAAQya,GACN,KAAKoW,EACH,GAAIO,EAAK,CACP,GAAIzd,IAAcwS,EAAMD,GAASvS,IAAa,CAC5C,GAAyB,OAArB5U,KAAKoxB,YACP,OAAQ5T,EAAWiE,cACjB,IAAK,MACHzhB,KAAKoxB,YAAc,IAAIpK,GACvB,MACF,IAAK,OACHhnB,KAAKoxB,YAAc,IAAI5H,GAIJ,OAArBxpB,KAAKoxB,aACPpxB,KAAKoxB,YAAYjK,SACf3J,EACAC,EACA2J,GACA,EACApnB,KAAK+wB,UAGX,CAEAnc,EAAY,CAAExU,KAAM,GAAIkK,KAAM,EAChC,CACIsK,IACFA,EAAUxU,KAAKgL,KAAKhL,EAAKiK,SAASxG,EAAQ5C,EAAQyvB,KAClD9b,EAAUtK,MAAQrJ,EAAQyvB,GAAgB7sB,GAE5C,MACF,KAAKkuB,EACH,GAAIM,EAAK,CACP,GAAIJ,IAAc7K,EAAMD,GAAS8K,IAC/B,OAAQ1U,EAAWkE,cACjB,IAAK,MACHzhB,KAAKsyB,YAAY/U,EAAY6J,GAC7B,MACF,IAAK,MACHpnB,KAAKuyB,aAAahV,EAAY6J,GAC9B,MACF,IAAK,MAEDpnB,KAAKwyB,YAAYjV,EAAY6J,GAKrC6K,EAAY,CAAE7xB,KAAM,GAAIkK,KAAM,EAChC,CACI2nB,IACFA,EAAU7xB,KAAKgL,KAAKhL,EAAKiK,SAASxG,EAAQ5C,EAAQyvB,KAClDuB,EAAU3nB,MAAQrJ,EAAQyvB,GAAgB7sB,GAE5C,MACF,KAAKmuB,EACCK,IACEpnB,IAAYmc,EAAMD,GAASlc,KAC7BjL,KAAKyyB,YAAYzV,EAAUoK,GAG7Bnc,EAAU,CAAE7K,KAAM,GAAIkK,KAAM,IAE1BW,IACFA,EAAQ7K,KAAKgL,KAAKhL,EAAKiK,SAASxG,EAAQ5C,EAAQyvB,KAChDzlB,EAAQX,MAAQrJ,EAAQyvB,GAAgB7sB,GAE1C,MACF,KAAK,EACCwuB,IACFxuB,GAAUzD,EAAKyD,GAAU,GAG3BsuB,EAAQnyB,KAAKgxB,OAAS0B,GAAStyB,EAAMyD,GAErC,MACF,KAAKsuB,EACCE,IACFxuB,GAAUzD,EAAKyD,GAAU,GAG3B,IAAM8uB,EAAaC,GACjBxyB,EACAyD,EACA7D,KAAK4wB,cACLiB,IASFC,EAAWa,EAAWb,UACP,IACbtU,EAAW9B,IAAMoW,EACjBtU,EAAWiE,aAAekR,EAAWE,oBAGvCd,EAAWY,EAAWZ,UACP,IACbxU,EAAW7B,IAAMqW,EACjBxU,EAAWkE,aAAekR,EAAWG,oBAEvCd,EAASW,EAAWX,QACP,IACXhV,EAAStB,IAAMsW,GAGE,OAAfE,GAAwBpB,IAC1B7pB,EAAOf,KACmBjF,wBAAAA,yBAA4BixB,EAAU,iCAAiCb,EAAU,6BAE3Ga,EAAa,KAEbjxB,EAAQowB,EAAa,KAEvBP,EAAY9wB,KAAK8wB,WAAY,EAC7B,MAEF,KAAK,GACL,KAAK,KACH,MACF,QACEoB,EAAaxW,EAGnB,MACE0W,IAIJ,GAAIA,EAAiB,EAAG,CACtB,IAAMhsB,EAAQ,IAAI3F,MACP2xB,SAAAA,8CAEXpyB,KAAKqe,SAASa,KAAK1f,EAAO2f,MAAO3f,EAAO2f,MAAO,CAC7CxY,KAAMlH,EAAW2f,YACjBC,QAAS3f,EAAa4f,mBACtBC,OAAO,EACPnZ,MAAAA,EACAoZ,OAAQpZ,EAAM+U,SAElB,CAEAqC,EAAWoU,QAAUhd,EACrB2I,EAAWqU,QAAUK,EACrBjV,EAAS4U,QAAU3mB,EAEnB,IAAM8nB,EAA6B,CACjCxV,WAAAA,EACAC,WAAAA,EACAR,SAAAA,EACAS,UAAAA,GAOF,OAJI1D,GACF/Z,KAAKgzB,wBAAwBD,GAGxBA,GACR5wB,EAEM4X,MAAP,WACE,IAEIzK,EAFI8J,EAAkBpZ,KAAlBoZ,cAcR,OAbApZ,KAAKoZ,cAAgB,KAGnB9J,EADE8J,EACOpZ,KAAK6c,MAAMzD,GAAgB,GAAG,GAAO,GAErC,CACPoE,WAAYxd,KAAKixB,YACjB1T,WAAYvd,KAAK8b,YACjBkB,SAAUhd,KAAK+b,UACf0B,UAAWzd,KAAKkxB,WAGpBlxB,KAAKgzB,wBAAwB1jB,GACzBtP,KAAK6wB,UACA7wB,KAAKG,QAAQmP,EAAQtP,KAAK6wB,WAE5BvhB,GACRnN,EAEO6wB,wBAAR,SAAgCD,GAC9B,IAKI3L,EALI7J,EAAgDwV,EAAhDxV,WAAYC,EAAoCuV,EAApCvV,WAAYR,EAAwB+V,EAAxB/V,SAAUS,EAAcsV,EAAdtV,UACpC7I,EAAY4I,EAAWoU,QACvBK,EAAY1U,EAAWqU,QACvB3mB,EAAU+R,EAAS4U,QAGzB,GAAIhd,IAAcwS,EAAMD,GAASvS,IAAa,CAC5C,GAAyB,OAArB5U,KAAKoxB,YACP,OAAQ5T,EAAWiE,cACjB,IAAK,MACHzhB,KAAKoxB,YAAc,IAAIpK,GACvB,MACF,IAAK,OACHhnB,KAAKoxB,YAAc,IAAI5H,GAIJ,OAArBxpB,KAAKoxB,cACPpxB,KAAKoxB,YAAYjK,SACf3J,EACAC,EACA2J,GACA,EACApnB,KAAK+wB,WAEPvT,EAAWoU,QAAU,KAEzB,MAEEpU,EAAWoU,QAAUhd,EAGvB,GAAIqd,IAAc7K,EAAMD,GAAS8K,IAAa,CAC5C,OAAQ1U,EAAWkE,cACjB,IAAK,MACHzhB,KAAKsyB,YAAY/U,EAAY6J,GAC7B,MACF,IAAK,MACHpnB,KAAKuyB,aAAahV,EAAY6J,GAC9B,MACF,IAAK,MAEDpnB,KAAKwyB,YAAYjV,EAAY6J,GAInC7J,EAAWqU,QAAU,IACvB,MACe,MAATK,GAAAA,EAAW3nB,MACbrD,EAAOhB,IACL,iEAKJsX,EAAWqU,QAAUK,EAGnBhnB,IAAYmc,EAAMD,GAASlc,KAC7BjL,KAAKyyB,YAAYzV,EAAUoK,GAC3BpK,EAAS4U,QAAU,MAGnB5U,EAAS4U,QAAU3mB,GAEtB9I,EAEMub,eAAP,SACEtd,EACAud,EACAjJ,GAEA,IAAMqe,EAAc/yB,KAAK6c,MACvBzc,EACAsU,GACA,GACC1U,KAAK6Y,OAAOyJ,aAETuO,EAAa7wB,KAAK6wB,UAAY,IAAI3B,GACtClvB,KAAKqe,SACLre,KAAK6Y,OACL8E,GAEF,OAAO3d,KAAKG,QAAQ4yB,EAAalC,IAClC1uB,EAEOhC,QAAR,SACE4yB,EACAlC,GAEA,OAAO,IAAIxW,SAAQ,SAACC,GAClB,IAAQiD,EAA2BwV,EAA3BxV,WAAYC,EAAeuV,EAAfvV,WAChBD,EAAW1I,SAAuC,QAA5B0I,EAAWkE,aACnCoP,EAAUhB,kBAAkBtS,EAAW1I,QAAS,GAAG,WAC7C2I,EAAW3I,QACbgc,EAAUL,kBAAkBhT,EAAW3I,QAAS,EAAG,GAAG,WACpDyF,EAAQyY,EACV,IAEAzY,EAAQyY,EAEZ,IACSvV,EAAW3I,SACpBgc,EAAUL,kBAAkBhT,EAAW3I,QAAS,EAAG,GAAG,WACpDyF,EAAQyY,EACV,GAEJ,KACD5wB,EAEM0X,QAAP,WACE7Z,KAAK+wB,UAAY,GAClB5uB,EAEOmwB,YAAR,SAAoBjiB,EAA0B+W,GAC5C,IAqBIvjB,EACA+I,EAsCA0K,EA5DA2b,EAAc,EACZ9B,EAAcnxB,KAAKmxB,YACrB/wB,EAAOgnB,EAAIhnB,KACf,GAAI+wB,EAAa,CACfnxB,KAAKmxB,YAAc,KACnB,IAAM+B,EAAoB/B,EAAYpR,QAChCoT,EAAehC,EAAY9T,OAAOsC,KAAK5T,WAE7C,IAA2B,IAAvBmnB,EACF9yB,EAAOiU,GAAiB8c,EAAY9T,OAAOsC,KAAMvf,OAC5C,CACL,IAAMgzB,EAAqBD,EAAeD,EAC1C/B,EAAY9T,OAAOsC,KAAK1L,IACtB7T,EAAKiK,SAAS,EAAG6oB,GACjBE,GAEF/iB,EAAMwE,QAAQzJ,KAAK+lB,EAAY9T,QAC/B4V,EAAc9B,EAAYpR,OAC5B,CACF,CAIA,IAAKlc,EAASovB,EAAarmB,EAAMxM,EAAKI,OAAQqD,EAAS+I,EAAM,IACvD+U,GAAcvhB,EAAMyD,GADsCA,KAMhE,GAAIA,IAAWovB,EAAa,CAC1B,IAAIzT,EACE6T,EAAcxvB,EAAS+I,EAAM,EAEjC4S,EADE6T,mDACwDxvB,EAEjD,kCAEX,IAAMuC,EAAQ,IAAI3F,MAAM+e,GAUxB,GATAvY,EAAOf,KAAuBsZ,kBAAAA,GAC9Bxf,KAAKqe,SAASa,KAAK1f,EAAO2f,MAAO3f,EAAO2f,MAAO,CAC7CxY,KAAMlH,EAAW2f,YACjBC,QAAS3f,EAAa4f,mBACtBC,OAAO,EACP+T,WAAYD,EACZjtB,MAAAA,EACAoZ,OAAAA,KAEG6T,EACH,MAEJ,CAWA,GATA1R,GACEtR,EACArQ,KAAKqe,SACLje,EACAyD,EACA7D,KAAKsc,iBAIShH,IAAZ8R,EAAI9P,IACNA,EAAM8P,EAAI9P,QACL,KAAI6Z,EAOT,YADAlqB,EAAOf,KAAK,oCAHZ,IAAMqtB,EAAgB5R,GAAsBtR,EAAMiO,YAClDhH,EAAM6Z,EAAY9T,OAAO/F,IAAMic,CAIjC,CAKA,IAFA,IACI5oB,EADAqR,EAAa,EAEVnY,EAAS+I,GAAK,CAGnB,GADA/I,IADA8G,EAAQgX,GAAiBtR,EAAOjQ,EAAMyD,EAAQyT,EAAK0E,IACnCxb,OACXmK,EAAMoV,QAOJ,CACL/f,KAAKmxB,YAAcxmB,EACnB,KACF,CARE,IADAqR,IACOnY,EAAS+I,EAAM,IAChB+U,GAAcvhB,EAAMyD,GADDA,KAS7B,GACD1B,EAEOowB,aAAR,SAAqBliB,EAA0B+W,GAC7C,IAAMhnB,EAAOgnB,EAAIhnB,KACXI,EAASJ,EAAKI,OAChBwb,EAAa,EACbnY,EAAS,EACPyT,EAAM8P,EAAI9P,IAChB,QAAYhC,IAARgC,EAKJ,KAAOzT,EAASrD,GACd,GAAIkhB,GAAmBthB,EAAMyD,GAAS,CACpC,IAAM8G,EAAQ+W,GACZrR,EACAjQ,EACAyD,EACAyT,EACA0E,GAEF,IAAIrR,EAKF,MAJA9G,GAAU8G,EAAMnK,OAChBwb,GAKJ,MAEEnY,SAtBFoD,EAAOf,KAAK,sCAyBf/D,EAEOqwB,YAAR,SAAoBniB,EAA0B+W,GAE1C,IAAMhnB,EAAOgnB,EAAIhnB,KACXkX,EAAM8P,EAAI9P,IAChB,QAAYhC,IAARgC,EASJ,IALA,IAGIkc,EAHEhzB,EAASJ,EAAKI,OAChBwb,EAAa,EACbnY,EAAS,EAIXA,EAASrD,IACRgzB,EAASC,GAAgBpjB,EAAOjQ,EAAMyD,EAAQyT,EAAK0E,MAAiB,GAErEnY,GAAU2vB,OAZVvsB,EAAOf,KAAK,qCAejB/D,EAEOswB,YAAR,SAAoBzV,EAAgCoK,GAClD,QAAgB9R,IAAZ8R,EAAI9P,IAAR,CAIA,IAAMoc,EAAYptB,EAAc,CAAE,EAAE8gB,EAAsB,CACxDzgB,KAAM3G,KAAKixB,YAAc1V,GAAsBA,GAC/CrM,SAAU/H,OAAOiW,oBAEnBJ,EAASnI,QAAQzJ,KAAKsoB,EALtB,MAFEzsB,EAAOf,KAAK,qCAQfyqB,CAAA,CArrBY,GAwrBf,SAASe,GAAStxB,EAAkByD,GAElC,QAA4B,GAAnBzD,EAAKyD,EAAS,KAAc,GAAKzD,EAAKyD,EAAS,EAC1D,CAEA,SAAS6uB,GAAStyB,EAAkByD,GAElC,OAA6B,GAApBzD,EAAKyD,EAAS,MAAe,EAAKzD,EAAKyD,EAAS,GAC3D,CAEA,SAAS+uB,GACPxyB,EACAyD,EACA+sB,EACAiB,GAEA,IAAMviB,EAAS,CACbyiB,UAAW,EACXD,UAAW,EACXE,QAAS,EACTa,kBAAmB,MACnBC,kBAAmB,OAGfa,EAAW9vB,EAAS,IADiB,GAAnBzD,EAAKyD,EAAS,KAAc,EAAKzD,EAAKyD,EAAS,IACzB,EAO9C,IADAA,GAAU,KAFc,GAApBzD,EAAKyD,EAAS,MAAe,EAAKzD,EAAKyD,EAAS,KAG7CA,EAAS8vB,GAAU,CACxB,IAAMjY,EAAMgW,GAAStxB,EAAMyD,GACrB+vB,GAAoC,GAAnBxzB,EAAKyD,EAAS,KAAc,EAAKzD,EAAKyD,EAAS,GACtE,OAAQzD,EAAKyD,IACX,KAAK,IACH,IAAKguB,EAAa,CAChBgC,GAA4C,YAC5C,KACF,CAEF,KAAK,IAEsB,IAArBvkB,EAAOyiB,WACTziB,EAAOyiB,SAAWrW,GAGpB,MAGF,KAAK,IAEoB,IAAnBpM,EAAO0iB,SACT1iB,EAAO0iB,OAAStW,GAGlB,MAEF,KAAK,IACH,IAAKmW,EAAa,CAChBgC,GAA4C,SAC5C,KACF,CAEF,KAAK,IAEsB,IAArBvkB,EAAOwiB,WACTxiB,EAAOwiB,SAAWpW,EAClBpM,EAAOujB,kBAAoB,OAG7B,MAIF,KAAK,EACL,KAAK,EAEEjC,EAAckD,MAASlD,EAAcmD,KAEV,IAArBzkB,EAAOyiB,WAChBziB,EAAOyiB,SAAWrW,EAClBpM,EAAOwjB,kBAAoB,OAH3B7rB,EAAOhB,IAAI,mDAKb,MAEF,KAAK,IACH,IAAK4rB,EAAa,CAChBgC,GAA4C,QAC5C,KACF,CAEF,KAAK,IAEIjD,EAAcoD,KAEa,IAArB1kB,EAAOyiB,WAChBziB,EAAOyiB,SAAWrW,EAClBpM,EAAOwjB,kBAAoB,OAH3B7rB,EAAOhB,IAAI,mDAQf,MAEF,KAAK,EAKH,IAAyB,IAArBqJ,EAAOyiB,UAAmB6B,EAAe,EAI3C,IAHA,IAAIK,EAAWpwB,EAAS,EACpBqwB,EAAYN,EAETM,EAAY,GAAG,CAGpB,GACO,MAHc9zB,EAAK6zB,IAKM,IAAtBrD,EAAcoD,IAChB/sB,EAAOhB,IACL,4DAGFqJ,EAAOyiB,SAAWrW,EAClBpM,EAAOwjB,kBAAoB,OAQnC,IAAMqB,EAAgB/zB,EAAK6zB,EAAW,GAAK,EAC3CA,GAAYE,EACZD,GAAaC,CACf,CAEF,MAEF,KAAK,IAEL,KAAK,IACHltB,EAAOf,KAAK,kCACZ,MAEF,KAAK,IACsB,IAArBoJ,EAAOwiB,WACTxiB,EAAOwiB,SAAWpW,EAClBpM,EAAOujB,kBAAoB,OAC3B5rB,EAAOhB,IAAI,uBAUjBpC,GAAU+vB,EAAe,CAC3B,CACA,OAAOtkB,CACT,CAEA,SAASukB,GAA4CltB,GACnDM,EAAOhB,IAAOU,6DAChB,CAEA,SAASwgB,GAASiN,GAChB,IACIC,EACAC,EACAC,EACAC,EACAC,EALAhyB,EAAI,EAMFrC,EAAOg0B,EAAOh0B,KAEpB,IAAKg0B,GAA0B,IAAhBA,EAAO9pB,KACpB,OAAO,KAMT,KAAOlK,EAAK,GAAGI,OAAS,IAAMJ,EAAKI,OAAS,GAC1CJ,EAAK,GAAKiU,GAAiBjU,EAAK,GAAIA,EAAK,IACzCA,EAAKs0B,OAAO,EAAG,GAKjB,GAAkB,MAFlBL,EAAOj0B,EAAK,IACY,IAAM,KAAOi0B,EAAK,IAAM,GAAKA,EAAK,GACrC,CAInB,IAHAC,GAAUD,EAAK,IAAM,GAAKA,EAAK,KAGjBC,EAASF,EAAO9pB,KAAO,EACnC,OAAO,KAGT,IAAMqqB,EAAWN,EAAK,GACP,IAAXM,IAIFH,EACqB,WAAR,GAAVH,EAAK,IACc,SAAR,IAAXA,EAAK,KACc,OAAR,IAAXA,EAAK,KACc,KAAR,IAAXA,EAAK,MACM,IAAXA,EAAK,KAAc,EAEP,GAAXM,EAQEH,GAPJC,EACsB,WAAR,GAAXJ,EAAK,KACc,SAAR,IAAXA,EAAK,KACc,OAAR,IAAXA,EAAK,KACc,KAAR,IAAXA,EAAK,MACM,IAAXA,EAAK,KAAc,GAEA,OACpBptB,EAAOf,KACFqB,KAAK2E,OACLsoB,EAASC,GAAU,gDAGxBD,EAASC,GAGXA,EAASD,GAKb,IAAII,GAFJL,EAAYF,EAAK,IAEoB,EACrC,GAAID,EAAO9pB,MAAQsqB,EACjB,OAAO,KAETR,EAAO9pB,MAAQsqB,EAGf,IADA,IAAMhD,EAAU,IAAIzwB,WAAWizB,EAAO9pB,MAC7Boe,EAAI,EAAGmM,EAAUz0B,EAAKI,OAAQkoB,EAAImM,EAASnM,IAAK,CAEvD,IAAI9b,GADJynB,EAAOj0B,EAAKsoB,IACG3c,WACf,GAAI6oB,EAAoB,CACtB,GAAIA,EAAqBhoB,EAAK,CAE5BgoB,GAAsBhoB,EACtB,QACF,CAEEynB,EAAOA,EAAKhqB,SAASuqB,GACrBhoB,GAAOgoB,EACPA,EAAqB,CAEzB,CACAhD,EAAQ3d,IAAIogB,EAAM5xB,GAClBA,GAAKmK,CACP,CAKA,OAJI0nB,IAEFA,GAAUC,EAAY,GAEjB,CAAEn0B,KAAMwxB,EAASta,IAAKkd,EAAQrX,IAAKsX,EAAQ7nB,IAAK0nB,EACzD,CACA,OAAO,IACT,CCn/ByC,IAEnCQ,YAAUxT,GAAA,SAAAwT,IAAA,OAAAxT,EAAAzT,MAAA7N,KAAAknB,YAAAlnB,IAAA,CAAAuhB,EAAAuT,EAAAxT,GAAA,IAAAnf,EAAA2yB,EAAA50B,UAuEb,OAvEaiC,EACdka,iBAAA,SACEhN,EACAiN,EACAC,EACAC,GAEA8E,EAAAphB,UAAMmc,iBAAgB/a,KAAC+N,KAAAA,EAAaiN,EAAYC,EAAYC,GAC5Dxc,KAAK8b,YAAc,CACjB0F,UAAW,aACX7a,KAAM,QACNF,GAAI,EACJiV,KAAM,EACNC,eAAgB,EAChB8F,aAAc,MACd5M,QAAS,GACT+J,cAAetC,EACfpN,SAAUsN,EACVf,eAAgB,IAChBG,QAAS,IAEZkZ,EAEM9W,MAAP,SAAa5d,GACX,IAAKA,EACH,OAAO,EAOT,IAAM6K,EAAUf,EAAW9J,EAAM,GAC7ByD,SAASoH,SAAAA,EAASzK,SAAU,EAGhC,GACEyK,GACiB,KAAjB7K,EAAKyD,IACgB,MAArBzD,EAAKyD,EAAS,SACYyR,IAA1B9K,EAAaS,IAEb0Y,GAAavjB,EAAMyD,IAAW,GAE9B,OAAO,EAGT,IAAK,IAAIrD,EAASJ,EAAKI,OAAQqD,EAASrD,EAAQqD,IAC9C,GAAI6d,GAAgBthB,EAAMyD,GAExB,OADAoD,EAAOhB,IAAI,iCACJ,EAGX,OAAO,GACR9D,EAEDoI,SAAA,SAASnK,EAAMyD,GACb,OXuFG,SAAkBzD,EAAkByD,GAGzC,OAAOga,GAAgBzd,EAAMyD,IAFV,GAEmCzD,EAAKI,OAASqD,CACtE,CW3FW6d,CAAmBthB,EAAMyD,IACjC1B,EAEDya,YAAA,SAAYvM,EAAOjQ,EAAMyD,GACvB,GAAqB,OAAjB7D,KAAKkc,QAGT,OAAOwF,GACLrR,EACAjQ,EACAyD,EACA7D,KAAKkc,QACLlc,KAAKgc,aAER8Y,CAAA,EAvEsBjZ,ICLnBkZ,GAAG,WAAA,SAAAA,IAAA,CAyEN,OAzEMA,EACAC,eAAP,SACEpkB,EACAoO,GAEA,GACO,cADCpO,EACN,CACE,GAAqB,IAAjBoO,EACF,OAAO,IAAI7d,WAAW,CAAC,EAAM,IAAM,EAAM,IAAM,GAAM,MAChD,GAAqB,IAAjB6d,EACT,OAAO,IAAI7d,WAAW,CACpB,GAAM,EAAM,GAAM,IAAM,EAAM,GAAM,EAAM,GAAM,MAE7C,GAAqB,IAAjB6d,EACT,OAAO,IAAI7d,WAAW,CACpB,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,EAAM,IAC5D,EAAM,MAEH,GAAqB,IAAjB6d,EACT,OAAO,IAAI7d,WAAW,CACpB,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,EAAM,IAC5D,EAAM,IAAM,GAAM,IAAM,EAAM,EAAM,KAEjC,GAAqB,IAAjB6d,EACT,OAAO,IAAI7d,WAAW,CACpB,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,EAAM,IAC5D,EAAM,IAAM,GAAM,EAAM,IAAM,EAAM,GAAM,IAAM,EAAM,KAEnD,GAAqB,IAAjB6d,EACT,OAAO,IAAI7d,WAAW,CACpB,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAAM,EAAM,IAC5D,EAAM,IAAM,GAAM,EAAM,IAAM,EAAM,GAAM,IAAM,EAAM,EAAM,IAC5D,EAAM,GAAM,EAAM,KAItB,KAEF,CACE,GAAqB,IAAjB6d,EAEF,OAAO,IAAI7d,WAAW,CACpB,EAAK,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAK,EAAK,EAC/D,EAAK,GAAM,EAAK,IAAM,IAAM,GAAK,GAAM,GAAM,GAAM,GAAM,GAAM,GAC/D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,KAEH,GAAqB,IAAjB6d,EAET,OAAO,IAAI7d,WAAW,CACpB,EAAK,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAK,EAAK,EAC/D,EAAK,EAAK,IAAM,EAAK,EAAK,IAAM,IAAM,GAAK,GAAM,GAAM,GAAM,GAC7D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,KAEH,GAAqB,IAAjB6d,EAET,OAAO,IAAI7d,WAAW,CACpB,EAAK,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAAK,EAAK,EAC/D,EAAK,EAAK,IAAM,EAAK,EAAK,IAAM,IAAM,GAAK,GAAM,GAAM,GAAM,GAC7D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC5D,GAAM,IAGV,GAGL4zB,CAAA,CAzEM,GCOHznB,GAAa/F,KAAKgG,IAAI,EAAG,IAAM,EAE/B0nB,GAAG,WAAA,SAAAA,IAAA,CA0xCN,OA1xCMA,EAaAC,KAAP,WA4CE,IAAIzyB,EACJ,IAAKA,KA5CLwyB,EAAIE,MAAQ,CACVC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNhmB,KAAM,GACNimB,KAAM,GACNlmB,KAAM,GACNmmB,KAAM,GACNC,KAAM,GACNC,KAAM,GACNhhB,KAAM,GACNihB,KAAM,GACNC,KAAM,GACN,OAAQ,GACRC,KAAM,GACN,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNlmB,KAAM,GACNmmB,KAAM,GACNC,KAAM,GACNvhB,KAAM,GACNE,KAAM,GACNJ,KAAM,GACN3F,KAAM,GACN2E,KAAM,GACN/D,KAAM,GACNX,KAAM,GACNonB,KAAM,GACNC,KAAM,IAIE7B,EAAIE,MACRF,EAAIE,MAAM4B,eAAet0B,KAC3BwyB,EAAIE,MAAM1yB,GAAK,CACbA,EAAEu0B,WAAW,GACbv0B,EAAEu0B,WAAW,GACbv0B,EAAEu0B,WAAW,GACbv0B,EAAEu0B,WAAW,KAKnB,IAAMC,EAAY,IAAI91B,WAAW,CAC/B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IAGI+1B,EAAY,IAAI/1B,WAAW,CAC/B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IACA,IACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IAGF8zB,EAAIkC,WAAa,CACf1pB,MAAOwpB,EACPvpB,MAAOwpB,GAGT,IAAMxB,EAAO,IAAIv0B,WAAW,CAC1B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,IACA,IACA,GACA,EACA,EACA,EACA,IAGIs1B,EAAO,IAAIt1B,WAAW,CAC1B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAGF8zB,EAAI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IAAIplB,IACNsJ,WACX8b,EAAIzc,KAAMwB,IAAQ,EAAK,KACvBib,EAAIzc,KAAW,IAANwB,GAGTib,EAAMA,EAAI+B,OAAOvoB,MAAMnB,UAAUkB,MAAME,KAAKlB,IAI9C,IAAKqC,EAAI,EAAGA,EAAI4N,EAAM+X,IAAI5nB,OAAQiC,IAEhCmK,GADAxM,EAAOiQ,EAAM+X,IAAI3lB,IACNsJ,WACXqc,EAAIhd,KAAMwB,IAAQ,EAAK,KACvBwb,EAAIhd,KAAW,IAANwB,GAETwb,EAAMA,EAAIwB,OAAOvoB,MAAMnB,UAAUkB,MAAME,KAAKlB,IAG9C,IAAMs4B,EAAOzD,EAAI8C,IACf9C,EAAIE,MAAME,KACV,IAAIl0B,WACF,CACE,EACA0mB,EAAI,GACJA,EAAI,GACJA,EAAI,GACJ,IACA,IAAOxX,EAAMwX,IAAIrnB,QAEhBopB,OAAO/B,GACP+B,OAAO,CACNvZ,EAAM+X,IAAI5nB,SAEXopB,OAAOxB,KAGRL,EAAQ1X,EAAM0X,MACdC,EAAS3X,EAAM2X,OACf2Q,EAAWtoB,EAAM4X,WAAW,GAC5B2Q,EAAWvoB,EAAM4X,WAAW,GAElC,OAAOgN,EAAI8C,IACT9C,EAAIE,MAAMC,KACV,IAAIj0B,WAAW,CACb,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACC4mB,GAAS,EAAK,IACP,IAARA,EACCC,GAAU,EAAK,IACP,IAATA,EACA,EACA,GACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,KAEF0Q,EACAzD,EAAI8C,IACF9C,EAAIE,MAAMK,KACV,IAAIr0B,WAAW,CACb,EACA,GACA,IACA,IACA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AAGimB,GAAGloB,SACrDA,GAEFA,GAAU,EACV+0B,EAAKthB,IAAIyQ,EAAMjiB,GAAGimB,GAAIloB,GACtBA,GAAUkkB,EAAMjiB,GAAGimB,GAAGloB,MAE1B,CACA,IAAMs5B,EAAO7E,EAAI8C,IAAI9C,EAAIE,MAAMI,KAAMA,GAC/BxN,EAAQ1X,EAAM0X,MACdC,EAAS3X,EAAM2X,OACf2Q,EAAWtoB,EAAM4X,WAAW,GAC5B2Q,EAAWvoB,EAAM4X,WAAW,GAElC,OAAOgN,EAAI8C,IACT9C,EAAIE,MAAMG,KACV,IAAIn0B,WAAW,CACb,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACC4mB,GAAS,EAAK,IACP,IAARA,EACCC,GAAU,EAAK,IACP,IAATA,EACA,EACA,GACA,EACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,IACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,KAEF8R,EACA7E,EAAI8C,IACF9C,EAAIE,MAAMK,KACV,IAAIr0B,WAAW,CACb,EACA,GACA,IACA,IACA,EACA,GACA,IACA,IACA,EACA,GACA,IACA,OAGJ8zB,EAAI8C,IACF9C,EAAIE,MAAMmB,KACV,IAAIn1B,WAAW,CACbw3B,GAAY,GACXA,GAAY,GAAM,IAClBA,GAAY,EAAK,IACP,IAAXA,EACAC,GAAY,GACXA,GAAY,GAAM,IAClBA,GAAY,EAAK,IACP,IAAXA,OAIP3D,CAAA,CA1xCM,GAAHA,GACUE,WAAK,EADfF,GAEWkC,gBAAU,EAFrBlC,GAGWmC,UAAI,EAHfnC,GAIWoC,UAAI,EAJfpC,GAKWqC,UAAI,EALfrC,GAMWsC,UAAI,EANftC,GAOWuC,UAAI,EAPfvC,GA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","x_google_ignoreList":[9,42]}